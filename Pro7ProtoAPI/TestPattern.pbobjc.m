// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: testPattern.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "TestPattern.pbobjc.h"
#import "BasicTypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Color);
GPBObjCClassDeclaration(TestPattern);
GPBObjCClassDeclaration(TestPattern_BlendGrid);
GPBObjCClassDeclaration(TestPattern_CustomColor);
GPBObjCClassDeclaration(TestPattern_IntensityColor);

#pragma mark - TestPatternRoot

@implementation TestPatternRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TestPatternRoot_FileDescriptor

static GPBFileDescriptor *TestPatternRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TestPattern

@implementation TestPattern

@dynamic patternPropertiesOneOfCase;
@dynamic type;
@dynamic blendGrid;
@dynamic customColor;
@dynamic intensity;

typedef struct TestPattern__storage_ {
  uint32_t _has_storage_[2];
  TestPattern_Type type;
  TestPattern_BlendGrid *blendGrid;
  TestPattern_CustomColor *customColor;
  TestPattern_IntensityColor *intensity;
} TestPattern__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = TestPattern_Type_EnumDescriptor,
        .number = TestPattern_FieldNumber_Type,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TestPattern__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "blendGrid",
        .dataTypeSpecific.clazz = GPBObjCClass(TestPattern_BlendGrid),
        .number = TestPattern_FieldNumber_BlendGrid,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TestPattern__storage_, blendGrid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customColor",
        .dataTypeSpecific.clazz = GPBObjCClass(TestPattern_CustomColor),
        .number = TestPattern_FieldNumber_CustomColor,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TestPattern__storage_, customColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "intensity",
        .dataTypeSpecific.clazz = GPBObjCClass(TestPattern_IntensityColor),
        .number = TestPattern_FieldNumber_Intensity,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(TestPattern__storage_, intensity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TestPattern class]
                                     rootClass:[TestPatternRoot class]
                                          file:TestPatternRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TestPattern__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "patternProperties",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t TestPattern_Type_RawValue(TestPattern *message) {
  GPBDescriptor *descriptor = [TestPattern descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TestPattern_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTestPattern_Type_RawValue(TestPattern *message, int32_t value) {
  GPBDescriptor *descriptor = [TestPattern descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:TestPattern_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

void TestPattern_ClearPatternPropertiesOneOfCase(TestPattern *message) {
  GPBDescriptor *descriptor = [TestPattern descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum TestPattern_Type

GPBEnumDescriptor *TestPattern_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnknown\000TypeBlendGrid\000TypeColorBars\000"
        "TypeFocus\000TypeGrayScale\000TypeBlackColor\000T"
        "ypeWhiteColor\000TypeCustomColor\000";
    static const int32_t values[] = {
        TestPattern_Type_TypeUnknown,
        TestPattern_Type_TypeBlendGrid,
        TestPattern_Type_TypeColorBars,
        TestPattern_Type_TypeFocus,
        TestPattern_Type_TypeGrayScale,
        TestPattern_Type_TypeBlackColor,
        TestPattern_Type_TypeWhiteColor,
        TestPattern_Type_TypeCustomColor,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(TestPattern_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:TestPattern_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL TestPattern_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case TestPattern_Type_TypeUnknown:
    case TestPattern_Type_TypeBlendGrid:
    case TestPattern_Type_TypeColorBars:
    case TestPattern_Type_TypeFocus:
    case TestPattern_Type_TypeGrayScale:
    case TestPattern_Type_TypeBlackColor:
    case TestPattern_Type_TypeWhiteColor:
    case TestPattern_Type_TypeCustomColor:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - TestPattern_BlendGrid

@implementation TestPattern_BlendGrid

@dynamic drawGrid;
@dynamic drawCircles;
@dynamic drawLines;
@dynamic invertColors;
@dynamic gridSpacing;

typedef struct TestPattern_BlendGrid__storage_ {
  uint32_t _has_storage_[1];
  double gridSpacing;
} TestPattern_BlendGrid__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "drawGrid",
        .dataTypeSpecific.clazz = Nil,
        .number = TestPattern_BlendGrid_FieldNumber_DrawGrid,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "drawCircles",
        .dataTypeSpecific.clazz = Nil,
        .number = TestPattern_BlendGrid_FieldNumber_DrawCircles,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "drawLines",
        .dataTypeSpecific.clazz = Nil,
        .number = TestPattern_BlendGrid_FieldNumber_DrawLines,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "invertColors",
        .dataTypeSpecific.clazz = Nil,
        .number = TestPattern_BlendGrid_FieldNumber_InvertColors,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "gridSpacing",
        .dataTypeSpecific.clazz = Nil,
        .number = TestPattern_BlendGrid_FieldNumber_GridSpacing,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(TestPattern_BlendGrid__storage_, gridSpacing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TestPattern_BlendGrid class]
                                     rootClass:[TestPatternRoot class]
                                          file:TestPatternRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TestPattern_BlendGrid__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(TestPattern)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TestPattern_CustomColor

@implementation TestPattern_CustomColor

@dynamic hasColor, color;

typedef struct TestPattern_CustomColor__storage_ {
  uint32_t _has_storage_[1];
  Color *color;
} TestPattern_CustomColor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "color",
        .dataTypeSpecific.clazz = GPBObjCClass(Color),
        .number = TestPattern_CustomColor_FieldNumber_Color,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TestPattern_CustomColor__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TestPattern_CustomColor class]
                                     rootClass:[TestPatternRoot class]
                                          file:TestPatternRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TestPattern_CustomColor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(TestPattern)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TestPattern_IntensityColor

@implementation TestPattern_IntensityColor

@dynamic intensity;

typedef struct TestPattern_IntensityColor__storage_ {
  uint32_t _has_storage_[1];
  double intensity;
} TestPattern_IntensityColor__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "intensity",
        .dataTypeSpecific.clazz = Nil,
        .number = TestPattern_IntensityColor_FieldNumber_Intensity,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TestPattern_IntensityColor__storage_, intensity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TestPattern_IntensityColor class]
                                     rootClass:[TestPatternRoot class]
                                          file:TestPatternRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TestPattern_IntensityColor__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(TestPattern)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
