// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: baseDocument.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "BaseDocument.pbobjc.h"
#import "Workspace.pbobjc.h"
#import "BasicTypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ApplicationInfo);
GPBObjCClassDeclaration(PVPDocumentState);
GPBObjCClassDeclaration(PVPDocumentState_PlaylistState);
GPBObjCClassDeclaration(URL);
GPBObjCClassDeclaration(UUID);
GPBObjCClassDeclaration(Version);
GPBObjCClassDeclaration(Workspace);

#pragma mark - BaseDocumentRoot

@implementation BaseDocumentRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - BaseDocumentRoot_FileDescriptor

static GPBFileDescriptor *BaseDocumentRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Document

@implementation Document

@dynamic hasApplicationInfo, applicationInfo;
@dynamic hasUuid, uuid;
@dynamic usesRelativeUrls;
@dynamic hasWorkspace, workspace;

typedef struct Document__storage_ {
  uint32_t _has_storage_[1];
  ApplicationInfo *applicationInfo;
  UUID *uuid;
  Workspace *workspace;
} Document__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applicationInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ApplicationInfo),
        .number = Document_FieldNumber_ApplicationInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Document__storage_, applicationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Document_FieldNumber_Uuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Document__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "usesRelativeUrls",
        .dataTypeSpecific.clazz = Nil,
        .number = Document_FieldNumber_UsesRelativeUrls,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "workspace",
        .dataTypeSpecific.clazz = GPBObjCClass(Workspace),
        .number = Document_FieldNumber_Workspace,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Document__storage_, workspace),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Document class]
                                     rootClass:[BaseDocumentRoot class]
                                          file:BaseDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Document__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CacheInfo

@implementation CacheInfo

@dynamic hasUuid, uuid;
@dynamic hasApplicationVersion, applicationVersion;
@dynamic hasURL, URL;
@dynamic lastModifiedDate;

typedef struct CacheInfo__storage_ {
  uint32_t _has_storage_[1];
  UUID *uuid;
  Version *applicationVersion;
  URL *URL;
  double lastModifiedDate;
} CacheInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = CacheInfo_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CacheInfo__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "applicationVersion",
        .dataTypeSpecific.clazz = GPBObjCClass(Version),
        .number = CacheInfo_FieldNumber_ApplicationVersion,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CacheInfo__storage_, applicationVersion),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = CacheInfo_FieldNumber_URL,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CacheInfo__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lastModifiedDate",
        .dataTypeSpecific.clazz = Nil,
        .number = CacheInfo_FieldNumber_LastModifiedDate,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CacheInfo__storage_, lastModifiedDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CacheInfo class]
                                     rootClass:[BaseDocumentRoot class]
                                          file:BaseDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CacheInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PVPDocumentState

@implementation PVPDocumentState

@dynamic hasPrimaryPlaylist, primaryPlaylist;
@dynamic hasAlternatePlaylist, alternatePlaylist;
@dynamic playlistSplitIsVertical;
@dynamic hasTargetedLayer, targetedLayer;
@dynamic hasSelectedLayer, selectedLayer;
@dynamic hasLockedLayer, lockedLayer;
@dynamic liveVideoPlaylistScale;
@dynamic splitViewDividerPosition;

typedef struct PVPDocumentState__storage_ {
  uint32_t _has_storage_[1];
  PVPDocumentState_PlaylistState *primaryPlaylist;
  PVPDocumentState_PlaylistState *alternatePlaylist;
  UUID *targetedLayer;
  UUID *selectedLayer;
  UUID *lockedLayer;
  double liveVideoPlaylistScale;
  double splitViewDividerPosition;
} PVPDocumentState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "primaryPlaylist",
        .dataTypeSpecific.clazz = GPBObjCClass(PVPDocumentState_PlaylistState),
        .number = PVPDocumentState_FieldNumber_PrimaryPlaylist,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PVPDocumentState__storage_, primaryPlaylist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "alternatePlaylist",
        .dataTypeSpecific.clazz = GPBObjCClass(PVPDocumentState_PlaylistState),
        .number = PVPDocumentState_FieldNumber_AlternatePlaylist,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PVPDocumentState__storage_, alternatePlaylist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playlistSplitIsVertical",
        .dataTypeSpecific.clazz = Nil,
        .number = PVPDocumentState_FieldNumber_PlaylistSplitIsVertical,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "targetedLayer",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = PVPDocumentState_FieldNumber_TargetedLayer,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PVPDocumentState__storage_, targetedLayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "selectedLayer",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = PVPDocumentState_FieldNumber_SelectedLayer,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(PVPDocumentState__storage_, selectedLayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "lockedLayer",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = PVPDocumentState_FieldNumber_LockedLayer,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(PVPDocumentState__storage_, lockedLayer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveVideoPlaylistScale",
        .dataTypeSpecific.clazz = Nil,
        .number = PVPDocumentState_FieldNumber_LiveVideoPlaylistScale,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(PVPDocumentState__storage_, liveVideoPlaylistScale),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "splitViewDividerPosition",
        .dataTypeSpecific.clazz = Nil,
        .number = PVPDocumentState_FieldNumber_SplitViewDividerPosition,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(PVPDocumentState__storage_, splitViewDividerPosition),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PVPDocumentState class]
                                     rootClass:[BaseDocumentRoot class]
                                          file:BaseDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PVPDocumentState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PVPDocumentState_PlaylistState

@implementation PVPDocumentState_PlaylistState

@dynamic hasUuid, uuid;
@dynamic layout;
@dynamic itemScale;

typedef struct PVPDocumentState_PlaylistState__storage_ {
  uint32_t _has_storage_[1];
  PVPDocumentState_PlaylistState_LayoutType layout;
  UUID *uuid;
  double itemScale;
} PVPDocumentState_PlaylistState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = PVPDocumentState_PlaylistState_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PVPDocumentState_PlaylistState__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "layout",
        .dataTypeSpecific.enumDescFunc = PVPDocumentState_PlaylistState_LayoutType_EnumDescriptor,
        .number = PVPDocumentState_PlaylistState_FieldNumber_Layout,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PVPDocumentState_PlaylistState__storage_, layout),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "itemScale",
        .dataTypeSpecific.clazz = Nil,
        .number = PVPDocumentState_PlaylistState_FieldNumber_ItemScale,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PVPDocumentState_PlaylistState__storage_, itemScale),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PVPDocumentState_PlaylistState class]
                                     rootClass:[BaseDocumentRoot class]
                                          file:BaseDocumentRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PVPDocumentState_PlaylistState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(PVPDocumentState)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PVPDocumentState_PlaylistState_Layout_RawValue(PVPDocumentState_PlaylistState *message) {
  GPBDescriptor *descriptor = [PVPDocumentState_PlaylistState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PVPDocumentState_PlaylistState_FieldNumber_Layout];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPVPDocumentState_PlaylistState_Layout_RawValue(PVPDocumentState_PlaylistState *message, int32_t value) {
  GPBDescriptor *descriptor = [PVPDocumentState_PlaylistState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PVPDocumentState_PlaylistState_FieldNumber_Layout];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum PVPDocumentState_PlaylistState_LayoutType

GPBEnumDescriptor *PVPDocumentState_PlaylistState_LayoutType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "LayoutTypeCue\000LayoutTypeAction\000LayoutTyp"
        "eLiveVideo\000";
    static const int32_t values[] = {
        PVPDocumentState_PlaylistState_LayoutType_LayoutTypeCue,
        PVPDocumentState_PlaylistState_LayoutType_LayoutTypeAction,
        PVPDocumentState_PlaylistState_LayoutType_LayoutTypeLiveVideo,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PVPDocumentState_PlaylistState_LayoutType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PVPDocumentState_PlaylistState_LayoutType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PVPDocumentState_PlaylistState_LayoutType_IsValidValue(int32_t value__) {
  switch (value__) {
    case PVPDocumentState_PlaylistState_LayoutType_LayoutTypeCue:
    case PVPDocumentState_PlaylistState_LayoutType_LayoutTypeAction:
    case PVPDocumentState_PlaylistState_LayoutType_LayoutTypeLiveVideo:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
