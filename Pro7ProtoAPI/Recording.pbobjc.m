// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recording.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Recording.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "DigitalAudio.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DigitalAudio_Device_Map);
GPBObjCClassDeclaration(Recording);
GPBObjCClassDeclaration(Recording_Stream);
GPBObjCClassDeclaration(Recording_Stream_Destination);
GPBObjCClassDeclaration(Recording_Stream_Destination_Resi);
GPBObjCClassDeclaration(Recording_Stream_DiskDestination);
GPBObjCClassDeclaration(Recording_Stream_Encoder);
GPBObjCClassDeclaration(Recording_Stream_OutputScreenSource);
GPBObjCClassDeclaration(Recording_Stream_RTMPDestination);
GPBObjCClassDeclaration(URL);
GPBObjCClassDeclaration(UUID);

#pragma mark - RecordingRoot

@implementation RecordingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - RecordingRoot_FileDescriptor

static GPBFileDescriptor *RecordingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Recording

@implementation Recording


typedef struct Recording__storage_ {
  uint32_t _has_storage_[1];
} Recording__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Recording__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Recording_SettingsDocument

@implementation Recording_SettingsDocument

@dynamic streamsArray, streamsArray_Count;

typedef struct Recording_SettingsDocument__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *streamsArray;
} Recording_SettingsDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "streamsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Recording_Stream),
        .number = Recording_SettingsDocument_FieldNumber_StreamsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Recording_SettingsDocument__storage_, streamsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_SettingsDocument class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_SettingsDocument__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Recording_Stream

@implementation Recording_Stream

@dynamic sourceOneOfCase;
@dynamic hasId_p, id_p;
@dynamic hasEncoder, encoder;
@dynamic destinationsArray, destinationsArray_Count;
@dynamic audioMapArray, audioMapArray_Count;
@dynamic isAudioCustomMapped;
@dynamic outputScreen;

typedef struct Recording_Stream__storage_ {
  uint32_t _has_storage_[2];
  UUID *id_p;
  Recording_Stream_OutputScreenSource *outputScreen;
  Recording_Stream_Encoder *encoder;
  NSMutableArray *destinationsArray;
  NSMutableArray *audioMapArray;
} Recording_Stream__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Recording_Stream_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Recording_Stream__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputScreen",
        .dataTypeSpecific.clazz = GPBObjCClass(Recording_Stream_OutputScreenSource),
        .number = Recording_Stream_FieldNumber_OutputScreen,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Recording_Stream__storage_, outputScreen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encoder",
        .dataTypeSpecific.clazz = GPBObjCClass(Recording_Stream_Encoder),
        .number = Recording_Stream_FieldNumber_Encoder,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Recording_Stream__storage_, encoder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "destinationsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Recording_Stream_Destination),
        .number = Recording_Stream_FieldNumber_DestinationsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Recording_Stream__storage_, destinationsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioMapArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device_Map),
        .number = Recording_Stream_FieldNumber_AudioMapArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Recording_Stream__storage_, audioMapArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isAudioCustomMapped",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_FieldNumber_IsAudioCustomMapped,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_Stream class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_Stream__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\023\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Recording_Stream_ClearSourceOneOfCase(Recording_Stream *message) {
  GPBDescriptor *descriptor = [Recording_Stream descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Recording_Stream_Encoder

@implementation Recording_Stream_Encoder

@dynamic codec;
@dynamic videoWidth;
@dynamic videoHeight;
@dynamic isInterlaced;
@dynamic frameRate;
@dynamic videoBitrate;

typedef struct Recording_Stream_Encoder__storage_ {
  uint32_t _has_storage_[1];
  Recording_Stream_Encoder_Codec codec;
  uint32_t videoWidth;
  uint32_t videoHeight;
  Recording_Stream_Encoder_FrameRate frameRate;
  uint32_t videoBitrate;
} Recording_Stream_Encoder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "codec",
        .dataTypeSpecific.enumDescFunc = Recording_Stream_Encoder_Codec_EnumDescriptor,
        .number = Recording_Stream_Encoder_FieldNumber_Codec,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Recording_Stream_Encoder__storage_, codec),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "videoWidth",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_Encoder_FieldNumber_VideoWidth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Recording_Stream_Encoder__storage_, videoWidth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "videoHeight",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_Encoder_FieldNumber_VideoHeight,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Recording_Stream_Encoder__storage_, videoHeight),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "isInterlaced",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_Encoder_FieldNumber_IsInterlaced,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "frameRate",
        .dataTypeSpecific.enumDescFunc = Recording_Stream_Encoder_FrameRate_EnumDescriptor,
        .number = Recording_Stream_Encoder_FieldNumber_FrameRate,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Recording_Stream_Encoder__storage_, frameRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "videoBitrate",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_Encoder_FieldNumber_VideoBitrate,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Recording_Stream_Encoder__storage_, videoBitrate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_Stream_Encoder class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_Stream_Encoder__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\005\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording_Stream)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Recording_Stream_Encoder_Codec_RawValue(Recording_Stream_Encoder *message) {
  GPBDescriptor *descriptor = [Recording_Stream_Encoder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Recording_Stream_Encoder_FieldNumber_Codec];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRecording_Stream_Encoder_Codec_RawValue(Recording_Stream_Encoder *message, int32_t value) {
  GPBDescriptor *descriptor = [Recording_Stream_Encoder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Recording_Stream_Encoder_FieldNumber_Codec];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Recording_Stream_Encoder_FrameRate_RawValue(Recording_Stream_Encoder *message) {
  GPBDescriptor *descriptor = [Recording_Stream_Encoder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Recording_Stream_Encoder_FieldNumber_FrameRate];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRecording_Stream_Encoder_FrameRate_RawValue(Recording_Stream_Encoder *message, int32_t value) {
  GPBDescriptor *descriptor = [Recording_Stream_Encoder descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Recording_Stream_Encoder_FieldNumber_FrameRate];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Recording_Stream_Encoder_Codec

GPBEnumDescriptor *Recording_Stream_Encoder_Codec_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CodecAutomatic\000CodecH264\000CodecH265\000Codec"
        "Prores422Proxy\000CodecProres422Lt\000CodecPro"
        "res422\000CodecProres422Hq\000CodecProres4444\000"
        "CodecProres4444Xq\000CodecHap\000CodecHapAlpha"
        "\000CodecHapQ\000CodecHapQAlpha\000CodecNotch\000Cod"
        "ecH264Software\000CodecH265Software\000";
    static const int32_t values[] = {
        Recording_Stream_Encoder_Codec_CodecAutomatic,
        Recording_Stream_Encoder_Codec_CodecH264,
        Recording_Stream_Encoder_Codec_CodecH265,
        Recording_Stream_Encoder_Codec_CodecProres422Proxy,
        Recording_Stream_Encoder_Codec_CodecProres422Lt,
        Recording_Stream_Encoder_Codec_CodecProres422,
        Recording_Stream_Encoder_Codec_CodecProres422Hq,
        Recording_Stream_Encoder_Codec_CodecProres4444,
        Recording_Stream_Encoder_Codec_CodecProres4444Xq,
        Recording_Stream_Encoder_Codec_CodecHap,
        Recording_Stream_Encoder_Codec_CodecHapAlpha,
        Recording_Stream_Encoder_Codec_CodecHapQ,
        Recording_Stream_Encoder_Codec_CodecHapQAlpha,
        Recording_Stream_Encoder_Codec_CodecNotch,
        Recording_Stream_Encoder_Codec_CodecH264Software,
        Recording_Stream_Encoder_Codec_CodecH265Software,
    };
    static const char *extraTextFormatInfo = "\006\003e\346\203\345\000\004e\346\203\342\000\005e\346\203\000\006e\346\203\342\000\007e\346\204\000\010e\346\204\342\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Recording_Stream_Encoder_Codec)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Recording_Stream_Encoder_Codec_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Recording_Stream_Encoder_Codec_IsValidValue(int32_t value__) {
  switch (value__) {
    case Recording_Stream_Encoder_Codec_CodecAutomatic:
    case Recording_Stream_Encoder_Codec_CodecH264:
    case Recording_Stream_Encoder_Codec_CodecH265:
    case Recording_Stream_Encoder_Codec_CodecProres422Proxy:
    case Recording_Stream_Encoder_Codec_CodecProres422Lt:
    case Recording_Stream_Encoder_Codec_CodecProres422:
    case Recording_Stream_Encoder_Codec_CodecProres422Hq:
    case Recording_Stream_Encoder_Codec_CodecProres4444:
    case Recording_Stream_Encoder_Codec_CodecProres4444Xq:
    case Recording_Stream_Encoder_Codec_CodecHap:
    case Recording_Stream_Encoder_Codec_CodecHapAlpha:
    case Recording_Stream_Encoder_Codec_CodecHapQ:
    case Recording_Stream_Encoder_Codec_CodecHapQAlpha:
    case Recording_Stream_Encoder_Codec_CodecNotch:
    case Recording_Stream_Encoder_Codec_CodecH264Software:
    case Recording_Stream_Encoder_Codec_CodecH265Software:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Recording_Stream_Encoder_FrameRate

GPBEnumDescriptor *Recording_Stream_Encoder_FrameRate_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FrameRateUnknown\000FrameRate24\000FrameRate25"
        "\000FrameRate2997\000FrameRate30\000FrameRate50\000F"
        "rameRate5994\000FrameRate60\000";
    static const int32_t values[] = {
        Recording_Stream_Encoder_FrameRate_FrameRateUnknown,
        Recording_Stream_Encoder_FrameRate_FrameRate24,
        Recording_Stream_Encoder_FrameRate_FrameRate25,
        Recording_Stream_Encoder_FrameRate_FrameRate2997,
        Recording_Stream_Encoder_FrameRate_FrameRate30,
        Recording_Stream_Encoder_FrameRate_FrameRate50,
        Recording_Stream_Encoder_FrameRate_FrameRate5994,
        Recording_Stream_Encoder_FrameRate_FrameRate60,
    };
    static const char *extraTextFormatInfo = "\007\001e\344\202\000\002e\344\202\000\003e\344\202\202\000\004e\344\202\000\005e\344\202\000\006e\344\202\202\000\007e\344\202\000";
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Recording_Stream_Encoder_FrameRate)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Recording_Stream_Encoder_FrameRate_IsValidValue
                              extraTextFormatInfo:extraTextFormatInfo];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Recording_Stream_Encoder_FrameRate_IsValidValue(int32_t value__) {
  switch (value__) {
    case Recording_Stream_Encoder_FrameRate_FrameRateUnknown:
    case Recording_Stream_Encoder_FrameRate_FrameRate24:
    case Recording_Stream_Encoder_FrameRate_FrameRate25:
    case Recording_Stream_Encoder_FrameRate_FrameRate2997:
    case Recording_Stream_Encoder_FrameRate_FrameRate30:
    case Recording_Stream_Encoder_FrameRate_FrameRate50:
    case Recording_Stream_Encoder_FrameRate_FrameRate5994:
    case Recording_Stream_Encoder_FrameRate_FrameRate60:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Recording_Stream_OutputScreenSource

@implementation Recording_Stream_OutputScreenSource

@dynamic hasScreenId, screenId;
@dynamic screenName;

typedef struct Recording_Stream_OutputScreenSource__storage_ {
  uint32_t _has_storage_[1];
  UUID *screenId;
  NSString *screenName;
} Recording_Stream_OutputScreenSource__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "screenId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Recording_Stream_OutputScreenSource_FieldNumber_ScreenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Recording_Stream_OutputScreenSource__storage_, screenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "screenName",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_OutputScreenSource_FieldNumber_ScreenName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Recording_Stream_OutputScreenSource__storage_, screenName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_Stream_OutputScreenSource class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_Stream_OutputScreenSource__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording_Stream)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Recording_Stream_DiskDestination

@implementation Recording_Stream_DiskDestination

@dynamic hasLocation, location;
@dynamic container;

typedef struct Recording_Stream_DiskDestination__storage_ {
  uint32_t _has_storage_[1];
  Recording_Stream_DiskDestination_Container container;
  URL *location;
} Recording_Stream_DiskDestination__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "location",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = Recording_Stream_DiskDestination_FieldNumber_Location,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Recording_Stream_DiskDestination__storage_, location),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "container",
        .dataTypeSpecific.enumDescFunc = Recording_Stream_DiskDestination_Container_EnumDescriptor,
        .number = Recording_Stream_DiskDestination_FieldNumber_Container,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Recording_Stream_DiskDestination__storage_, container),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_Stream_DiskDestination class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_Stream_DiskDestination__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording_Stream)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Recording_Stream_DiskDestination_Container_RawValue(Recording_Stream_DiskDestination *message) {
  GPBDescriptor *descriptor = [Recording_Stream_DiskDestination descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Recording_Stream_DiskDestination_FieldNumber_Container];
  return GPBGetMessageRawEnumField(message, field);
}

void SetRecording_Stream_DiskDestination_Container_RawValue(Recording_Stream_DiskDestination *message, int32_t value) {
  GPBDescriptor *descriptor = [Recording_Stream_DiskDestination descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Recording_Stream_DiskDestination_FieldNumber_Container];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Recording_Stream_DiskDestination_Container

GPBEnumDescriptor *Recording_Stream_DiskDestination_Container_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ContainerUnknown\000ContainerMov\000ContainerM"
        "p4\000";
    static const int32_t values[] = {
        Recording_Stream_DiskDestination_Container_ContainerUnknown,
        Recording_Stream_DiskDestination_Container_ContainerMov,
        Recording_Stream_DiskDestination_Container_ContainerMp4,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Recording_Stream_DiskDestination_Container)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Recording_Stream_DiskDestination_Container_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Recording_Stream_DiskDestination_Container_IsValidValue(int32_t value__) {
  switch (value__) {
    case Recording_Stream_DiskDestination_Container_ContainerUnknown:
    case Recording_Stream_DiskDestination_Container_ContainerMov:
    case Recording_Stream_DiskDestination_Container_ContainerMp4:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Recording_Stream_RTMPDestination

@implementation Recording_Stream_RTMPDestination

@dynamic address;
@dynamic key;

typedef struct Recording_Stream_RTMPDestination__storage_ {
  uint32_t _has_storage_[1];
  NSString *address;
  NSString *key;
} Recording_Stream_RTMPDestination__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "address",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_RTMPDestination_FieldNumber_Address,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Recording_Stream_RTMPDestination__storage_, address),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = Recording_Stream_RTMPDestination_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Recording_Stream_RTMPDestination__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_Stream_RTMPDestination class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_Stream_RTMPDestination__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording_Stream)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Recording_Stream_Destination

@implementation Recording_Stream_Destination

@dynamic destinationOneOfCase;
@dynamic disk;
@dynamic rtmp;
@dynamic resi;

typedef struct Recording_Stream_Destination__storage_ {
  uint32_t _has_storage_[2];
  Recording_Stream_DiskDestination *disk;
  Recording_Stream_RTMPDestination *rtmp;
  Recording_Stream_Destination_Resi *resi;
} Recording_Stream_Destination__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "disk",
        .dataTypeSpecific.clazz = GPBObjCClass(Recording_Stream_DiskDestination),
        .number = Recording_Stream_Destination_FieldNumber_Disk,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Recording_Stream_Destination__storage_, disk),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "rtmp",
        .dataTypeSpecific.clazz = GPBObjCClass(Recording_Stream_RTMPDestination),
        .number = Recording_Stream_Destination_FieldNumber_Rtmp,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Recording_Stream_Destination__storage_, rtmp),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "resi",
        .dataTypeSpecific.clazz = GPBObjCClass(Recording_Stream_Destination_Resi),
        .number = Recording_Stream_Destination_FieldNumber_Resi,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Recording_Stream_Destination__storage_, resi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_Stream_Destination class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_Stream_Destination__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "destination",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording_Stream)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Recording_Stream_Destination_ClearDestinationOneOfCase(Recording_Stream_Destination *message) {
  GPBDescriptor *descriptor = [Recording_Stream_Destination descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Recording_Stream_Destination_Resi

@implementation Recording_Stream_Destination_Resi

@dynamic hasDestinationGroupId, destinationGroupId;
@dynamic hasEncoderProfileId, encoderProfileId;

typedef struct Recording_Stream_Destination_Resi__storage_ {
  uint32_t _has_storage_[1];
  UUID *destinationGroupId;
  UUID *encoderProfileId;
} Recording_Stream_Destination_Resi__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "destinationGroupId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Recording_Stream_Destination_Resi_FieldNumber_DestinationGroupId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Recording_Stream_Destination_Resi__storage_, destinationGroupId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "encoderProfileId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Recording_Stream_Destination_Resi_FieldNumber_EncoderProfileId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Recording_Stream_Destination_Resi__storage_, encoderProfileId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Recording_Stream_Destination_Resi class]
                                     rootClass:[RecordingRoot class]
                                          file:RecordingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Recording_Stream_Destination_Resi__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Recording_Stream_Destination)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
