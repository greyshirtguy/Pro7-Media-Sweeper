// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: digitalAudio.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "DigitalAudio.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DigitalAudio);
GPBObjCClassDeclaration(DigitalAudio_Bus);
GPBObjCClassDeclaration(DigitalAudio_Device);
GPBObjCClassDeclaration(DigitalAudio_Device_Channel);
GPBObjCClassDeclaration(DigitalAudio_Device_Format);
GPBObjCClassDeclaration(DigitalAudio_Device_Map);
GPBObjCClassDeclaration(DigitalAudio_Device_Routing);

#pragma mark - DigitalAudioRoot

@implementation DigitalAudioRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DigitalAudioRoot_FileDescriptor

static GPBFileDescriptor *DigitalAudioRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DigitalAudio

@implementation DigitalAudio


typedef struct DigitalAudio__storage_ {
  uint32_t _has_storage_[1];
} DigitalAudio__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(DigitalAudio__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DigitalAudio_Setup

@implementation DigitalAudio_Setup

@dynamic busesArray, busesArray_Count;
@dynamic hasMonitorDevice, monitorDevice;
@dynamic hasMainOutputDevice, mainOutputDevice;
@dynamic enableSdiNdiDevice;
@dynamic hasSdiNdiDevice, sdiNdiDevice;
@dynamic monitorOnMains;
@dynamic disableMainOutputDevice;

typedef struct DigitalAudio_Setup__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *busesArray;
  DigitalAudio_Device *monitorDevice;
  DigitalAudio_Device *mainOutputDevice;
  DigitalAudio_Device *sdiNdiDevice;
} DigitalAudio_Setup__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "busesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Bus),
        .number = DigitalAudio_Setup_FieldNumber_BusesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DigitalAudio_Setup__storage_, busesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "monitorDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device),
        .number = DigitalAudio_Setup_FieldNumber_MonitorDevice,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DigitalAudio_Setup__storage_, monitorDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mainOutputDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device),
        .number = DigitalAudio_Setup_FieldNumber_MainOutputDevice,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DigitalAudio_Setup__storage_, mainOutputDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enableSdiNdiDevice",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Setup_FieldNumber_EnableSdiNdiDevice,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "sdiNdiDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device),
        .number = DigitalAudio_Setup_FieldNumber_SdiNdiDevice,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(DigitalAudio_Setup__storage_, sdiNdiDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "monitorOnMains",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Setup_FieldNumber_MonitorOnMains,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "disableMainOutputDevice",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Setup_FieldNumber_DisableMainOutputDevice,
        .hasIndex = 7,
        .offset = 8,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio_Setup class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DigitalAudio_Setup__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DigitalAudio)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DigitalAudio_Bus

@implementation DigitalAudio_Bus

@dynamic name;
@dynamic muted;
@dynamic solo;
@dynamic testTone;
@dynamic masterLevel;

typedef struct DigitalAudio_Bus__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  double masterLevel;
} DigitalAudio_Bus__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Bus_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DigitalAudio_Bus__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "muted",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Bus_FieldNumber_Muted,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "solo",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Bus_FieldNumber_Solo,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "testTone",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Bus_FieldNumber_TestTone,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "masterLevel",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Bus_FieldNumber_MasterLevel,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DigitalAudio_Bus__storage_, masterLevel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio_Bus class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DigitalAudio_Bus__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DigitalAudio)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DigitalAudio_Device

@implementation DigitalAudio_Device

@dynamic name;
@dynamic renderId;
@dynamic formatsArray, formatsArray_Count;
@dynamic hasRouting, routing;

typedef struct DigitalAudio_Device__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  NSString *renderId;
  NSMutableArray *formatsArray;
  DigitalAudio_Device_Routing *routing;
} DigitalAudio_Device__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DigitalAudio_Device__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "renderId",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_FieldNumber_RenderId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DigitalAudio_Device__storage_, renderId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "formatsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device_Format),
        .number = DigitalAudio_Device_FieldNumber_FormatsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DigitalAudio_Device__storage_, formatsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "routing",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device_Routing),
        .number = DigitalAudio_Device_FieldNumber_Routing,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DigitalAudio_Device__storage_, routing),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio_Device class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DigitalAudio_Device__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\002\007A\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DigitalAudio)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DigitalAudio_Device_Format

@implementation DigitalAudio_Device_Format

@dynamic sampleRate;
@dynamic bitDepth;
@dynamic type;

typedef struct DigitalAudio_Device_Format__storage_ {
  uint32_t _has_storage_[1];
  uint32_t sampleRate;
  uint32_t bitDepth;
  DigitalAudio_Device_Format_Type type;
} DigitalAudio_Device_Format__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "sampleRate",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Format_FieldNumber_SampleRate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Format__storage_, sampleRate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "bitDepth",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Format_FieldNumber_BitDepth,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Format__storage_, bitDepth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = DigitalAudio_Device_Format_Type_EnumDescriptor,
        .number = DigitalAudio_Device_Format_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Format__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio_Device_Format class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DigitalAudio_Device_Format__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DigitalAudio_Device)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DigitalAudio_Device_Format_Type_RawValue(DigitalAudio_Device_Format *message) {
  GPBDescriptor *descriptor = [DigitalAudio_Device_Format descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DigitalAudio_Device_Format_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetDigitalAudio_Device_Format_Type_RawValue(DigitalAudio_Device_Format *message, int32_t value) {
  GPBDescriptor *descriptor = [DigitalAudio_Device_Format descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DigitalAudio_Device_Format_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum DigitalAudio_Device_Format_Type

GPBEnumDescriptor *DigitalAudio_Device_Format_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeInt\000TypeFloat\000";
    static const int32_t values[] = {
        DigitalAudio_Device_Format_Type_TypeInt,
        DigitalAudio_Device_Format_Type_TypeFloat,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DigitalAudio_Device_Format_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DigitalAudio_Device_Format_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DigitalAudio_Device_Format_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case DigitalAudio_Device_Format_Type_TypeInt:
    case DigitalAudio_Device_Format_Type_TypeFloat:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DigitalAudio_Device_Map

@implementation DigitalAudio_Device_Map

@dynamic channelIndex;
@dynamic mappedIndicesArray, mappedIndicesArray_Count;

typedef struct DigitalAudio_Device_Map__storage_ {
  uint32_t _has_storage_[1];
  uint32_t channelIndex;
  GPBUInt32Array *mappedIndicesArray;
} DigitalAudio_Device_Map__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Map_FieldNumber_ChannelIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Map__storage_, channelIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "mappedIndicesArray",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Map_FieldNumber_MappedIndicesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Map__storage_, mappedIndicesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio_Device_Map class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DigitalAudio_Device_Map__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DigitalAudio_Device)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DigitalAudio_Device_Channel

@implementation DigitalAudio_Device_Channel

@dynamic muteEnable;
@dynamic soloEnable;
@dynamic toneEnable;
@dynamic audioDelay;
@dynamic level;

typedef struct DigitalAudio_Device_Channel__storage_ {
  uint32_t _has_storage_[1];
  double audioDelay;
  double level;
} DigitalAudio_Device_Channel__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "muteEnable",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Channel_FieldNumber_MuteEnable,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "soloEnable",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Channel_FieldNumber_SoloEnable,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "toneEnable",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Channel_FieldNumber_ToneEnable,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "audioDelay",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Channel_FieldNumber_AudioDelay,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Channel__storage_, audioDelay),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "level",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Channel_FieldNumber_Level,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Channel__storage_, level),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio_Device_Channel class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DigitalAudio_Device_Channel__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DigitalAudio_Device)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DigitalAudio_Device_Routing

@implementation DigitalAudio_Device_Routing

@dynamic channelsArray, channelsArray_Count;
@dynamic mapArray, mapArray_Count;
@dynamic isCustomMap;
@dynamic hasMasterChannel, masterChannel;

typedef struct DigitalAudio_Device_Routing__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelsArray;
  NSMutableArray *mapArray;
  DigitalAudio_Device_Channel *masterChannel;
} DigitalAudio_Device_Routing__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device_Channel),
        .number = DigitalAudio_Device_Routing_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Routing__storage_, channelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mapArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device_Map),
        .number = DigitalAudio_Device_Routing_FieldNumber_MapArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Routing__storage_, mapArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isCustomMap",
        .dataTypeSpecific.clazz = Nil,
        .number = DigitalAudio_Device_Routing_FieldNumber_IsCustomMap,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "masterChannel",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device_Channel),
        .number = DigitalAudio_Device_Routing_FieldNumber_MasterChannel,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(DigitalAudio_Device_Routing__storage_, masterChannel),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DigitalAudio_Device_Routing class]
                                     rootClass:[DigitalAudioRoot class]
                                          file:DigitalAudioRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DigitalAudio_Device_Routing__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DigitalAudio_Device)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
