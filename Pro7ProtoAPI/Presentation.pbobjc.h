// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presentation.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Action;
@class ApplicationInfo;
@class Background;
@class Cue;
@class Group;
@class IntRange;
@class MusicKeyScale;
@class Presentation_Arrangement;
@class Presentation_BibleReference;
@class Presentation_CCLI;
@class Presentation_CueGroup;
@class Presentation_MultiTracksLicensing;
@class Presentation_Music;
@class Presentation_SocialMedia;
@class Presentation_Timeline;
@class Presentation_Timeline_Cue;
@class Timestamp;
@class Transition;
@class URL;
@class UUID;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Presentation_ContentDestination

typedef GPB_ENUM(Presentation_ContentDestination) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Presentation_ContentDestination_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Presentation_ContentDestination_ContentDestinationGlobal = 0,
  Presentation_ContentDestination_ContentDestinationAnnouncements = 1,
};

GPBEnumDescriptor *Presentation_ContentDestination_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Presentation_ContentDestination_IsValidValue(int32_t value);

#pragma mark - Enum Presentation_MultiTracksLicensing_Subscription

typedef GPB_ENUM(Presentation_MultiTracksLicensing_Subscription) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Presentation_MultiTracksLicensing_Subscription_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Presentation_MultiTracksLicensing_Subscription_SubscriptionChartPro = 0,
  Presentation_MultiTracksLicensing_Subscription_SubscriptionSlidePro = 1,
};

GPBEnumDescriptor *Presentation_MultiTracksLicensing_Subscription_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Presentation_MultiTracksLicensing_Subscription_IsValidValue(int32_t value);

#pragma mark - PresentationRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface PresentationRoot : GPBRootObject
@end

#pragma mark - Presentation

typedef GPB_ENUM(Presentation_FieldNumber) {
  Presentation_FieldNumber_ApplicationInfo = 1,
  Presentation_FieldNumber_Uuid = 2,
  Presentation_FieldNumber_Name = 3,
  Presentation_FieldNumber_LastDateUsed = 4,
  Presentation_FieldNumber_LastModifiedDate = 5,
  Presentation_FieldNumber_Category = 6,
  Presentation_FieldNumber_Notes = 7,
  Presentation_FieldNumber_Background = 8,
  Presentation_FieldNumber_ChordChart = 9,
  Presentation_FieldNumber_SelectedArrangement = 10,
  Presentation_FieldNumber_ArrangementsArray = 11,
  Presentation_FieldNumber_CueGroupsArray = 12,
  Presentation_FieldNumber_CuesArray = 13,
  Presentation_FieldNumber_Ccli = 14,
  Presentation_FieldNumber_BibleReference = 15,
  Presentation_FieldNumber_SocialMedia = 16,
  Presentation_FieldNumber_Timeline = 17,
  Presentation_FieldNumber_Transition = 18,
  Presentation_FieldNumber_ContentDestination = 19,
  Presentation_FieldNumber_SlideShowDuration = 20,
  Presentation_FieldNumber_MultiTracksLicensing = 21,
  Presentation_FieldNumber_MusicKey = 22,
  Presentation_FieldNumber_Music = 23,
};

typedef GPB_ENUM(Presentation_SlideShow_OneOfCase) {
  Presentation_SlideShow_OneOfCase_GPBUnsetOneOfCase = 0,
  Presentation_SlideShow_OneOfCase_SlideShowDuration = 20,
};

GPB_FINAL @interface Presentation : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) ApplicationInfo *applicationInfo;
/** Test to see if @c applicationInfo has been set. */
@property(nonatomic, readwrite) BOOL hasApplicationInfo;

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) Timestamp *lastDateUsed;
/** Test to see if @c lastDateUsed has been set. */
@property(nonatomic, readwrite) BOOL hasLastDateUsed;

@property(nonatomic, readwrite, strong, null_resettable) Timestamp *lastModifiedDate;
/** Test to see if @c lastModifiedDate has been set. */
@property(nonatomic, readwrite) BOOL hasLastModifiedDate;

@property(nonatomic, readwrite, copy, null_resettable) NSString *category;

@property(nonatomic, readwrite, copy, null_resettable) NSString *notes;

@property(nonatomic, readwrite, strong, null_resettable) Background *background;
/** Test to see if @c background has been set. */
@property(nonatomic, readwrite) BOOL hasBackground;

@property(nonatomic, readwrite, strong, null_resettable) URL *chordChart;
/** Test to see if @c chordChart has been set. */
@property(nonatomic, readwrite) BOOL hasChordChart;

@property(nonatomic, readwrite, strong, null_resettable) UUID *selectedArrangement;
/** Test to see if @c selectedArrangement has been set. */
@property(nonatomic, readwrite) BOOL hasSelectedArrangement;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Presentation_Arrangement*> *arrangementsArray;
/** The number of items in @c arrangementsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger arrangementsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Presentation_CueGroup*> *cueGroupsArray;
/** The number of items in @c cueGroupsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cueGroupsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Cue*> *cuesArray;
/** The number of items in @c cuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cuesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) Presentation_CCLI *ccli;
/** Test to see if @c ccli has been set. */
@property(nonatomic, readwrite) BOOL hasCcli;

@property(nonatomic, readwrite, strong, null_resettable) Presentation_BibleReference *bibleReference;
/** Test to see if @c bibleReference has been set. */
@property(nonatomic, readwrite) BOOL hasBibleReference;

@property(nonatomic, readwrite, strong, null_resettable) Presentation_SocialMedia *socialMedia;
/** Test to see if @c socialMedia has been set. */
@property(nonatomic, readwrite) BOOL hasSocialMedia;

@property(nonatomic, readwrite, strong, null_resettable) Presentation_Timeline *timeline;
/** Test to see if @c timeline has been set. */
@property(nonatomic, readwrite) BOOL hasTimeline;

@property(nonatomic, readwrite, strong, null_resettable) Transition *transition;
/** Test to see if @c transition has been set. */
@property(nonatomic, readwrite) BOOL hasTransition;

@property(nonatomic, readwrite) Presentation_ContentDestination contentDestination;

@property(nonatomic, readwrite, strong, null_resettable) Presentation_MultiTracksLicensing *multiTracksLicensing;
/** Test to see if @c multiTracksLicensing has been set. */
@property(nonatomic, readwrite) BOOL hasMultiTracksLicensing;

@property(nonatomic, readwrite, copy, null_resettable) NSString *musicKey;

@property(nonatomic, readwrite, strong, null_resettable) Presentation_Music *music;
/** Test to see if @c music has been set. */
@property(nonatomic, readwrite) BOOL hasMusic;

@property(nonatomic, readonly) Presentation_SlideShow_OneOfCase slideShowOneOfCase;

@property(nonatomic, readwrite) double slideShowDuration;

@end

/**
 * Fetches the raw value of a @c Presentation's @c contentDestination property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Presentation_ContentDestination_RawValue(Presentation *message);
/**
 * Sets the raw value of an @c Presentation's @c contentDestination property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPresentation_ContentDestination_RawValue(Presentation *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'slideShow'.
 **/
void Presentation_ClearSlideShowOneOfCase(Presentation *message);

#pragma mark - Presentation_CCLI

typedef GPB_ENUM(Presentation_CCLI_FieldNumber) {
  Presentation_CCLI_FieldNumber_Author = 1,
  Presentation_CCLI_FieldNumber_ArtistCredits = 2,
  Presentation_CCLI_FieldNumber_SongTitle = 3,
  Presentation_CCLI_FieldNumber_Publisher = 4,
  Presentation_CCLI_FieldNumber_CopyrightYear = 5,
  Presentation_CCLI_FieldNumber_SongNumber = 6,
  Presentation_CCLI_FieldNumber_Display = 7,
  Presentation_CCLI_FieldNumber_Album = 8,
  Presentation_CCLI_FieldNumber_Artwork = 9,
};

GPB_FINAL @interface Presentation_CCLI : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *author;

@property(nonatomic, readwrite, copy, null_resettable) NSString *artistCredits;

@property(nonatomic, readwrite, copy, null_resettable) NSString *songTitle;

@property(nonatomic, readwrite, copy, null_resettable) NSString *publisher;

@property(nonatomic, readwrite) uint32_t copyrightYear;

@property(nonatomic, readwrite) uint32_t songNumber;

@property(nonatomic, readwrite) BOOL display;

@property(nonatomic, readwrite, copy, null_resettable) NSString *album;

@property(nonatomic, readwrite, copy, null_resettable) NSData *artwork;

@end

#pragma mark - Presentation_BibleReference

typedef GPB_ENUM(Presentation_BibleReference_FieldNumber) {
  Presentation_BibleReference_FieldNumber_BookIndex = 1,
  Presentation_BibleReference_FieldNumber_BookName = 2,
  Presentation_BibleReference_FieldNumber_ChapterRange = 3,
  Presentation_BibleReference_FieldNumber_VerseRange = 4,
  Presentation_BibleReference_FieldNumber_TranslationName = 5,
  Presentation_BibleReference_FieldNumber_TranslationDisplayAbbreviation = 6,
  Presentation_BibleReference_FieldNumber_TranslationInternalAbbreviation = 7,
  Presentation_BibleReference_FieldNumber_BookKey = 8,
};

GPB_FINAL @interface Presentation_BibleReference : GPBMessage

@property(nonatomic, readwrite) uint32_t bookIndex;

@property(nonatomic, readwrite, copy, null_resettable) NSString *bookName;

@property(nonatomic, readwrite, strong, null_resettable) IntRange *chapterRange;
/** Test to see if @c chapterRange has been set. */
@property(nonatomic, readwrite) BOOL hasChapterRange;

@property(nonatomic, readwrite, strong, null_resettable) IntRange *verseRange;
/** Test to see if @c verseRange has been set. */
@property(nonatomic, readwrite) BOOL hasVerseRange;

@property(nonatomic, readwrite, copy, null_resettable) NSString *translationName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *translationDisplayAbbreviation;

@property(nonatomic, readwrite, copy, null_resettable) NSString *translationInternalAbbreviation;

@property(nonatomic, readwrite, copy, null_resettable) NSString *bookKey;

@end

#pragma mark - Presentation_SocialMedia

typedef GPB_ENUM(Presentation_SocialMedia_FieldNumber) {
  Presentation_SocialMedia_FieldNumber_Term = 1,
  Presentation_SocialMedia_FieldNumber_Time = 2,
};

GPB_FINAL @interface Presentation_SocialMedia : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *term;

@property(nonatomic, readwrite, strong, null_resettable) Timestamp *time;
/** Test to see if @c time has been set. */
@property(nonatomic, readwrite) BOOL hasTime;

@end

#pragma mark - Presentation_Timeline

typedef GPB_ENUM(Presentation_Timeline_FieldNumber) {
  Presentation_Timeline_FieldNumber_CuesArray = 1,
  Presentation_Timeline_FieldNumber_Duration = 5,
  Presentation_Timeline_FieldNumber_Loop = 6,
  Presentation_Timeline_FieldNumber_AudioAction = 8,
};

GPB_FINAL @interface Presentation_Timeline : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Presentation_Timeline_Cue*> *cuesArray;
/** The number of items in @c cuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cuesArray_Count;

@property(nonatomic, readwrite) double duration;

@property(nonatomic, readwrite) BOOL loop;

@property(nonatomic, readwrite, strong, null_resettable) Action *audioAction;
/** Test to see if @c audioAction has been set. */
@property(nonatomic, readwrite) BOOL hasAudioAction;

@end

#pragma mark - Presentation_Timeline_Cue

typedef GPB_ENUM(Presentation_Timeline_Cue_FieldNumber) {
  Presentation_Timeline_Cue_FieldNumber_TriggerTime = 1,
  Presentation_Timeline_Cue_FieldNumber_CueId = 2,
  Presentation_Timeline_Cue_FieldNumber_Name = 3,
  Presentation_Timeline_Cue_FieldNumber_MediaAction = 4,
};

typedef GPB_ENUM(Presentation_Timeline_Cue_TriggerInfo_OneOfCase) {
  Presentation_Timeline_Cue_TriggerInfo_OneOfCase_GPBUnsetOneOfCase = 0,
  Presentation_Timeline_Cue_TriggerInfo_OneOfCase_CueId = 2,
  Presentation_Timeline_Cue_TriggerInfo_OneOfCase_MediaAction = 4,
};

GPB_FINAL @interface Presentation_Timeline_Cue : GPBMessage

@property(nonatomic, readwrite) double triggerTime;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readonly) Presentation_Timeline_Cue_TriggerInfo_OneOfCase triggerInfoOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) UUID *cueId;

@property(nonatomic, readwrite, strong, null_resettable) Action *mediaAction;

@end

/**
 * Clears whatever value was set for the oneof 'triggerInfo'.
 **/
void Presentation_Timeline_Cue_ClearTriggerInfoOneOfCase(Presentation_Timeline_Cue *message);

#pragma mark - Presentation_Arrangement

typedef GPB_ENUM(Presentation_Arrangement_FieldNumber) {
  Presentation_Arrangement_FieldNumber_Uuid = 1,
  Presentation_Arrangement_FieldNumber_Name = 2,
  Presentation_Arrangement_FieldNumber_GroupIdentifiersArray = 3,
};

GPB_FINAL @interface Presentation_Arrangement : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UUID*> *groupIdentifiersArray;
/** The number of items in @c groupIdentifiersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger groupIdentifiersArray_Count;

@end

#pragma mark - Presentation_CueGroup

typedef GPB_ENUM(Presentation_CueGroup_FieldNumber) {
  Presentation_CueGroup_FieldNumber_Group = 1,
  Presentation_CueGroup_FieldNumber_CueIdentifiersArray = 2,
};

GPB_FINAL @interface Presentation_CueGroup : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Group *group;
/** Test to see if @c group has been set. */
@property(nonatomic, readwrite) BOOL hasGroup;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UUID*> *cueIdentifiersArray;
/** The number of items in @c cueIdentifiersArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cueIdentifiersArray_Count;

@end

#pragma mark - Presentation_MultiTracksLicensing

typedef GPB_ENUM(Presentation_MultiTracksLicensing_FieldNumber) {
  Presentation_MultiTracksLicensing_FieldNumber_SongIdentifier = 1,
  Presentation_MultiTracksLicensing_FieldNumber_CustomerIdentifier = 2,
  Presentation_MultiTracksLicensing_FieldNumber_ExpirationDate = 3,
  Presentation_MultiTracksLicensing_FieldNumber_LicenseExpiration = 4,
  Presentation_MultiTracksLicensing_FieldNumber_Subscription = 5,
};

GPB_FINAL @interface Presentation_MultiTracksLicensing : GPBMessage

@property(nonatomic, readwrite) int64_t songIdentifier;

@property(nonatomic, readwrite, copy, null_resettable) NSString *customerIdentifier;

@property(nonatomic, readwrite, strong, null_resettable) Timestamp *expirationDate;
/** Test to see if @c expirationDate has been set. */
@property(nonatomic, readwrite) BOOL hasExpirationDate;

@property(nonatomic, readwrite, strong, null_resettable) Timestamp *licenseExpiration;
/** Test to see if @c licenseExpiration has been set. */
@property(nonatomic, readwrite) BOOL hasLicenseExpiration;

@property(nonatomic, readwrite) Presentation_MultiTracksLicensing_Subscription subscription;

@end

/**
 * Fetches the raw value of a @c Presentation_MultiTracksLicensing's @c subscription property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Presentation_MultiTracksLicensing_Subscription_RawValue(Presentation_MultiTracksLicensing *message);
/**
 * Sets the raw value of an @c Presentation_MultiTracksLicensing's @c subscription property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPresentation_MultiTracksLicensing_Subscription_RawValue(Presentation_MultiTracksLicensing *message, int32_t value);

#pragma mark - Presentation_Music

typedef GPB_ENUM(Presentation_Music_FieldNumber) {
  Presentation_Music_FieldNumber_OriginalMusicKey = 1,
  Presentation_Music_FieldNumber_UserMusicKey = 2,
  Presentation_Music_FieldNumber_Original = 3,
  Presentation_Music_FieldNumber_User = 4,
};

GPB_FINAL @interface Presentation_Music : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *originalMusicKey;

@property(nonatomic, readwrite, copy, null_resettable) NSString *userMusicKey;

@property(nonatomic, readwrite, strong, null_resettable) MusicKeyScale *original;
/** Test to see if @c original has been set. */
@property(nonatomic, readwrite) BOOL hasOriginal;

@property(nonatomic, readwrite, strong, null_resettable) MusicKeyScale *user;
/** Test to see if @c user has been set. */
@property(nonatomic, readwrite) BOOL hasUser;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
