// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: recording.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class DigitalAudio_Device_Map;
@class Recording_Stream;
@class Recording_Stream_Destination;
@class Recording_Stream_Destination_Resi;
@class Recording_Stream_DiskDestination;
@class Recording_Stream_Encoder;
@class Recording_Stream_OutputScreenSource;
@class Recording_Stream_RTMPDestination;
@class URL;
@class UUID;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Recording_Stream_Encoder_Codec

typedef GPB_ENUM(Recording_Stream_Encoder_Codec) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Recording_Stream_Encoder_Codec_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Recording_Stream_Encoder_Codec_CodecAutomatic = 0,
  Recording_Stream_Encoder_Codec_CodecH264 = 1,
  Recording_Stream_Encoder_Codec_CodecH265 = 2,
  Recording_Stream_Encoder_Codec_CodecProres422Proxy = 3,
  Recording_Stream_Encoder_Codec_CodecProres422Lt = 4,
  Recording_Stream_Encoder_Codec_CodecProres422 = 5,
  Recording_Stream_Encoder_Codec_CodecProres422Hq = 6,
  Recording_Stream_Encoder_Codec_CodecProres4444 = 7,
  Recording_Stream_Encoder_Codec_CodecProres4444Xq = 8,
  Recording_Stream_Encoder_Codec_CodecHap = 9,
  Recording_Stream_Encoder_Codec_CodecHapAlpha = 10,
  Recording_Stream_Encoder_Codec_CodecHapQ = 11,
  Recording_Stream_Encoder_Codec_CodecHapQAlpha = 12,
  Recording_Stream_Encoder_Codec_CodecNotch = 13,
  Recording_Stream_Encoder_Codec_CodecH264Software = 14,
  Recording_Stream_Encoder_Codec_CodecH265Software = 15,
};

GPBEnumDescriptor *Recording_Stream_Encoder_Codec_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Recording_Stream_Encoder_Codec_IsValidValue(int32_t value);

#pragma mark - Enum Recording_Stream_Encoder_FrameRate

typedef GPB_ENUM(Recording_Stream_Encoder_FrameRate) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Recording_Stream_Encoder_FrameRate_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Recording_Stream_Encoder_FrameRate_FrameRateUnknown = 0,
  Recording_Stream_Encoder_FrameRate_FrameRate24 = 1,
  Recording_Stream_Encoder_FrameRate_FrameRate25 = 2,
  Recording_Stream_Encoder_FrameRate_FrameRate2997 = 3,
  Recording_Stream_Encoder_FrameRate_FrameRate30 = 4,
  Recording_Stream_Encoder_FrameRate_FrameRate50 = 5,
  Recording_Stream_Encoder_FrameRate_FrameRate5994 = 6,
  Recording_Stream_Encoder_FrameRate_FrameRate60 = 7,
};

GPBEnumDescriptor *Recording_Stream_Encoder_FrameRate_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Recording_Stream_Encoder_FrameRate_IsValidValue(int32_t value);

#pragma mark - Enum Recording_Stream_DiskDestination_Container

typedef GPB_ENUM(Recording_Stream_DiskDestination_Container) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Recording_Stream_DiskDestination_Container_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Recording_Stream_DiskDestination_Container_ContainerUnknown = 0,
  Recording_Stream_DiskDestination_Container_ContainerMov = 1,
  Recording_Stream_DiskDestination_Container_ContainerMp4 = 2,
};

GPBEnumDescriptor *Recording_Stream_DiskDestination_Container_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Recording_Stream_DiskDestination_Container_IsValidValue(int32_t value);

#pragma mark - RecordingRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface RecordingRoot : GPBRootObject
@end

#pragma mark - Recording

GPB_FINAL @interface Recording : GPBMessage

@end

#pragma mark - Recording_SettingsDocument

typedef GPB_ENUM(Recording_SettingsDocument_FieldNumber) {
  Recording_SettingsDocument_FieldNumber_StreamsArray = 1,
};

GPB_FINAL @interface Recording_SettingsDocument : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Recording_Stream*> *streamsArray;
/** The number of items in @c streamsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger streamsArray_Count;

@end

#pragma mark - Recording_Stream

typedef GPB_ENUM(Recording_Stream_FieldNumber) {
  Recording_Stream_FieldNumber_Id_p = 1,
  Recording_Stream_FieldNumber_OutputScreen = 2,
  Recording_Stream_FieldNumber_Encoder = 3,
  Recording_Stream_FieldNumber_DestinationsArray = 4,
  Recording_Stream_FieldNumber_AudioMapArray = 5,
  Recording_Stream_FieldNumber_IsAudioCustomMapped = 6,
};

typedef GPB_ENUM(Recording_Stream_Source_OneOfCase) {
  Recording_Stream_Source_OneOfCase_GPBUnsetOneOfCase = 0,
  Recording_Stream_Source_OneOfCase_OutputScreen = 2,
};

GPB_FINAL @interface Recording_Stream : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *id_p;
/** Test to see if @c id_p has been set. */
@property(nonatomic, readwrite) BOOL hasId_p;

@property(nonatomic, readwrite, strong, null_resettable) Recording_Stream_Encoder *encoder;
/** Test to see if @c encoder has been set. */
@property(nonatomic, readwrite) BOOL hasEncoder;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Recording_Stream_Destination*> *destinationsArray;
/** The number of items in @c destinationsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger destinationsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<DigitalAudio_Device_Map*> *audioMapArray;
/** The number of items in @c audioMapArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger audioMapArray_Count;

@property(nonatomic, readwrite) BOOL isAudioCustomMapped;

@property(nonatomic, readonly) Recording_Stream_Source_OneOfCase sourceOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Recording_Stream_OutputScreenSource *outputScreen;

@end

/**
 * Clears whatever value was set for the oneof 'source'.
 **/
void Recording_Stream_ClearSourceOneOfCase(Recording_Stream *message);

#pragma mark - Recording_Stream_Encoder

typedef GPB_ENUM(Recording_Stream_Encoder_FieldNumber) {
  Recording_Stream_Encoder_FieldNumber_Codec = 1,
  Recording_Stream_Encoder_FieldNumber_VideoWidth = 2,
  Recording_Stream_Encoder_FieldNumber_VideoHeight = 3,
  Recording_Stream_Encoder_FieldNumber_IsInterlaced = 4,
  Recording_Stream_Encoder_FieldNumber_FrameRate = 5,
  Recording_Stream_Encoder_FieldNumber_VideoBitrate = 6,
};

GPB_FINAL @interface Recording_Stream_Encoder : GPBMessage

@property(nonatomic, readwrite) Recording_Stream_Encoder_Codec codec;

@property(nonatomic, readwrite) uint32_t videoWidth;

@property(nonatomic, readwrite) uint32_t videoHeight;

@property(nonatomic, readwrite) BOOL isInterlaced;

@property(nonatomic, readwrite) Recording_Stream_Encoder_FrameRate frameRate;

@property(nonatomic, readwrite) uint32_t videoBitrate;

@end

/**
 * Fetches the raw value of a @c Recording_Stream_Encoder's @c codec property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Recording_Stream_Encoder_Codec_RawValue(Recording_Stream_Encoder *message);
/**
 * Sets the raw value of an @c Recording_Stream_Encoder's @c codec property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRecording_Stream_Encoder_Codec_RawValue(Recording_Stream_Encoder *message, int32_t value);

/**
 * Fetches the raw value of a @c Recording_Stream_Encoder's @c frameRate property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Recording_Stream_Encoder_FrameRate_RawValue(Recording_Stream_Encoder *message);
/**
 * Sets the raw value of an @c Recording_Stream_Encoder's @c frameRate property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRecording_Stream_Encoder_FrameRate_RawValue(Recording_Stream_Encoder *message, int32_t value);

#pragma mark - Recording_Stream_OutputScreenSource

typedef GPB_ENUM(Recording_Stream_OutputScreenSource_FieldNumber) {
  Recording_Stream_OutputScreenSource_FieldNumber_ScreenId = 1,
  Recording_Stream_OutputScreenSource_FieldNumber_ScreenName = 2,
};

GPB_FINAL @interface Recording_Stream_OutputScreenSource : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *screenId;
/** Test to see if @c screenId has been set. */
@property(nonatomic, readwrite) BOOL hasScreenId;

@property(nonatomic, readwrite, copy, null_resettable) NSString *screenName;

@end

#pragma mark - Recording_Stream_DiskDestination

typedef GPB_ENUM(Recording_Stream_DiskDestination_FieldNumber) {
  Recording_Stream_DiskDestination_FieldNumber_Location = 1,
  Recording_Stream_DiskDestination_FieldNumber_Container = 2,
};

GPB_FINAL @interface Recording_Stream_DiskDestination : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) URL *location;
/** Test to see if @c location has been set. */
@property(nonatomic, readwrite) BOOL hasLocation;

@property(nonatomic, readwrite) Recording_Stream_DiskDestination_Container container;

@end

/**
 * Fetches the raw value of a @c Recording_Stream_DiskDestination's @c container property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Recording_Stream_DiskDestination_Container_RawValue(Recording_Stream_DiskDestination *message);
/**
 * Sets the raw value of an @c Recording_Stream_DiskDestination's @c container property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetRecording_Stream_DiskDestination_Container_RawValue(Recording_Stream_DiskDestination *message, int32_t value);

#pragma mark - Recording_Stream_RTMPDestination

typedef GPB_ENUM(Recording_Stream_RTMPDestination_FieldNumber) {
  Recording_Stream_RTMPDestination_FieldNumber_Address = 1,
  Recording_Stream_RTMPDestination_FieldNumber_Key = 2,
};

GPB_FINAL @interface Recording_Stream_RTMPDestination : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *address;

@property(nonatomic, readwrite, copy, null_resettable) NSString *key;

@end

#pragma mark - Recording_Stream_Destination

typedef GPB_ENUM(Recording_Stream_Destination_FieldNumber) {
  Recording_Stream_Destination_FieldNumber_Disk = 1,
  Recording_Stream_Destination_FieldNumber_Rtmp = 2,
  Recording_Stream_Destination_FieldNumber_Resi = 3,
};

typedef GPB_ENUM(Recording_Stream_Destination_Destination_OneOfCase) {
  Recording_Stream_Destination_Destination_OneOfCase_GPBUnsetOneOfCase = 0,
  Recording_Stream_Destination_Destination_OneOfCase_Disk = 1,
  Recording_Stream_Destination_Destination_OneOfCase_Rtmp = 2,
  Recording_Stream_Destination_Destination_OneOfCase_Resi = 3,
};

GPB_FINAL @interface Recording_Stream_Destination : GPBMessage

@property(nonatomic, readonly) Recording_Stream_Destination_Destination_OneOfCase destinationOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Recording_Stream_DiskDestination *disk;

@property(nonatomic, readwrite, strong, null_resettable) Recording_Stream_RTMPDestination *rtmp;

@property(nonatomic, readwrite, strong, null_resettable) Recording_Stream_Destination_Resi *resi;

@end

/**
 * Clears whatever value was set for the oneof 'destination'.
 **/
void Recording_Stream_Destination_ClearDestinationOneOfCase(Recording_Stream_Destination *message);

#pragma mark - Recording_Stream_Destination_Resi

typedef GPB_ENUM(Recording_Stream_Destination_Resi_FieldNumber) {
  Recording_Stream_Destination_Resi_FieldNumber_DestinationGroupId = 1,
  Recording_Stream_Destination_Resi_FieldNumber_EncoderProfileId = 2,
};

GPB_FINAL @interface Recording_Stream_Destination_Resi : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *destinationGroupId;
/** Test to see if @c destinationGroupId has been set. */
@property(nonatomic, readwrite) BOOL hasDestinationGroupId;

@property(nonatomic, readwrite, strong, null_resettable) UUID *encoderProfileId;
/** Test to see if @c encoderProfileId has been set. */
@property(nonatomic, readwrite) BOOL hasEncoderProfileId;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
