// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: propresenter.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Propresenter.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "Playlist.pbobjc.h"
#import "Action.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Action_Label);
GPBObjCClassDeclaration(ApplicationInfo);
GPBObjCClassDeclaration(Playlist);
GPBObjCClassDeclaration(Playlist_Tag);

#pragma mark - PropresenterRoot

@implementation PropresenterRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PropresenterRoot_FileDescriptor

static GPBFileDescriptor *PropresenterRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PlaylistDocument

@implementation PlaylistDocument

@dynamic hasApplicationInfo, applicationInfo;
@dynamic type;
@dynamic hasRootNode, rootNode;
@dynamic tagsArray, tagsArray_Count;
@dynamic hasLiveVideoPlaylist, liveVideoPlaylist;
@dynamic hasDownloadsPlaylist, downloadsPlaylist;

typedef struct PlaylistDocument__storage_ {
  uint32_t _has_storage_[1];
  PlaylistDocument_Type type;
  ApplicationInfo *applicationInfo;
  Playlist *rootNode;
  NSMutableArray *tagsArray;
  Playlist *liveVideoPlaylist;
  Playlist *downloadsPlaylist;
} PlaylistDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applicationInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ApplicationInfo),
        .number = PlaylistDocument_FieldNumber_ApplicationInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlaylistDocument__storage_, applicationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = PlaylistDocument_Type_EnumDescriptor,
        .number = PlaylistDocument_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlaylistDocument__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "rootNode",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist),
        .number = PlaylistDocument_FieldNumber_RootNode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PlaylistDocument__storage_, rootNode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist_Tag),
        .number = PlaylistDocument_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlaylistDocument__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveVideoPlaylist",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist),
        .number = PlaylistDocument_FieldNumber_LiveVideoPlaylist,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PlaylistDocument__storage_, liveVideoPlaylist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "downloadsPlaylist",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist),
        .number = PlaylistDocument_FieldNumber_DownloadsPlaylist,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(PlaylistDocument__storage_, downloadsPlaylist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlaylistDocument class]
                                     rootClass:[PropresenterRoot class]
                                          file:PropresenterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlaylistDocument__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PlaylistDocument_Type_RawValue(PlaylistDocument *message) {
  GPBDescriptor *descriptor = [PlaylistDocument descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlaylistDocument_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPlaylistDocument_Type_RawValue(PlaylistDocument *message, int32_t value) {
  GPBDescriptor *descriptor = [PlaylistDocument descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlaylistDocument_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum PlaylistDocument_Type

GPBEnumDescriptor *PlaylistDocument_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnknown\000TypePresentation\000TypeMedia\000T"
        "ypeAudio\000";
    static const int32_t values[] = {
        PlaylistDocument_Type_TypeUnknown,
        PlaylistDocument_Type_TypePresentation,
        PlaylistDocument_Type_TypeMedia,
        PlaylistDocument_Type_TypeAudio,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlaylistDocument_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlaylistDocument_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlaylistDocument_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlaylistDocument_Type_TypeUnknown:
    case PlaylistDocument_Type_TypePresentation:
    case PlaylistDocument_Type_TypeMedia:
    case PlaylistDocument_Type_TypeAudio:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - SettingsDocument

@implementation SettingsDocument

@dynamic labelsArray, labelsArray_Count;

typedef struct SettingsDocument__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *labelsArray;
} SettingsDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "labelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Action_Label),
        .number = SettingsDocument_FieldNumber_LabelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SettingsDocument__storage_, labelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SettingsDocument class]
                                     rootClass:[PropresenterRoot class]
                                          file:PropresenterRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SettingsDocument__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
