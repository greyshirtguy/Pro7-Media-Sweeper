// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: screens.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Color;
@class CornerValues;
@class DisplayMode;
@class EdgeBlend_Screen;
@class Graphics_Point;
@class Graphics_Rect;
@class OutputDisplay;
@class OutputDisplay_BlackmagicAlphaKeySettings;
@class Screen_BlendCompensation;
@class Screen_ColorAdjustment;
@class UUID;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum OutputDisplay_Type

typedef GPB_ENUM(OutputDisplay_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  OutputDisplay_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  OutputDisplay_Type_TypeUnknown = 0,
  OutputDisplay_Type_TypeScreen = 1,
  OutputDisplay_Type_TypeCard = 2,
  OutputDisplay_Type_TypeNdi = 3,
  OutputDisplay_Type_TypeSyphon = 4,
  OutputDisplay_Type_TypeCustom = 5,
};

GPBEnumDescriptor *OutputDisplay_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OutputDisplay_Type_IsValidValue(int32_t value);

#pragma mark - Enum OutputDisplay_BlackmagicAlphaKeySettings_KeyMode

typedef GPB_ENUM(OutputDisplay_BlackmagicAlphaKeySettings_KeyMode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_KeyModeInternal = 0,
  OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_KeyModeExternal = 1,
};

GPBEnumDescriptor *OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_IsValidValue(int32_t value);

#pragma mark - Enum EdgeBlend_Mode

typedef GPB_ENUM(EdgeBlend_Mode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  EdgeBlend_Mode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  EdgeBlend_Mode_ModeLinear = 0,
  EdgeBlend_Mode_ModeCubic = 1,
  EdgeBlend_Mode_ModeQuadratic = 2,
};

GPBEnumDescriptor *EdgeBlend_Mode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL EdgeBlend_Mode_IsValidValue(int32_t value);

#pragma mark - Enum EdgeBlend_Screen_Edge

typedef GPB_ENUM(EdgeBlend_Screen_Edge) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  EdgeBlend_Screen_Edge_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  EdgeBlend_Screen_Edge_EdgeUnknown = 0,
  EdgeBlend_Screen_Edge_EdgeLeft = 1,
  EdgeBlend_Screen_Edge_EdgeRight = 2,
  EdgeBlend_Screen_Edge_EdgeTop = 3,
  EdgeBlend_Screen_Edge_EdgeBottom = 4,
};

GPBEnumDescriptor *EdgeBlend_Screen_Edge_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL EdgeBlend_Screen_Edge_IsValidValue(int32_t value);

#pragma mark - Enum EdgeBlend_Screen_Mode

typedef GPB_ENUM(EdgeBlend_Screen_Mode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  EdgeBlend_Screen_Mode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  EdgeBlend_Screen_Mode_ModeLinear = 0,
  EdgeBlend_Screen_Mode_ModeCubic = 1,
  EdgeBlend_Screen_Mode_ModeQuadratic = 2,
};

GPBEnumDescriptor *EdgeBlend_Screen_Mode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL EdgeBlend_Screen_Mode_IsValidValue(int32_t value);

#pragma mark - ScreensRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface ScreensRoot : GPBRootObject
@end

#pragma mark - Screen

typedef GPB_ENUM(Screen_FieldNumber) {
  Screen_FieldNumber_Uuid = 1,
  Screen_FieldNumber_Name = 2,
  Screen_FieldNumber_Color = 3,
  Screen_FieldNumber_Bounds = 4,
  Screen_FieldNumber_AspectRatioLocked = 5,
  Screen_FieldNumber_OutputBoundsAspectRatioLocked = 6,
  Screen_FieldNumber_CornerPinningEnabled = 7,
  Screen_FieldNumber_SubscreenUnitRect = 8,
  Screen_FieldNumber_Rotation = 9,
  Screen_FieldNumber_Gamma = 10,
  Screen_FieldNumber_BlackLevel = 11,
  Screen_FieldNumber_BlendedEdges = 12,
  Screen_FieldNumber_CornerValues = 13,
  Screen_FieldNumber_OutputDisplay = 14,
  Screen_FieldNumber_ColorEnabled = 15,
  Screen_FieldNumber_ColorAdjustment = 16,
  Screen_FieldNumber_BlendCompensation = 17,
};

GPB_FINAL @interface Screen : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) Color *color;
/** Test to see if @c color has been set. */
@property(nonatomic, readwrite) BOOL hasColor;

@property(nonatomic, readwrite, strong, null_resettable) Graphics_Rect *bounds;
/** Test to see if @c bounds has been set. */
@property(nonatomic, readwrite) BOOL hasBounds;

@property(nonatomic, readwrite) BOOL aspectRatioLocked;

@property(nonatomic, readwrite) BOOL outputBoundsAspectRatioLocked;

@property(nonatomic, readwrite) BOOL cornerPinningEnabled;

@property(nonatomic, readwrite, strong, null_resettable) Graphics_Rect *subscreenUnitRect;
/** Test to see if @c subscreenUnitRect has been set. */
@property(nonatomic, readwrite) BOOL hasSubscreenUnitRect;

@property(nonatomic, readwrite) double rotation;

@property(nonatomic, readwrite) double gamma;

@property(nonatomic, readwrite) double blackLevel;

@property(nonatomic, readwrite) uint32_t blendedEdges;

@property(nonatomic, readwrite, strong, null_resettable) CornerValues *cornerValues;
/** Test to see if @c cornerValues has been set. */
@property(nonatomic, readwrite) BOOL hasCornerValues;

@property(nonatomic, readwrite, strong, null_resettable) OutputDisplay *outputDisplay;
/** Test to see if @c outputDisplay has been set. */
@property(nonatomic, readwrite) BOOL hasOutputDisplay;

@property(nonatomic, readwrite) BOOL colorEnabled;

@property(nonatomic, readwrite, strong, null_resettable) Screen_ColorAdjustment *colorAdjustment;
/** Test to see if @c colorAdjustment has been set. */
@property(nonatomic, readwrite) BOOL hasColorAdjustment;

@property(nonatomic, readwrite, strong, null_resettable) Screen_BlendCompensation *blendCompensation;
/** Test to see if @c blendCompensation has been set. */
@property(nonatomic, readwrite) BOOL hasBlendCompensation;

@end

#pragma mark - Screen_ColorAdjustment

typedef GPB_ENUM(Screen_ColorAdjustment_FieldNumber) {
  Screen_ColorAdjustment_FieldNumber_Gamma = 1,
  Screen_ColorAdjustment_FieldNumber_BlackLevel = 2,
  Screen_ColorAdjustment_FieldNumber_RedLevel = 3,
  Screen_ColorAdjustment_FieldNumber_GreenLevel = 4,
  Screen_ColorAdjustment_FieldNumber_BlueLevel = 5,
  Screen_ColorAdjustment_FieldNumber_Brightness = 6,
  Screen_ColorAdjustment_FieldNumber_Contrast = 7,
};

GPB_FINAL @interface Screen_ColorAdjustment : GPBMessage

@property(nonatomic, readwrite) double gamma;

@property(nonatomic, readwrite) double blackLevel;

@property(nonatomic, readwrite) double redLevel;

@property(nonatomic, readwrite) double greenLevel;

@property(nonatomic, readwrite) double blueLevel;

@property(nonatomic, readwrite) double brightness;

@property(nonatomic, readwrite) double contrast;

@end

#pragma mark - Screen_BlendCompensation

typedef GPB_ENUM(Screen_BlendCompensation_FieldNumber) {
  Screen_BlendCompensation_FieldNumber_BlackLevel = 1,
};

GPB_FINAL @interface Screen_BlendCompensation : GPBMessage

@property(nonatomic, readwrite) double blackLevel;

@end

#pragma mark - CornerValues

typedef GPB_ENUM(CornerValues_FieldNumber) {
  CornerValues_FieldNumber_TopLeft = 1,
  CornerValues_FieldNumber_TopRight = 2,
  CornerValues_FieldNumber_BottomLeft = 3,
  CornerValues_FieldNumber_BottomRight = 4,
};

GPB_FINAL @interface CornerValues : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Graphics_Point *topLeft;
/** Test to see if @c topLeft has been set. */
@property(nonatomic, readwrite) BOOL hasTopLeft;

@property(nonatomic, readwrite, strong, null_resettable) Graphics_Point *topRight;
/** Test to see if @c topRight has been set. */
@property(nonatomic, readwrite) BOOL hasTopRight;

@property(nonatomic, readwrite, strong, null_resettable) Graphics_Point *bottomLeft;
/** Test to see if @c bottomLeft has been set. */
@property(nonatomic, readwrite) BOOL hasBottomLeft;

@property(nonatomic, readwrite, strong, null_resettable) Graphics_Point *bottomRight;
/** Test to see if @c bottomRight has been set. */
@property(nonatomic, readwrite) BOOL hasBottomRight;

@end

#pragma mark - DisplayMode

typedef GPB_ENUM(DisplayMode_FieldNumber) {
  DisplayMode_FieldNumber_Name = 1,
  DisplayMode_FieldNumber_Width = 2,
  DisplayMode_FieldNumber_Height = 3,
  DisplayMode_FieldNumber_RefreshRate = 4,
  DisplayMode_FieldNumber_Interlaced = 5,
};

GPB_FINAL @interface DisplayMode : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) uint32_t width;

@property(nonatomic, readwrite) uint32_t height;

@property(nonatomic, readwrite) double refreshRate;

@property(nonatomic, readwrite) BOOL interlaced;

@end

#pragma mark - OutputDisplay

typedef GPB_ENUM(OutputDisplay_FieldNumber) {
  OutputDisplay_FieldNumber_Name = 1,
  OutputDisplay_FieldNumber_Model = 2,
  OutputDisplay_FieldNumber_Serial = 3,
  OutputDisplay_FieldNumber_DeviceName = 4,
  OutputDisplay_FieldNumber_Vendor = 5,
  OutputDisplay_FieldNumber_ModeIndex = 6,
  OutputDisplay_FieldNumber_Bounds = 7,
  OutputDisplay_FieldNumber_Type = 8,
  OutputDisplay_FieldNumber_Mode = 9,
  OutputDisplay_FieldNumber_RenderId = 10,
  OutputDisplay_FieldNumber_BlackMagicAlphaKeySettings = 11,
};

typedef GPB_ENUM(OutputDisplay_AlphaKeySettings_OneOfCase) {
  OutputDisplay_AlphaKeySettings_OneOfCase_GPBUnsetOneOfCase = 0,
  OutputDisplay_AlphaKeySettings_OneOfCase_BlackMagicAlphaKeySettings = 11,
};

GPB_FINAL @interface OutputDisplay : GPBMessage

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, copy, null_resettable) NSString *model;

@property(nonatomic, readwrite, copy, null_resettable) NSString *serial;

@property(nonatomic, readwrite, copy, null_resettable) NSString *deviceName;

@property(nonatomic, readwrite, copy, null_resettable) NSString *vendor;

@property(nonatomic, readwrite) uint32_t modeIndex;

@property(nonatomic, readwrite, strong, null_resettable) Graphics_Rect *bounds;
/** Test to see if @c bounds has been set. */
@property(nonatomic, readwrite) BOOL hasBounds;

@property(nonatomic, readwrite) OutputDisplay_Type type;

@property(nonatomic, readwrite, strong, null_resettable) DisplayMode *mode;
/** Test to see if @c mode has been set. */
@property(nonatomic, readwrite) BOOL hasMode;

@property(nonatomic, readwrite, copy, null_resettable) NSString *renderId;

@property(nonatomic, readonly) OutputDisplay_AlphaKeySettings_OneOfCase alphaKeySettingsOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) OutputDisplay_BlackmagicAlphaKeySettings *blackMagicAlphaKeySettings;

@end

/**
 * Fetches the raw value of a @c OutputDisplay's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t OutputDisplay_Type_RawValue(OutputDisplay *message);
/**
 * Sets the raw value of an @c OutputDisplay's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetOutputDisplay_Type_RawValue(OutputDisplay *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'alphaKeySettings'.
 **/
void OutputDisplay_ClearAlphaKeySettingsOneOfCase(OutputDisplay *message);

#pragma mark - OutputDisplay_BlackmagicAlphaKeySettings

typedef GPB_ENUM(OutputDisplay_BlackmagicAlphaKeySettings_FieldNumber) {
  OutputDisplay_BlackmagicAlphaKeySettings_FieldNumber_Enabled = 1,
  OutputDisplay_BlackmagicAlphaKeySettings_FieldNumber_KeyMode = 2,
  OutputDisplay_BlackmagicAlphaKeySettings_FieldNumber_BlendValue = 3,
};

GPB_FINAL @interface OutputDisplay_BlackmagicAlphaKeySettings : GPBMessage

@property(nonatomic, readwrite) BOOL enabled;

@property(nonatomic, readwrite) OutputDisplay_BlackmagicAlphaKeySettings_KeyMode keyMode;

@property(nonatomic, readwrite) double blendValue;

@end

/**
 * Fetches the raw value of a @c OutputDisplay_BlackmagicAlphaKeySettings's @c keyMode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t OutputDisplay_BlackmagicAlphaKeySettings_KeyMode_RawValue(OutputDisplay_BlackmagicAlphaKeySettings *message);
/**
 * Sets the raw value of an @c OutputDisplay_BlackmagicAlphaKeySettings's @c keyMode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetOutputDisplay_BlackmagicAlphaKeySettings_KeyMode_RawValue(OutputDisplay_BlackmagicAlphaKeySettings *message, int32_t value);

#pragma mark - EdgeBlend

typedef GPB_ENUM(EdgeBlend_FieldNumber) {
  EdgeBlend_FieldNumber_Uuid = 1,
  EdgeBlend_FieldNumber_Radius = 2,
  EdgeBlend_FieldNumber_Intensity = 3,
  EdgeBlend_FieldNumber_Mode = 4,
  EdgeBlend_FieldNumber_FirstScreen = 5,
  EdgeBlend_FieldNumber_SecondScreen = 6,
  EdgeBlend_FieldNumber_LeftScreen = 7,
  EdgeBlend_FieldNumber_RightScreen = 8,
  EdgeBlend_FieldNumber_TopScreen = 9,
  EdgeBlend_FieldNumber_BottomScreen = 10,
};

GPB_FINAL @interface EdgeBlend : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite) double radius;

@property(nonatomic, readwrite) double intensity;

@property(nonatomic, readwrite) EdgeBlend_Mode mode;

@property(nonatomic, readwrite, strong, null_resettable) EdgeBlend_Screen *firstScreen;
/** Test to see if @c firstScreen has been set. */
@property(nonatomic, readwrite) BOOL hasFirstScreen;

@property(nonatomic, readwrite, strong, null_resettable) EdgeBlend_Screen *secondScreen;
/** Test to see if @c secondScreen has been set. */
@property(nonatomic, readwrite) BOOL hasSecondScreen;

@property(nonatomic, readwrite, strong, null_resettable) EdgeBlend_Screen *leftScreen;
/** Test to see if @c leftScreen has been set. */
@property(nonatomic, readwrite) BOOL hasLeftScreen;

@property(nonatomic, readwrite, strong, null_resettable) EdgeBlend_Screen *rightScreen;
/** Test to see if @c rightScreen has been set. */
@property(nonatomic, readwrite) BOOL hasRightScreen;

@property(nonatomic, readwrite, strong, null_resettable) EdgeBlend_Screen *topScreen;
/** Test to see if @c topScreen has been set. */
@property(nonatomic, readwrite) BOOL hasTopScreen;

@property(nonatomic, readwrite, strong, null_resettable) EdgeBlend_Screen *bottomScreen;
/** Test to see if @c bottomScreen has been set. */
@property(nonatomic, readwrite) BOOL hasBottomScreen;

@end

/**
 * Fetches the raw value of a @c EdgeBlend's @c mode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t EdgeBlend_Mode_RawValue(EdgeBlend *message);
/**
 * Sets the raw value of an @c EdgeBlend's @c mode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetEdgeBlend_Mode_RawValue(EdgeBlend *message, int32_t value);

#pragma mark - EdgeBlend_Screen

typedef GPB_ENUM(EdgeBlend_Screen_FieldNumber) {
  EdgeBlend_Screen_FieldNumber_Uuid = 1,
  EdgeBlend_Screen_FieldNumber_Edge = 2,
  EdgeBlend_Screen_FieldNumber_Gamma = 3,
  EdgeBlend_Screen_FieldNumber_BlackLevel = 4,
  EdgeBlend_Screen_FieldNumber_Mode = 5,
  EdgeBlend_Screen_FieldNumber_Radius = 6,
  EdgeBlend_Screen_FieldNumber_Intensity = 7,
};

GPB_FINAL @interface EdgeBlend_Screen : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite) EdgeBlend_Screen_Edge edge;

@property(nonatomic, readwrite) double gamma;

@property(nonatomic, readwrite) double blackLevel;

@property(nonatomic, readwrite) EdgeBlend_Screen_Mode mode;

@property(nonatomic, readwrite) double radius;

@property(nonatomic, readwrite) double intensity;

@end

/**
 * Fetches the raw value of a @c EdgeBlend_Screen's @c edge property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t EdgeBlend_Screen_Edge_RawValue(EdgeBlend_Screen *message);
/**
 * Sets the raw value of an @c EdgeBlend_Screen's @c edge property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetEdgeBlend_Screen_Edge_RawValue(EdgeBlend_Screen *message, int32_t value);

/**
 * Fetches the raw value of a @c EdgeBlend_Screen's @c mode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t EdgeBlend_Screen_Mode_RawValue(EdgeBlend_Screen *message);
/**
 * Sets the raw value of an @c EdgeBlend_Screen's @c mode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetEdgeBlend_Screen_Mode_RawValue(EdgeBlend_Screen *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
