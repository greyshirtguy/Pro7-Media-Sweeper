// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layers.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Color;
@class Effect;
@class HotKey;
@class Layer;
@class Layer_Blending;
@class Layer_Blending_Matte;
@class Layer_Blending_Matte_Alpha;
@class Layer_Blending_Matte_Luma;
@class Layer_Blending_Matte_White;
@class Layer_Blending_Standard;
@class Transition;
@class UUID;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Layer_BlendMode

typedef GPB_ENUM(Layer_BlendMode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Layer_BlendMode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Layer_BlendMode_BlendModeNormal = 0,
  Layer_BlendMode_BlendModeDissolve = 1,
  Layer_BlendMode_BlendModeDarken = 2,
  Layer_BlendMode_BlendModeMultiply = 3,
  Layer_BlendMode_BlendModeColorBurn = 4,
  Layer_BlendMode_BlendModeLinearBurn = 5,
  Layer_BlendMode_BlendModeDarkerColor = 6,
  Layer_BlendMode_BlendModeLighten = 7,
  Layer_BlendMode_BlendModeScreen = 8,
  Layer_BlendMode_BlendModeColorDodge = 9,
  Layer_BlendMode_BlendModeLinearDodge = 10,
  Layer_BlendMode_BlendModeLighterColor = 11,
  Layer_BlendMode_BlendModeOverlay = 12,
  Layer_BlendMode_BlendModeSoftLight = 13,
  Layer_BlendMode_BlendModeHardLight = 14,
  Layer_BlendMode_BlendModeVividLight = 15,
  Layer_BlendMode_BlendModeLinearLight = 16,
  Layer_BlendMode_BlendModePinLight = 17,
  Layer_BlendMode_BlendModeHardMix = 18,
  Layer_BlendMode_BlendModeDifference = 19,
  Layer_BlendMode_BlendModeExclusion = 20,
  Layer_BlendMode_BlendModeSubtract = 21,
  Layer_BlendMode_BlendModeDivide = 22,
  Layer_BlendMode_BlendModeHue = 23,
  Layer_BlendMode_BlendModeSaturation = 24,
  Layer_BlendMode_BlendModeColor = 25,
  Layer_BlendMode_BlendModeLuminosity = 26,
};

GPBEnumDescriptor *Layer_BlendMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Layer_BlendMode_IsValidValue(int32_t value);

#pragma mark - Enum Layer_Blending_Standard_BlendMode

typedef GPB_ENUM(Layer_Blending_Standard_BlendMode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Layer_Blending_Standard_BlendMode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Layer_Blending_Standard_BlendMode_BlendModeNormal = 0,
  Layer_Blending_Standard_BlendMode_BlendModeDissolve = 1,
  Layer_Blending_Standard_BlendMode_BlendModeDarken = 2,
  Layer_Blending_Standard_BlendMode_BlendModeMultiply = 3,
  Layer_Blending_Standard_BlendMode_BlendModeColorBurn = 4,
  Layer_Blending_Standard_BlendMode_BlendModeLinearBurn = 5,
  Layer_Blending_Standard_BlendMode_BlendModeDarkerColor = 6,
  Layer_Blending_Standard_BlendMode_BlendModeLighten = 7,
  Layer_Blending_Standard_BlendMode_BlendModeScreen = 8,
  Layer_Blending_Standard_BlendMode_BlendModeColorDodge = 9,
  Layer_Blending_Standard_BlendMode_BlendModeLinearDodge = 10,
  Layer_Blending_Standard_BlendMode_BlendModeLighterColor = 11,
  Layer_Blending_Standard_BlendMode_BlendModeOverlay = 12,
  Layer_Blending_Standard_BlendMode_BlendModeSoftLight = 13,
  Layer_Blending_Standard_BlendMode_BlendModeHardLight = 14,
  Layer_Blending_Standard_BlendMode_BlendModeVividLight = 15,
  Layer_Blending_Standard_BlendMode_BlendModeLinearLight = 16,
  Layer_Blending_Standard_BlendMode_BlendModePinLight = 17,
  Layer_Blending_Standard_BlendMode_BlendModeHardMix = 18,
  Layer_Blending_Standard_BlendMode_BlendModeDifference = 19,
  Layer_Blending_Standard_BlendMode_BlendModeExclusion = 20,
  Layer_Blending_Standard_BlendMode_BlendModeSubtract = 21,
  Layer_Blending_Standard_BlendMode_BlendModeDivide = 22,
  Layer_Blending_Standard_BlendMode_BlendModeHue = 23,
  Layer_Blending_Standard_BlendMode_BlendModeSaturation = 24,
  Layer_Blending_Standard_BlendMode_BlendModeColor = 25,
  Layer_Blending_Standard_BlendMode_BlendModeLuminosity = 26,
};

GPBEnumDescriptor *Layer_Blending_Standard_BlendMode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Layer_Blending_Standard_BlendMode_IsValidValue(int32_t value);

#pragma mark - LayersRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface LayersRoot : GPBRootObject
@end

#pragma mark - Layer

typedef GPB_ENUM(Layer_FieldNumber) {
  Layer_FieldNumber_Uuid = 1,
  Layer_FieldNumber_Name = 2,
  Layer_FieldNumber_Color = 3,
  Layer_FieldNumber_Muted = 4,
  Layer_FieldNumber_Hidden = 5,
  Layer_FieldNumber_BlendMode = 6,
  Layer_FieldNumber_Opacity = 7,
  Layer_FieldNumber_SelectedTargetSetUuid = 8,
  Layer_FieldNumber_EffectsPresetUuid = 9,
  Layer_FieldNumber_EffectsBuildDuration = 10,
  Layer_FieldNumber_LayerPresetUuid = 11,
  Layer_FieldNumber_HotKey = 12,
  Layer_FieldNumber_Transition = 13,
  Layer_FieldNumber_EffectsArray = 14,
  Layer_FieldNumber_Blend = 15,
};

GPB_FINAL @interface Layer : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) Color *color;
/** Test to see if @c color has been set. */
@property(nonatomic, readwrite) BOOL hasColor;

@property(nonatomic, readwrite) BOOL muted;

@property(nonatomic, readwrite) BOOL hidden;

@property(nonatomic, readwrite) Layer_BlendMode blendMode;

@property(nonatomic, readwrite) double opacity;

@property(nonatomic, readwrite, strong, null_resettable) UUID *selectedTargetSetUuid;
/** Test to see if @c selectedTargetSetUuid has been set. */
@property(nonatomic, readwrite) BOOL hasSelectedTargetSetUuid;

@property(nonatomic, readwrite, strong, null_resettable) UUID *effectsPresetUuid;
/** Test to see if @c effectsPresetUuid has been set. */
@property(nonatomic, readwrite) BOOL hasEffectsPresetUuid;

@property(nonatomic, readwrite) double effectsBuildDuration;

@property(nonatomic, readwrite, strong, null_resettable) UUID *layerPresetUuid;
/** Test to see if @c layerPresetUuid has been set. */
@property(nonatomic, readwrite) BOOL hasLayerPresetUuid;

@property(nonatomic, readwrite, strong, null_resettable) HotKey *hotKey;
/** Test to see if @c hotKey has been set. */
@property(nonatomic, readwrite) BOOL hasHotKey;

@property(nonatomic, readwrite, strong, null_resettable) Transition *transition;
/** Test to see if @c transition has been set. */
@property(nonatomic, readwrite) BOOL hasTransition;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Effect*> *effectsArray;
/** The number of items in @c effectsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger effectsArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) Layer_Blending *blend;
/** Test to see if @c blend has been set. */
@property(nonatomic, readwrite) BOOL hasBlend;

@end

/**
 * Fetches the raw value of a @c Layer's @c blendMode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Layer_BlendMode_RawValue(Layer *message);
/**
 * Sets the raw value of an @c Layer's @c blendMode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLayer_BlendMode_RawValue(Layer *message, int32_t value);

#pragma mark - Layer_Preset

typedef GPB_ENUM(Layer_Preset_FieldNumber) {
  Layer_Preset_FieldNumber_Uuid = 1,
  Layer_Preset_FieldNumber_Name = 2,
  Layer_Preset_FieldNumber_Layer = 3,
};

GPB_FINAL @interface Layer_Preset : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) Layer *layer;
/** Test to see if @c layer has been set. */
@property(nonatomic, readwrite) BOOL hasLayer;

@end

#pragma mark - Layer_Blending

typedef GPB_ENUM(Layer_Blending_FieldNumber) {
  Layer_Blending_FieldNumber_Standard = 1,
  Layer_Blending_FieldNumber_Matte = 2,
};

typedef GPB_ENUM(Layer_Blending_BlendingType_OneOfCase) {
  Layer_Blending_BlendingType_OneOfCase_GPBUnsetOneOfCase = 0,
  Layer_Blending_BlendingType_OneOfCase_Standard = 1,
  Layer_Blending_BlendingType_OneOfCase_Matte = 2,
};

GPB_FINAL @interface Layer_Blending : GPBMessage

@property(nonatomic, readonly) Layer_Blending_BlendingType_OneOfCase blendingTypeOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Layer_Blending_Standard *standard;

@property(nonatomic, readwrite, strong, null_resettable) Layer_Blending_Matte *matte;

@end

/**
 * Clears whatever value was set for the oneof 'blendingType'.
 **/
void Layer_Blending_ClearBlendingTypeOneOfCase(Layer_Blending *message);

#pragma mark - Layer_Blending_Standard

typedef GPB_ENUM(Layer_Blending_Standard_FieldNumber) {
  Layer_Blending_Standard_FieldNumber_Mode = 1,
  Layer_Blending_Standard_FieldNumber_Opacity = 2,
};

GPB_FINAL @interface Layer_Blending_Standard : GPBMessage

@property(nonatomic, readwrite) Layer_Blending_Standard_BlendMode mode;

@property(nonatomic, readwrite) double opacity;

@end

/**
 * Fetches the raw value of a @c Layer_Blending_Standard's @c mode property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Layer_Blending_Standard_Mode_RawValue(Layer_Blending_Standard *message);
/**
 * Sets the raw value of an @c Layer_Blending_Standard's @c mode property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetLayer_Blending_Standard_Mode_RawValue(Layer_Blending_Standard *message, int32_t value);

#pragma mark - Layer_Blending_Matte

typedef GPB_ENUM(Layer_Blending_Matte_FieldNumber) {
  Layer_Blending_Matte_FieldNumber_Alpha = 1,
  Layer_Blending_Matte_FieldNumber_Luma = 2,
  Layer_Blending_Matte_FieldNumber_White = 4,
};

typedef GPB_ENUM(Layer_Blending_Matte_MatteType_OneOfCase) {
  Layer_Blending_Matte_MatteType_OneOfCase_GPBUnsetOneOfCase = 0,
  Layer_Blending_Matte_MatteType_OneOfCase_Alpha = 1,
  Layer_Blending_Matte_MatteType_OneOfCase_Luma = 2,
  Layer_Blending_Matte_MatteType_OneOfCase_White = 4,
};

GPB_FINAL @interface Layer_Blending_Matte : GPBMessage

@property(nonatomic, readonly) Layer_Blending_Matte_MatteType_OneOfCase matteTypeOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Layer_Blending_Matte_Alpha *alpha;

@property(nonatomic, readwrite, strong, null_resettable) Layer_Blending_Matte_Luma *luma;

@property(nonatomic, readwrite, strong, null_resettable) Layer_Blending_Matte_White *white;

@end

/**
 * Clears whatever value was set for the oneof 'matteType'.
 **/
void Layer_Blending_Matte_ClearMatteTypeOneOfCase(Layer_Blending_Matte *message);

#pragma mark - Layer_Blending_Matte_Alpha

typedef GPB_ENUM(Layer_Blending_Matte_Alpha_FieldNumber) {
  Layer_Blending_Matte_Alpha_FieldNumber_Inverted = 1,
};

GPB_FINAL @interface Layer_Blending_Matte_Alpha : GPBMessage

@property(nonatomic, readwrite) BOOL inverted;

@end

#pragma mark - Layer_Blending_Matte_Luma

typedef GPB_ENUM(Layer_Blending_Matte_Luma_FieldNumber) {
  Layer_Blending_Matte_Luma_FieldNumber_Inverted = 1,
};

GPB_FINAL @interface Layer_Blending_Matte_Luma : GPBMessage

@property(nonatomic, readwrite) BOOL inverted;

@end

#pragma mark - Layer_Blending_Matte_White

GPB_FINAL @interface Layer_Blending_Matte_White : GPBMessage

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
