// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: masks.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Masks.pbobjc.h"
#import "GraphicsData.pbobjc.h"
#import "BasicTypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Color);
GPBObjCClassDeclaration(Graphics_Element);
GPBObjCClassDeclaration(UUID);

#pragma mark - MasksRoot

@implementation MasksRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MasksRoot_FileDescriptor

static GPBFileDescriptor *MasksRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Mask

@implementation Mask

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic hasColor, color;
@dynamic mode;
@dynamic shapesArray, shapesArray_Count;

typedef struct Mask__storage_ {
  uint32_t _has_storage_[1];
  Mask_Mode mode;
  UUID *uuid;
  NSString *name;
  Color *color;
  NSMutableArray *shapesArray;
} Mask__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Mask_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Mask__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Mask_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Mask__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "color",
        .dataTypeSpecific.clazz = GPBObjCClass(Color),
        .number = Mask_FieldNumber_Color,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Mask__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = Mask_Mode_EnumDescriptor,
        .number = Mask_FieldNumber_Mode,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Mask__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "shapesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Graphics_Element),
        .number = Mask_FieldNumber_ShapesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Mask__storage_, shapesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Mask class]
                                     rootClass:[MasksRoot class]
                                          file:MasksRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Mask__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Mask_Mode_RawValue(Mask *message) {
  GPBDescriptor *descriptor = [Mask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Mask_FieldNumber_Mode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMask_Mode_RawValue(Mask *message, int32_t value) {
  GPBDescriptor *descriptor = [Mask descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Mask_FieldNumber_Mode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Mask_Mode

GPBEnumDescriptor *Mask_Mode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ModeOverlay\000ModeKeyhole\000";
    static const int32_t values[] = {
        Mask_Mode_ModeOverlay,
        Mask_Mode_ModeKeyhole,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Mask_Mode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Mask_Mode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Mask_Mode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Mask_Mode_ModeOverlay:
    case Mask_Mode_ModeKeyhole:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
