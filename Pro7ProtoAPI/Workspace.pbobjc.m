// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: workspace.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Workspace.pbobjc.h"
#import "Effects.pbobjc.h"
#import "Masks.pbobjc.h"
#import "Screens.pbobjc.h"
#import "Layers.pbobjc.h"
#import "Targets.pbobjc.h"
#import "Playlist.pbobjc.h"
#import "HotKey.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "Calendar.pbobjc.h"
#import "AlignmentGuide.pbobjc.h"
#import "LiveVideoPlaylist.pbobjc.h"
#import "GraphicsData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AlignmentGuide);
GPBObjCClassDeclaration(Calendar);
GPBObjCClassDeclaration(EdgeBlend);
GPBObjCClassDeclaration(Effect);
GPBObjCClassDeclaration(Graphics_Rect);
GPBObjCClassDeclaration(HotKey);
GPBObjCClassDeclaration(Layer);
GPBObjCClassDeclaration(LiveVideoPlaylist);
GPBObjCClassDeclaration(Mask);
GPBObjCClassDeclaration(OutputDisplay);
GPBObjCClassDeclaration(Playlist);
GPBObjCClassDeclaration(Screen);
GPBObjCClassDeclaration(TargetSet);
GPBObjCClassDeclaration(Transition);
GPBObjCClassDeclaration(URL);
GPBObjCClassDeclaration(UUID);
GPBObjCClassDeclaration(Workspace);
GPBObjCClassDeclaration(Workspace_EditorBackground);
GPBObjCClassDeclaration(Workspace_UnitScaling);

#pragma mark - WorkspaceRoot

@implementation WorkspaceRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - WorkspaceRoot_FileDescriptor

static GPBFileDescriptor *WorkspaceRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Workspace

@implementation Workspace

@dynamic hasUuid, uuid;
@dynamic muted;
@dynamic hidden;
@dynamic hasEditorBackground, editorBackground;
@dynamic hasEffectPresetUuid, effectPresetUuid;
@dynamic effectBuildDuration;
@dynamic hasTransition, transition;
@dynamic hasActiveMaskUuid, activeMaskUuid;
@dynamic hasPlaylist, playlist;
@dynamic hasUnitScaling, unitScaling;
@dynamic effectsArray, effectsArray_Count;
@dynamic masksArray, masksArray_Count;
@dynamic screensArray, screensArray_Count;
@dynamic edgeBlendsArray, edgeBlendsArray_Count;
@dynamic layersArray, layersArray_Count;
@dynamic targetSetsArray, targetSetsArray_Count;
@dynamic hotKeysArray, hotKeysArray_Count;
@dynamic hasCalendar, calendar;
@dynamic alignmentGuidesArray, alignmentGuidesArray_Count;
@dynamic hasLiveVideoPlaylist, liveVideoPlaylist;
@dynamic hasOutputPreviewDisplay, outputPreviewDisplay;

typedef struct Workspace__storage_ {
  uint32_t _has_storage_[1];
  UUID *uuid;
  Workspace_EditorBackground *editorBackground;
  UUID *effectPresetUuid;
  Transition *transition;
  UUID *activeMaskUuid;
  Playlist *playlist;
  Workspace_UnitScaling *unitScaling;
  NSMutableArray *effectsArray;
  NSMutableArray *masksArray;
  NSMutableArray *screensArray;
  NSMutableArray *edgeBlendsArray;
  NSMutableArray *layersArray;
  NSMutableArray *targetSetsArray;
  NSMutableArray *hotKeysArray;
  Calendar *calendar;
  NSMutableArray *alignmentGuidesArray;
  LiveVideoPlaylist *liveVideoPlaylist;
  OutputDisplay *outputPreviewDisplay;
  double effectBuildDuration;
} Workspace__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Workspace_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Workspace__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "muted",
        .dataTypeSpecific.clazz = Nil,
        .number = Workspace_FieldNumber_Muted,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "hidden",
        .dataTypeSpecific.clazz = Nil,
        .number = Workspace_FieldNumber_Hidden,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "editorBackground",
        .dataTypeSpecific.clazz = GPBObjCClass(Workspace_EditorBackground),
        .number = Workspace_FieldNumber_EditorBackground,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Workspace__storage_, editorBackground),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectPresetUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Workspace_FieldNumber_EffectPresetUuid,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Workspace__storage_, effectPresetUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectBuildDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = Workspace_FieldNumber_EffectBuildDuration,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Workspace__storage_, effectBuildDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "transition",
        .dataTypeSpecific.clazz = GPBObjCClass(Transition),
        .number = Workspace_FieldNumber_Transition,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Workspace__storage_, transition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "activeMaskUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Workspace_FieldNumber_ActiveMaskUuid,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Workspace__storage_, activeMaskUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "playlist",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist),
        .number = Workspace_FieldNumber_Playlist,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Workspace__storage_, playlist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "unitScaling",
        .dataTypeSpecific.clazz = GPBObjCClass(Workspace_UnitScaling),
        .number = Workspace_FieldNumber_UnitScaling,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Workspace__storage_, unitScaling),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Effect),
        .number = Workspace_FieldNumber_EffectsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, effectsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "masksArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Mask),
        .number = Workspace_FieldNumber_MasksArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, masksArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "screensArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Screen),
        .number = Workspace_FieldNumber_ScreensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, screensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "edgeBlendsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(EdgeBlend),
        .number = Workspace_FieldNumber_EdgeBlendsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, edgeBlendsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "layersArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer),
        .number = Workspace_FieldNumber_LayersArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, layersArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "targetSetsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(TargetSet),
        .number = Workspace_FieldNumber_TargetSetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, targetSetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hotKeysArray",
        .dataTypeSpecific.clazz = GPBObjCClass(HotKey),
        .number = Workspace_FieldNumber_HotKeysArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, hotKeysArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "calendar",
        .dataTypeSpecific.clazz = GPBObjCClass(Calendar),
        .number = Workspace_FieldNumber_Calendar,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Workspace__storage_, calendar),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "alignmentGuidesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(AlignmentGuide),
        .number = Workspace_FieldNumber_AlignmentGuidesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Workspace__storage_, alignmentGuidesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "liveVideoPlaylist",
        .dataTypeSpecific.clazz = GPBObjCClass(LiveVideoPlaylist),
        .number = Workspace_FieldNumber_LiveVideoPlaylist,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Workspace__storage_, liveVideoPlaylist),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "outputPreviewDisplay",
        .dataTypeSpecific.clazz = GPBObjCClass(OutputDisplay),
        .number = Workspace_FieldNumber_OutputPreviewDisplay,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(Workspace__storage_, outputPreviewDisplay),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Workspace class]
                                     rootClass:[WorkspaceRoot class]
                                          file:WorkspaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Workspace__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Workspace_EditorBackground

@implementation Workspace_EditorBackground

@dynamic enabled;
@dynamic hasFrame, frame;
@dynamic hasURL, URL;
@dynamic opacity;

typedef struct Workspace_EditorBackground__storage_ {
  uint32_t _has_storage_[1];
  Graphics_Rect *frame;
  URL *URL;
  double opacity;
} Workspace_EditorBackground__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "enabled",
        .dataTypeSpecific.clazz = Nil,
        .number = Workspace_EditorBackground_FieldNumber_Enabled,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "frame",
        .dataTypeSpecific.clazz = GPBObjCClass(Graphics_Rect),
        .number = Workspace_EditorBackground_FieldNumber_Frame,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Workspace_EditorBackground__storage_, frame),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "URL",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = Workspace_EditorBackground_FieldNumber_URL,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Workspace_EditorBackground__storage_, URL),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "opacity",
        .dataTypeSpecific.clazz = Nil,
        .number = Workspace_EditorBackground_FieldNumber_Opacity,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Workspace_EditorBackground__storage_, opacity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Workspace_EditorBackground class]
                                     rootClass:[WorkspaceRoot class]
                                          file:WorkspaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Workspace_EditorBackground__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\003!!!\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Workspace)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Workspace_UnitScaling

@implementation Workspace_UnitScaling

@dynamic length;
@dynamic unit;
@dynamic points;

typedef struct Workspace_UnitScaling__storage_ {
  uint32_t _has_storage_[1];
  Workspace_UnitScaling_UnitType unit;
  double length;
  double points;
} Workspace_UnitScaling__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "length",
        .dataTypeSpecific.clazz = Nil,
        .number = Workspace_UnitScaling_FieldNumber_Length,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Workspace_UnitScaling__storage_, length),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "unit",
        .dataTypeSpecific.enumDescFunc = Workspace_UnitScaling_UnitType_EnumDescriptor,
        .number = Workspace_UnitScaling_FieldNumber_Unit,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Workspace_UnitScaling__storage_, unit),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "points",
        .dataTypeSpecific.clazz = Nil,
        .number = Workspace_UnitScaling_FieldNumber_Points,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Workspace_UnitScaling__storage_, points),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Workspace_UnitScaling class]
                                     rootClass:[WorkspaceRoot class]
                                          file:WorkspaceRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Workspace_UnitScaling__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Workspace)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Workspace_UnitScaling_Unit_RawValue(Workspace_UnitScaling *message) {
  GPBDescriptor *descriptor = [Workspace_UnitScaling descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Workspace_UnitScaling_FieldNumber_Unit];
  return GPBGetMessageRawEnumField(message, field);
}

void SetWorkspace_UnitScaling_Unit_RawValue(Workspace_UnitScaling *message, int32_t value) {
  GPBDescriptor *descriptor = [Workspace_UnitScaling descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Workspace_UnitScaling_FieldNumber_Unit];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Workspace_UnitScaling_UnitType

GPBEnumDescriptor *Workspace_UnitScaling_UnitType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "UnitTypePoints\000UnitTypeMillimeters\000UnitT"
        "ypeCentimeters\000UnitTypeMeters\000UnitTypeIn"
        "ches\000UnitTypeFeet\000";
    static const int32_t values[] = {
        Workspace_UnitScaling_UnitType_UnitTypePoints,
        Workspace_UnitScaling_UnitType_UnitTypeMillimeters,
        Workspace_UnitScaling_UnitType_UnitTypeCentimeters,
        Workspace_UnitScaling_UnitType_UnitTypeMeters,
        Workspace_UnitScaling_UnitType_UnitTypeInches,
        Workspace_UnitScaling_UnitType_UnitTypeFeet,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Workspace_UnitScaling_UnitType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Workspace_UnitScaling_UnitType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Workspace_UnitScaling_UnitType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Workspace_UnitScaling_UnitType_UnitTypePoints:
    case Workspace_UnitScaling_UnitType_UnitTypeMillimeters:
    case Workspace_UnitScaling_UnitType_UnitTypeCentimeters:
    case Workspace_UnitScaling_UnitType_UnitTypeMeters:
    case Workspace_UnitScaling_UnitType_UnitTypeInches:
    case Workspace_UnitScaling_UnitType_UnitTypeFeet:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
