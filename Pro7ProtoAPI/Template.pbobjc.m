// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: template.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Template.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "Slide.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ApplicationInfo);
GPBObjCClassDeclaration(Slide);
GPBObjCClassDeclaration(Template);
GPBObjCClassDeclaration(Template_Slide);
GPBObjCClassDeclaration(UUID);

#pragma mark - TemplateRoot

@implementation TemplateRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TemplateRoot_FileDescriptor

static GPBFileDescriptor *TemplateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Template

@implementation Template


typedef struct Template__storage_ {
  uint32_t _has_storage_[1];
} Template__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Template class]
                                     rootClass:[TemplateRoot class]
                                          file:TemplateRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Template__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Template_Slide

@implementation Template_Slide

@dynamic hasBaseSlide, baseSlide;
@dynamic name;

typedef struct Template_Slide__storage_ {
  uint32_t _has_storage_[1];
  Slide *baseSlide;
  NSString *name;
} Template_Slide__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseSlide",
        .dataTypeSpecific.clazz = GPBObjCClass(Slide),
        .number = Template_Slide_FieldNumber_BaseSlide,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Template_Slide__storage_, baseSlide),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Template_Slide_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Template_Slide__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Template_Slide class]
                                     rootClass:[TemplateRoot class]
                                          file:TemplateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Template_Slide__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Template)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Template_Document

@implementation Template_Document

@dynamic hasApplicationInfo, applicationInfo;
@dynamic slidesArray, slidesArray_Count;

typedef struct Template_Document__storage_ {
  uint32_t _has_storage_[1];
  ApplicationInfo *applicationInfo;
  NSMutableArray *slidesArray;
} Template_Document__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applicationInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ApplicationInfo),
        .number = Template_Document_FieldNumber_ApplicationInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Template_Document__storage_, applicationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "slidesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Template_Slide),
        .number = Template_Document_FieldNumber_SlidesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Template_Document__storage_, slidesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Template_Document class]
                                     rootClass:[TemplateRoot class]
                                          file:TemplateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Template_Document__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Template)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Template_Identification

@implementation Template_Identification

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic hasSlideUuid, slideUuid;
@dynamic slideName;
@dynamic slideIndex;

typedef struct Template_Identification__storage_ {
  uint32_t _has_storage_[1];
  uint32_t slideIndex;
  UUID *uuid;
  NSString *name;
  UUID *slideUuid;
  NSString *slideName;
} Template_Identification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Template_Identification_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Template_Identification__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Template_Identification_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Template_Identification__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "slideUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Template_Identification_FieldNumber_SlideUuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Template_Identification__storage_, slideUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "slideName",
        .dataTypeSpecific.clazz = Nil,
        .number = Template_Identification_FieldNumber_SlideName,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Template_Identification__storage_, slideName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "slideIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = Template_Identification_FieldNumber_SlideIndex,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Template_Identification__storage_, slideIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Template_Identification class]
                                     rootClass:[TemplateRoot class]
                                          file:TemplateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Template_Identification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Template)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
