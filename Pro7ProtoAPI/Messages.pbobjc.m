// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Messages.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "Template.pbobjc.h"
#import "Timers.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ApplicationInfo);
GPBObjCClassDeclaration(Clock_Format);
GPBObjCClassDeclaration(Message);
GPBObjCClassDeclaration(Message_Token);
GPBObjCClassDeclaration(Message_TokenValue);
GPBObjCClassDeclaration(Message_TokenValue_TokenValueClock);
GPBObjCClassDeclaration(Message_TokenValue_TokenValueText);
GPBObjCClassDeclaration(Message_TokenValue_TokenValueTimer);
GPBObjCClassDeclaration(Message_Token_TokenTypeClock);
GPBObjCClassDeclaration(Message_Token_TokenTypeText);
GPBObjCClassDeclaration(Message_Token_TokenTypeTimer);
GPBObjCClassDeclaration(Template_Identification);
GPBObjCClassDeclaration(Timer_Configuration);
GPBObjCClassDeclaration(Timer_Format);
GPBObjCClassDeclaration(UUID);

#pragma mark - MessagesRoot

@implementation MessagesRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessagesRoot_FileDescriptor

static GPBFileDescriptor *MessagesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Message

@implementation Message

@dynamic hasUuid, uuid;
@dynamic title;
@dynamic timeToRemove;
@dynamic visibleOnNetwork;
@dynamic hasTemplate_p, template_p;
@dynamic clearType;
@dynamic messageText;
@dynamic tokensArray, tokensArray_Count;
@dynamic tokenValuesArray, tokenValuesArray_Count;

typedef struct Message__storage_ {
  uint32_t _has_storage_[1];
  Message_ClearType clearType;
  UUID *uuid;
  NSString *title;
  Template_Identification *template_p;
  NSString *messageText;
  NSMutableArray *tokensArray;
  NSMutableArray *tokenValuesArray;
  double timeToRemove;
} Message__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Message_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "title",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_Title,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message__storage_, title),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timeToRemove",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_TimeToRemove,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Message__storage_, timeToRemove),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "visibleOnNetwork",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_VisibleOnNetwork,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "template_p",
        .dataTypeSpecific.clazz = GPBObjCClass(Template_Identification),
        .number = Message_FieldNumber_Template_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Message__storage_, template_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clearType",
        .dataTypeSpecific.enumDescFunc = Message_ClearType_EnumDescriptor,
        .number = Message_FieldNumber_ClearType,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Message__storage_, clearType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "messageText",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_FieldNumber_MessageText,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Message__storage_, messageText),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "tokensArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_Token),
        .number = Message_FieldNumber_TokensArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Message__storage_, tokensArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenValuesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_TokenValue),
        .number = Message_FieldNumber_TokenValuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Message__storage_, tokenValuesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Message_ClearType_RawValue(Message *message) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_ClearType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessage_ClearType_RawValue(Message *message, int32_t value) {
  GPBDescriptor *descriptor = [Message descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Message_FieldNumber_ClearType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Message_ClearType

GPBEnumDescriptor *Message_ClearType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ClearTypeManual\000ClearTypeAfterTime\000Clear"
        "TypeAfterTimers\000";
    static const int32_t values[] = {
        Message_ClearType_ClearTypeManual,
        Message_ClearType_ClearTypeAfterTime,
        Message_ClearType_ClearTypeAfterTimers,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Message_ClearType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Message_ClearType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Message_ClearType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Message_ClearType_ClearTypeManual:
    case Message_ClearType_ClearTypeAfterTime:
    case Message_ClearType_ClearTypeAfterTimers:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Message_Token

@implementation Message_Token

@dynamic tokenTypeOneOfCase;
@dynamic hasUuid, uuid;
@dynamic text;
@dynamic timer;
@dynamic clock;

typedef struct Message_Token__storage_ {
  uint32_t _has_storage_[2];
  UUID *uuid;
  Message_Token_TokenTypeText *text;
  Message_Token_TokenTypeTimer *timer;
  Message_Token_TokenTypeClock *clock;
} Message_Token__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Message_Token_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message_Token__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_Token_TokenTypeText),
        .number = Message_Token_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message_Token__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timer",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_Token_TokenTypeTimer),
        .number = Message_Token_FieldNumber_Timer,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message_Token__storage_, timer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_Token_TokenTypeClock),
        .number = Message_Token_FieldNumber_Clock,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message_Token__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_Token class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message_Token__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "tokenType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Message_Token_ClearTokenTypeOneOfCase(Message_Token *message) {
  GPBDescriptor *descriptor = [Message_Token descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Message_Token_TokenTypeText

@implementation Message_Token_TokenTypeText

@dynamic name;

typedef struct Message_Token_TokenTypeText__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
} Message_Token_TokenTypeText__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_Token_TokenTypeText_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message_Token_TokenTypeText__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_Token_TokenTypeText class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message_Token_TokenTypeText__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message_Token)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message_Token_TokenTypeTimer

@implementation Message_Token_TokenTypeTimer

@dynamic name;
@dynamic hasTimerUuid, timerUuid;

typedef struct Message_Token_TokenTypeTimer__storage_ {
  uint32_t _has_storage_[1];
  NSString *name;
  UUID *timerUuid;
} Message_Token_TokenTypeTimer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_Token_TokenTypeTimer_FieldNumber_Name,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message_Token_TokenTypeTimer__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "timerUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Message_Token_TokenTypeTimer_FieldNumber_TimerUuid,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message_Token_TokenTypeTimer__storage_, timerUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_Token_TokenTypeTimer class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message_Token_TokenTypeTimer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message_Token)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message_Token_TokenTypeClock

@implementation Message_Token_TokenTypeClock


typedef struct Message_Token_TokenTypeClock__storage_ {
  uint32_t _has_storage_[1];
} Message_Token_TokenTypeClock__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_Token_TokenTypeClock class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Message_Token_TokenTypeClock__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message_Token)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message_TokenValue

@implementation Message_TokenValue

@dynamic tokenValueTypeOneOfCase;
@dynamic hasTokenId, tokenId;
@dynamic tokenName;
@dynamic text;
@dynamic timer;
@dynamic clock;

typedef struct Message_TokenValue__storage_ {
  uint32_t _has_storage_[2];
  UUID *tokenId;
  Message_TokenValue_TokenValueText *text;
  Message_TokenValue_TokenValueTimer *timer;
  Message_TokenValue_TokenValueClock *clock;
  NSString *tokenName;
} Message_TokenValue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tokenId",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Message_TokenValue_FieldNumber_TokenId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message_TokenValue__storage_, tokenId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "text",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_TokenValue_TokenValueText),
        .number = Message_TokenValue_FieldNumber_Text,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message_TokenValue__storage_, text),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timer",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_TokenValue_TokenValueTimer),
        .number = Message_TokenValue_FieldNumber_Timer,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message_TokenValue__storage_, timer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "clock",
        .dataTypeSpecific.clazz = GPBObjCClass(Message_TokenValue_TokenValueClock),
        .number = Message_TokenValue_FieldNumber_Clock,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Message_TokenValue__storage_, clock),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tokenName",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_TokenValue_FieldNumber_TokenName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message_TokenValue__storage_, tokenName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_TokenValue class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message_TokenValue__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "tokenValueType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Message_TokenValue_ClearTokenValueTypeOneOfCase(Message_TokenValue *message) {
  GPBDescriptor *descriptor = [Message_TokenValue descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Message_TokenValue_TokenValueText

@implementation Message_TokenValue_TokenValueText

@dynamic value;

typedef struct Message_TokenValue_TokenValueText__storage_ {
  uint32_t _has_storage_[1];
  NSString *value;
} Message_TokenValue_TokenValueText__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "value",
        .dataTypeSpecific.clazz = Nil,
        .number = Message_TokenValue_TokenValueText_FieldNumber_Value,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message_TokenValue_TokenValueText__storage_, value),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_TokenValue_TokenValueText class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message_TokenValue_TokenValueText__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message_TokenValue)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message_TokenValue_TokenValueTimer

@implementation Message_TokenValue_TokenValueTimer

@dynamic hasConfiguration, configuration;
@dynamic hasFormat, format;

typedef struct Message_TokenValue_TokenValueTimer__storage_ {
  uint32_t _has_storage_[1];
  Timer_Configuration *configuration;
  Timer_Format *format;
} Message_TokenValue_TokenValueTimer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "configuration",
        .dataTypeSpecific.clazz = GPBObjCClass(Timer_Configuration),
        .number = Message_TokenValue_TokenValueTimer_FieldNumber_Configuration,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message_TokenValue_TokenValueTimer__storage_, configuration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "format",
        .dataTypeSpecific.clazz = GPBObjCClass(Timer_Format),
        .number = Message_TokenValue_TokenValueTimer_FieldNumber_Format,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Message_TokenValue_TokenValueTimer__storage_, format),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_TokenValue_TokenValueTimer class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message_TokenValue_TokenValueTimer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message_TokenValue)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Message_TokenValue_TokenValueClock

@implementation Message_TokenValue_TokenValueClock

@dynamic hasFormat, format;

typedef struct Message_TokenValue_TokenValueClock__storage_ {
  uint32_t _has_storage_[1];
  Clock_Format *format;
} Message_TokenValue_TokenValueClock__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "format",
        .dataTypeSpecific.clazz = GPBObjCClass(Clock_Format),
        .number = Message_TokenValue_TokenValueClock_FieldNumber_Format,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Message_TokenValue_TokenValueClock__storage_, format),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Message_TokenValue_TokenValueClock class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Message_TokenValue_TokenValueClock__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Message_TokenValue)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageDocument

@implementation MessageDocument

@dynamic hasApplicationInfo, applicationInfo;
@dynamic messagesArray, messagesArray_Count;

typedef struct MessageDocument__storage_ {
  uint32_t _has_storage_[1];
  ApplicationInfo *applicationInfo;
  NSMutableArray *messagesArray;
} MessageDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applicationInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ApplicationInfo),
        .number = MessageDocument_FieldNumber_ApplicationInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageDocument__storage_, applicationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Message),
        .number = MessageDocument_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessageDocument__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageDocument class]
                                     rootClass:[MessagesRoot class]
                                          file:MessagesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageDocument__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
