// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dmxProfiles.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "DmxProfiles.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(DMXProfiles);
GPBObjCClassDeclaration(DMXProfiles_DMXProfile);
GPBObjCClassDeclaration(DMXProfiles_DMXProfile_ChannelMapping);
GPBObjCClassDeclaration(DMXProfiles_DMXProfile_Fixture);
GPBObjCClassDeclaration(DMXProfiles_DMXProfile_Profile);

#pragma mark - DmxProfilesRoot

@implementation DmxProfilesRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - DmxProfilesRoot_FileDescriptor

static GPBFileDescriptor *DmxProfilesRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - DMXProfiles

@implementation DMXProfiles

@dynamic hasWorkspaceProfile, workspaceProfile;
@dynamic layerProfilesArray, layerProfilesArray_Count;

typedef struct DMXProfiles__storage_ {
  uint32_t _has_storage_[1];
  DMXProfiles_DMXProfile *workspaceProfile;
  NSMutableArray *layerProfilesArray;
} DMXProfiles__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "workspaceProfile",
        .dataTypeSpecific.clazz = GPBObjCClass(DMXProfiles_DMXProfile),
        .number = DMXProfiles_FieldNumber_WorkspaceProfile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DMXProfiles__storage_, workspaceProfile),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "layerProfilesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DMXProfiles_DMXProfile),
        .number = DMXProfiles_FieldNumber_LayerProfilesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DMXProfiles__storage_, layerProfilesArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DMXProfiles class]
                                     rootClass:[DmxProfilesRoot class]
                                          file:DmxProfilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DMXProfiles__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\020\000\002\000layerProfiles\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DMXProfiles_DMXProfile

@implementation DMXProfiles_DMXProfile

@dynamic hasProfile, profile;
@dynamic hasFixture, fixture;
@dynamic isEnabled;
@dynamic customMappingsArray, customMappingsArray_Count;

typedef struct DMXProfiles_DMXProfile__storage_ {
  uint32_t _has_storage_[1];
  DMXProfiles_DMXProfile_Profile *profile;
  DMXProfiles_DMXProfile_Fixture *fixture;
  NSMutableArray *customMappingsArray;
} DMXProfiles_DMXProfile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "profile",
        .dataTypeSpecific.clazz = GPBObjCClass(DMXProfiles_DMXProfile_Profile),
        .number = DMXProfiles_DMXProfile_FieldNumber_Profile,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile__storage_, profile),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "fixture",
        .dataTypeSpecific.clazz = GPBObjCClass(DMXProfiles_DMXProfile_Fixture),
        .number = DMXProfiles_DMXProfile_FieldNumber_Fixture,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile__storage_, fixture),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = DMXProfiles_DMXProfile_FieldNumber_IsEnabled,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "customMappingsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(DMXProfiles_DMXProfile_ChannelMapping),
        .number = DMXProfiles_DMXProfile_FieldNumber_CustomMappingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile__storage_, customMappingsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DMXProfiles_DMXProfile class]
                                     rootClass:[DmxProfilesRoot class]
                                          file:DmxProfilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DMXProfiles_DMXProfile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\003\t\000\004\000customMappings\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DMXProfiles)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DMXProfiles_DMXProfile_Profile

@implementation DMXProfiles_DMXProfile_Profile

@dynamic startingChannelOneofOneOfCase;
@dynamic profileType;
@dynamic startingChannel;

typedef struct DMXProfiles_DMXProfile_Profile__storage_ {
  uint32_t _has_storage_[2];
  DMXProfiles_DMXProfile_Profile_ProfileType profileType;
  uint32_t startingChannel;
} DMXProfiles_DMXProfile_Profile__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "profileType",
        .dataTypeSpecific.enumDescFunc = DMXProfiles_DMXProfile_Profile_ProfileType_EnumDescriptor,
        .number = DMXProfiles_DMXProfile_Profile_FieldNumber_ProfileType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile_Profile__storage_, profileType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "startingChannel",
        .dataTypeSpecific.clazz = Nil,
        .number = DMXProfiles_DMXProfile_Profile_FieldNumber_StartingChannel,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile_Profile__storage_, startingChannel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DMXProfiles_DMXProfile_Profile class]
                                     rootClass:[DmxProfilesRoot class]
                                          file:DmxProfilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DMXProfiles_DMXProfile_Profile__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "startingChannelOneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\017\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DMXProfiles_DMXProfile)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DMXProfiles_DMXProfile_Profile_ProfileType_RawValue(DMXProfiles_DMXProfile_Profile *message) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_Profile descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DMXProfiles_DMXProfile_Profile_FieldNumber_ProfileType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetDMXProfiles_DMXProfile_Profile_ProfileType_RawValue(DMXProfiles_DMXProfile_Profile *message, int32_t value) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_Profile descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DMXProfiles_DMXProfile_Profile_FieldNumber_ProfileType];
  GPBSetMessageRawEnumField(message, field, value);
}

void DMXProfiles_DMXProfile_Profile_ClearStartingChannelOneofOneOfCase(DMXProfiles_DMXProfile_Profile *message) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_Profile descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum DMXProfiles_DMXProfile_Profile_ProfileType

GPBEnumDescriptor *DMXProfiles_DMXProfile_Profile_ProfileType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Basic\000Advanced\000Custom\000";
    static const int32_t values[] = {
        DMXProfiles_DMXProfile_Profile_ProfileType_Basic,
        DMXProfiles_DMXProfile_Profile_ProfileType_Advanced,
        DMXProfiles_DMXProfile_Profile_ProfileType_Custom,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DMXProfiles_DMXProfile_Profile_ProfileType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DMXProfiles_DMXProfile_Profile_ProfileType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DMXProfiles_DMXProfile_Profile_ProfileType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DMXProfiles_DMXProfile_Profile_ProfileType_Basic:
    case DMXProfiles_DMXProfile_Profile_ProfileType_Advanced:
    case DMXProfiles_DMXProfile_Profile_ProfileType_Custom:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DMXProfiles_DMXProfile_ChannelMapping

@implementation DMXProfiles_DMXProfile_ChannelMapping

@dynamic channelIndex;
@dynamic command;

typedef struct DMXProfiles_DMXProfile_ChannelMapping__storage_ {
  uint32_t _has_storage_[1];
  uint32_t channelIndex;
  DMXProfiles_DMXProfile_ChannelMapping_CommandType command;
} DMXProfiles_DMXProfile_ChannelMapping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = DMXProfiles_DMXProfile_ChannelMapping_FieldNumber_ChannelIndex,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile_ChannelMapping__storage_, channelIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeUInt32,
      },
      {
        .name = "command",
        .dataTypeSpecific.enumDescFunc = DMXProfiles_DMXProfile_ChannelMapping_CommandType_EnumDescriptor,
        .number = DMXProfiles_DMXProfile_ChannelMapping_FieldNumber_Command,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile_ChannelMapping__storage_, command),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DMXProfiles_DMXProfile_ChannelMapping class]
                                     rootClass:[DmxProfilesRoot class]
                                          file:DmxProfilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DMXProfiles_DMXProfile_ChannelMapping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\001\014\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DMXProfiles_DMXProfile)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DMXProfiles_DMXProfile_ChannelMapping_Command_RawValue(DMXProfiles_DMXProfile_ChannelMapping *message) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_ChannelMapping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DMXProfiles_DMXProfile_ChannelMapping_FieldNumber_Command];
  return GPBGetMessageRawEnumField(message, field);
}

void SetDMXProfiles_DMXProfile_ChannelMapping_Command_RawValue(DMXProfiles_DMXProfile_ChannelMapping *message, int32_t value) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_ChannelMapping descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DMXProfiles_DMXProfile_ChannelMapping_FieldNumber_Command];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum DMXProfiles_DMXProfile_ChannelMapping_CommandType

GPBEnumDescriptor *DMXProfiles_DMXProfile_ChannelMapping_CommandType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Opacity\000BlendMode\000SelectCue\000ControlType\000"
        "ControlValue\000TransitionDuration\000SelectPl"
        "aylist\000TargetedLayer\000";
    static const int32_t values[] = {
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_Opacity,
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_BlendMode,
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_SelectCue,
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_ControlType,
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_ControlValue,
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_TransitionDuration,
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_SelectPlaylist,
        DMXProfiles_DMXProfile_ChannelMapping_CommandType_TargetedLayer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DMXProfiles_DMXProfile_ChannelMapping_CommandType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DMXProfiles_DMXProfile_ChannelMapping_CommandType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DMXProfiles_DMXProfile_ChannelMapping_CommandType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_Opacity:
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_BlendMode:
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_SelectCue:
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_ControlType:
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_ControlValue:
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_TransitionDuration:
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_SelectPlaylist:
    case DMXProfiles_DMXProfile_ChannelMapping_CommandType_TargetedLayer:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - DMXProfiles_DMXProfile_Fixture

@implementation DMXProfiles_DMXProfile_Fixture

@dynamic layerIndexOneofOneOfCase;
@dynamic fixtureType;
@dynamic layerIndex;

typedef struct DMXProfiles_DMXProfile_Fixture__storage_ {
  uint32_t _has_storage_[2];
  DMXProfiles_DMXProfile_Fixture_FixtureType fixtureType;
  uint32_t layerIndex;
} DMXProfiles_DMXProfile_Fixture__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "fixtureType",
        .dataTypeSpecific.enumDescFunc = DMXProfiles_DMXProfile_Fixture_FixtureType_EnumDescriptor,
        .number = DMXProfiles_DMXProfile_Fixture_FieldNumber_FixtureType,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile_Fixture__storage_, fixtureType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "layerIndex",
        .dataTypeSpecific.clazz = Nil,
        .number = DMXProfiles_DMXProfile_Fixture_FieldNumber_LayerIndex,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DMXProfiles_DMXProfile_Fixture__storage_, layerIndex),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DMXProfiles_DMXProfile_Fixture class]
                                     rootClass:[DmxProfilesRoot class]
                                          file:DmxProfilesRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DMXProfiles_DMXProfile_Fixture__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "layerIndexOneof",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\002\001\013\000\002\n\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    [localDescriptor setupContainingMessageClass:GPBObjCClass(DMXProfiles_DMXProfile)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t DMXProfiles_DMXProfile_Fixture_FixtureType_RawValue(DMXProfiles_DMXProfile_Fixture *message) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_Fixture descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DMXProfiles_DMXProfile_Fixture_FieldNumber_FixtureType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetDMXProfiles_DMXProfile_Fixture_FixtureType_RawValue(DMXProfiles_DMXProfile_Fixture *message, int32_t value) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_Fixture descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:DMXProfiles_DMXProfile_Fixture_FieldNumber_FixtureType];
  GPBSetMessageRawEnumField(message, field, value);
}

void DMXProfiles_DMXProfile_Fixture_ClearLayerIndexOneofOneOfCase(DMXProfiles_DMXProfile_Fixture *message) {
  GPBDescriptor *descriptor = [DMXProfiles_DMXProfile_Fixture descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum DMXProfiles_DMXProfile_Fixture_FixtureType

GPBEnumDescriptor *DMXProfiles_DMXProfile_Fixture_FixtureType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Workspace\000Layer\000";
    static const int32_t values[] = {
        DMXProfiles_DMXProfile_Fixture_FixtureType_Workspace,
        DMXProfiles_DMXProfile_Fixture_FixtureType_Layer,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(DMXProfiles_DMXProfile_Fixture_FixtureType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:DMXProfiles_DMXProfile_Fixture_FixtureType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL DMXProfiles_DMXProfile_Fixture_FixtureType_IsValidValue(int32_t value__) {
  switch (value__) {
    case DMXProfiles_DMXProfile_Fixture_FixtureType_Workspace:
    case DMXProfiles_DMXProfile_Fixture_FixtureType_Layer:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
