// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

@class Action;
@class Color;
@class Cue;
@class HotKey;
@class MusicKeyScale;
@class PlanningCenterPlan;
@class PlanningCenterPlan_PlanItem;
@class Playlist;
@class PlaylistItem;
@class PlaylistItem_Header;
@class PlaylistItem_Placeholder;
@class PlaylistItem_PlanningCenter;
@class PlaylistItem_Presentation;
@class Playlist_FolderDirectory;
@class Playlist_PlaylistArray;
@class Playlist_PlaylistItems;
@class Playlist_StartupInfo;
@class URL;
@class UUID;

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum Playlist_Type

typedef GPB_ENUM(Playlist_Type) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Playlist_Type_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Playlist_Type_TypeUnknown = 0,
  Playlist_Type_TypePlaylist = 1,
  Playlist_Type_TypeGroup = 2,
  Playlist_Type_TypeSmart = 3,
  Playlist_Type_TypeRoot = 4,
};

GPBEnumDescriptor *Playlist_Type_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Playlist_Type_IsValidValue(int32_t value);

#pragma mark - Enum Playlist_TimingType

typedef GPB_ENUM(Playlist_TimingType) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Playlist_TimingType_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Playlist_TimingType_TimingTypeNone = 0,
  Playlist_TimingType_TimingTypeTimecode = 1,
  Playlist_TimingType_TimingTypeTimeOfDay = 2,
};

GPBEnumDescriptor *Playlist_TimingType_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Playlist_TimingType_IsValidValue(int32_t value);

#pragma mark - Enum Playlist_FolderDirectory_ImportBehavior

typedef GPB_ENUM(Playlist_FolderDirectory_ImportBehavior) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  Playlist_FolderDirectory_ImportBehavior_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  Playlist_FolderDirectory_ImportBehavior_ImportBehaviorBackground = 0,
  Playlist_FolderDirectory_ImportBehavior_ImportBehaviorForeground = 1,
};

GPBEnumDescriptor *Playlist_FolderDirectory_ImportBehavior_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL Playlist_FolderDirectory_ImportBehavior_IsValidValue(int32_t value);

#pragma mark - Enum PlaylistItem_Presentation_ContentDestination

typedef GPB_ENUM(PlaylistItem_Presentation_ContentDestination) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  PlaylistItem_Presentation_ContentDestination_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  PlaylistItem_Presentation_ContentDestination_ContentDestinationGlobal = 0,
  PlaylistItem_Presentation_ContentDestination_ContentDestinationAnnouncements = 1,
};

GPBEnumDescriptor *PlaylistItem_Presentation_ContentDestination_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL PlaylistItem_Presentation_ContentDestination_IsValidValue(int32_t value);

#pragma mark - PlaylistRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface PlaylistRoot : GPBRootObject
@end

#pragma mark - Playlist

typedef GPB_ENUM(Playlist_FieldNumber) {
  Playlist_FieldNumber_Uuid = 1,
  Playlist_FieldNumber_Name = 2,
  Playlist_FieldNumber_Type = 3,
  Playlist_FieldNumber_Expanded = 4,
  Playlist_FieldNumber_TargetedLayerUuid = 5,
  Playlist_FieldNumber_SmartDirectoryPath = 6,
  Playlist_FieldNumber_HotKey = 7,
  Playlist_FieldNumber_CuesArray = 8,
  Playlist_FieldNumber_ChildrenArray = 9,
  Playlist_FieldNumber_TimecodeEnabled = 10,
  Playlist_FieldNumber_Timing = 11,
  Playlist_FieldNumber_Playlists = 12,
  Playlist_FieldNumber_Items = 13,
  Playlist_FieldNumber_SmartDirectory = 14,
  Playlist_FieldNumber_PcoPlan = 15,
  Playlist_FieldNumber_StartupInfo = 16,
};

typedef GPB_ENUM(Playlist_ChildrenType_OneOfCase) {
  Playlist_ChildrenType_OneOfCase_GPBUnsetOneOfCase = 0,
  Playlist_ChildrenType_OneOfCase_Playlists = 12,
  Playlist_ChildrenType_OneOfCase_Items = 13,
};

typedef GPB_ENUM(Playlist_LinkData_OneOfCase) {
  Playlist_LinkData_OneOfCase_GPBUnsetOneOfCase = 0,
  Playlist_LinkData_OneOfCase_SmartDirectory = 14,
  Playlist_LinkData_OneOfCase_PcoPlan = 15,
};

GPB_FINAL @interface Playlist : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite) Playlist_Type type;

@property(nonatomic, readwrite) BOOL expanded;

@property(nonatomic, readwrite, strong, null_resettable) UUID *targetedLayerUuid;
/** Test to see if @c targetedLayerUuid has been set. */
@property(nonatomic, readwrite) BOOL hasTargetedLayerUuid;

@property(nonatomic, readwrite, strong, null_resettable) URL *smartDirectoryPath;
/** Test to see if @c smartDirectoryPath has been set. */
@property(nonatomic, readwrite) BOOL hasSmartDirectoryPath;

@property(nonatomic, readwrite, strong, null_resettable) HotKey *hotKey;
/** Test to see if @c hotKey has been set. */
@property(nonatomic, readwrite) BOOL hasHotKey;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Cue*> *cuesArray;
/** The number of items in @c cuesArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger cuesArray_Count;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Playlist*> *childrenArray;
/** The number of items in @c childrenArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger childrenArray_Count;

@property(nonatomic, readwrite) BOOL timecodeEnabled;

@property(nonatomic, readwrite) Playlist_TimingType timing;

@property(nonatomic, readwrite, strong, null_resettable) Playlist_StartupInfo *startupInfo;
/** Test to see if @c startupInfo has been set. */
@property(nonatomic, readwrite) BOOL hasStartupInfo;

@property(nonatomic, readonly) Playlist_ChildrenType_OneOfCase childrenTypeOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Playlist_PlaylistArray *playlists;

@property(nonatomic, readwrite, strong, null_resettable) Playlist_PlaylistItems *items;

@property(nonatomic, readonly) Playlist_LinkData_OneOfCase linkDataOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) Playlist_FolderDirectory *smartDirectory;

@property(nonatomic, readwrite, strong, null_resettable) PlanningCenterPlan *pcoPlan;

@end

/**
 * Fetches the raw value of a @c Playlist's @c type property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Playlist_Type_RawValue(Playlist *message);
/**
 * Sets the raw value of an @c Playlist's @c type property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPlaylist_Type_RawValue(Playlist *message, int32_t value);

/**
 * Fetches the raw value of a @c Playlist's @c timing property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Playlist_Timing_RawValue(Playlist *message);
/**
 * Sets the raw value of an @c Playlist's @c timing property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPlaylist_Timing_RawValue(Playlist *message, int32_t value);

/**
 * Clears whatever value was set for the oneof 'childrenType'.
 **/
void Playlist_ClearChildrenTypeOneOfCase(Playlist *message);
/**
 * Clears whatever value was set for the oneof 'linkData'.
 **/
void Playlist_ClearLinkDataOneOfCase(Playlist *message);

#pragma mark - Playlist_PlaylistArray

typedef GPB_ENUM(Playlist_PlaylistArray_FieldNumber) {
  Playlist_PlaylistArray_FieldNumber_PlaylistsArray = 1,
};

GPB_FINAL @interface Playlist_PlaylistArray : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Playlist*> *playlistsArray;
/** The number of items in @c playlistsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger playlistsArray_Count;

@end

#pragma mark - Playlist_PlaylistItems

typedef GPB_ENUM(Playlist_PlaylistItems_FieldNumber) {
  Playlist_PlaylistItems_FieldNumber_ItemsArray = 1,
};

GPB_FINAL @interface Playlist_PlaylistItems : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<PlaylistItem*> *itemsArray;
/** The number of items in @c itemsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger itemsArray_Count;

@end

#pragma mark - Playlist_FolderDirectory

typedef GPB_ENUM(Playlist_FolderDirectory_FieldNumber) {
  Playlist_FolderDirectory_FieldNumber_SmartDirectory = 1,
  Playlist_FolderDirectory_FieldNumber_ImportBehavior = 2,
};

GPB_FINAL @interface Playlist_FolderDirectory : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) URL *smartDirectory;
/** Test to see if @c smartDirectory has been set. */
@property(nonatomic, readwrite) BOOL hasSmartDirectory;

@property(nonatomic, readwrite) Playlist_FolderDirectory_ImportBehavior importBehavior;

@end

/**
 * Fetches the raw value of a @c Playlist_FolderDirectory's @c importBehavior property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t Playlist_FolderDirectory_ImportBehavior_RawValue(Playlist_FolderDirectory *message);
/**
 * Sets the raw value of an @c Playlist_FolderDirectory's @c importBehavior property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPlaylist_FolderDirectory_ImportBehavior_RawValue(Playlist_FolderDirectory *message, int32_t value);

#pragma mark - Playlist_Tag

typedef GPB_ENUM(Playlist_Tag_FieldNumber) {
  Playlist_Tag_FieldNumber_Color = 1,
  Playlist_Tag_FieldNumber_Name = 2,
  Playlist_Tag_FieldNumber_Uuid = 3,
};

GPB_FINAL @interface Playlist_Tag : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Color *color;
/** Test to see if @c color has been set. */
@property(nonatomic, readwrite) BOOL hasColor;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@end

#pragma mark - Playlist_StartupInfo

typedef GPB_ENUM(Playlist_StartupInfo_FieldNumber) {
  Playlist_StartupInfo_FieldNumber_TriggerOnStartup = 1,
};

GPB_FINAL @interface Playlist_StartupInfo : GPBMessage

@property(nonatomic, readwrite) BOOL triggerOnStartup;

@end

#pragma mark - PlaylistItem

typedef GPB_ENUM(PlaylistItem_FieldNumber) {
  PlaylistItem_FieldNumber_Uuid = 1,
  PlaylistItem_FieldNumber_Name = 2,
  PlaylistItem_FieldNumber_Header = 3,
  PlaylistItem_FieldNumber_Presentation = 4,
  PlaylistItem_FieldNumber_Cue = 5,
  PlaylistItem_FieldNumber_PlanningCenter = 6,
  PlaylistItem_FieldNumber_TagsArray = 7,
  PlaylistItem_FieldNumber_Placeholder = 8,
  PlaylistItem_FieldNumber_IsHidden = 9,
};

typedef GPB_ENUM(PlaylistItem_ItemType_OneOfCase) {
  PlaylistItem_ItemType_OneOfCase_GPBUnsetOneOfCase = 0,
  PlaylistItem_ItemType_OneOfCase_Header = 3,
  PlaylistItem_ItemType_OneOfCase_Presentation = 4,
  PlaylistItem_ItemType_OneOfCase_Cue = 5,
  PlaylistItem_ItemType_OneOfCase_PlanningCenter = 6,
  PlaylistItem_ItemType_OneOfCase_Placeholder = 8,
};

GPB_FINAL @interface PlaylistItem : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) UUID *uuid;
/** Test to see if @c uuid has been set. */
@property(nonatomic, readwrite) BOOL hasUuid;

@property(nonatomic, readwrite, copy, null_resettable) NSString *name;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<UUID*> *tagsArray;
/** The number of items in @c tagsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger tagsArray_Count;

@property(nonatomic, readwrite) BOOL isHidden;

@property(nonatomic, readonly) PlaylistItem_ItemType_OneOfCase itemTypeOneOfCase;

@property(nonatomic, readwrite, strong, null_resettable) PlaylistItem_Header *header;

@property(nonatomic, readwrite, strong, null_resettable) PlaylistItem_Presentation *presentation;

@property(nonatomic, readwrite, strong, null_resettable) Cue *cue;

@property(nonatomic, readwrite, strong, null_resettable) PlaylistItem_PlanningCenter *planningCenter;

@property(nonatomic, readwrite, strong, null_resettable) PlaylistItem_Placeholder *placeholder;

@end

/**
 * Clears whatever value was set for the oneof 'itemType'.
 **/
void PlaylistItem_ClearItemTypeOneOfCase(PlaylistItem *message);

#pragma mark - PlaylistItem_Header

typedef GPB_ENUM(PlaylistItem_Header_FieldNumber) {
  PlaylistItem_Header_FieldNumber_Color = 1,
  PlaylistItem_Header_FieldNumber_ActionsArray = 2,
};

GPB_FINAL @interface PlaylistItem_Header : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) Color *color;
/** Test to see if @c color has been set. */
@property(nonatomic, readwrite) BOOL hasColor;

@property(nonatomic, readwrite, strong, null_resettable) NSMutableArray<Action*> *actionsArray;
/** The number of items in @c actionsArray without causing the array to be created. */
@property(nonatomic, readonly) NSUInteger actionsArray_Count;

@end

#pragma mark - PlaylistItem_Presentation

typedef GPB_ENUM(PlaylistItem_Presentation_FieldNumber) {
  PlaylistItem_Presentation_FieldNumber_DocumentPath = 1,
  PlaylistItem_Presentation_FieldNumber_Arrangement = 2,
  PlaylistItem_Presentation_FieldNumber_ContentDestination = 3,
  PlaylistItem_Presentation_FieldNumber_UserMusicKey = 4,
};

GPB_FINAL @interface PlaylistItem_Presentation : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) URL *documentPath;
/** Test to see if @c documentPath has been set. */
@property(nonatomic, readwrite) BOOL hasDocumentPath;

@property(nonatomic, readwrite, strong, null_resettable) UUID *arrangement;
/** Test to see if @c arrangement has been set. */
@property(nonatomic, readwrite) BOOL hasArrangement;

@property(nonatomic, readwrite) PlaylistItem_Presentation_ContentDestination contentDestination;

@property(nonatomic, readwrite, strong, null_resettable) MusicKeyScale *userMusicKey;
/** Test to see if @c userMusicKey has been set. */
@property(nonatomic, readwrite) BOOL hasUserMusicKey;

@end

/**
 * Fetches the raw value of a @c PlaylistItem_Presentation's @c contentDestination property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t PlaylistItem_Presentation_ContentDestination_RawValue(PlaylistItem_Presentation *message);
/**
 * Sets the raw value of an @c PlaylistItem_Presentation's @c contentDestination property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetPlaylistItem_Presentation_ContentDestination_RawValue(PlaylistItem_Presentation *message, int32_t value);

#pragma mark - PlaylistItem_PlanningCenter

typedef GPB_ENUM(PlaylistItem_PlanningCenter_FieldNumber) {
  PlaylistItem_PlanningCenter_FieldNumber_Item = 1,
  PlaylistItem_PlanningCenter_FieldNumber_LinkedData = 2,
};

GPB_FINAL @interface PlaylistItem_PlanningCenter : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PlanningCenterPlan_PlanItem *item;
/** Test to see if @c item has been set. */
@property(nonatomic, readwrite) BOOL hasItem;

@property(nonatomic, readwrite, strong, null_resettable) PlaylistItem *linkedData;
/** Test to see if @c linkedData has been set. */
@property(nonatomic, readwrite) BOOL hasLinkedData;

@end

#pragma mark - PlaylistItem_Placeholder

typedef GPB_ENUM(PlaylistItem_Placeholder_FieldNumber) {
  PlaylistItem_Placeholder_FieldNumber_LinkedData = 1,
};

GPB_FINAL @interface PlaylistItem_Placeholder : GPBMessage

@property(nonatomic, readwrite, strong, null_resettable) PlaylistItem *linkedData;
/** Test to see if @c linkedData has been set. */
@property(nonatomic, readwrite) BOOL hasLinkedData;

@end

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
