// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: keymapping.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Keymapping.pbobjc.h"
#import "BasicTypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ApplicationInfo);
GPBObjCClassDeclaration(CollectionElementType);
GPBObjCClassDeclaration(KeyMapping);
GPBObjCClassDeclaration(KeyMapping_ComputerKeyboard);
GPBObjCClassDeclaration(KeyMapping_MIDIKeyboard);

#pragma mark - KeymappingRoot

@implementation KeymappingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - KeymappingRoot_FileDescriptor

static GPBFileDescriptor *KeymappingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - KeyMapping

@implementation KeyMapping

@dynamic targetIdentifierOneOfCase;
@dynamic hasKeyboard, keyboard;
@dynamic hasMidi, midi;
@dynamic menuItem;
@dynamic clearGroupIdentifier;
@dynamic cueIdentifier;
@dynamic groupIdentifier;
@dynamic macroIdentifier;
@dynamic propIdentifier;
@dynamic timerIdentifier;

typedef struct KeyMapping__storage_ {
  uint32_t _has_storage_[2];
  KeyMapping_ComputerKeyboard *keyboard;
  KeyMapping_MIDIKeyboard *midi;
  NSString *menuItem;
  CollectionElementType *clearGroupIdentifier;
  CollectionElementType *cueIdentifier;
  CollectionElementType *groupIdentifier;
  CollectionElementType *macroIdentifier;
  CollectionElementType *propIdentifier;
  CollectionElementType *timerIdentifier;
} KeyMapping__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyboard",
        .dataTypeSpecific.clazz = GPBObjCClass(KeyMapping_ComputerKeyboard),
        .number = KeyMapping_FieldNumber_Keyboard,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, keyboard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "midi",
        .dataTypeSpecific.clazz = GPBObjCClass(KeyMapping_MIDIKeyboard),
        .number = KeyMapping_FieldNumber_Midi,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, midi),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "menuItem",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyMapping_FieldNumber_MenuItem,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, menuItem),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "clearGroupIdentifier",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = KeyMapping_FieldNumber_ClearGroupIdentifier,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, clearGroupIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cueIdentifier",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = KeyMapping_FieldNumber_CueIdentifier,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, cueIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "groupIdentifier",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = KeyMapping_FieldNumber_GroupIdentifier,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, groupIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "macroIdentifier",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = KeyMapping_FieldNumber_MacroIdentifier,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, macroIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "propIdentifier",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = KeyMapping_FieldNumber_PropIdentifier,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, propIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timerIdentifier",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = KeyMapping_FieldNumber_TimerIdentifier,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(KeyMapping__storage_, timerIdentifier),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyMapping class]
                                     rootClass:[KeymappingRoot class]
                                          file:KeymappingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyMapping__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "targetIdentifier",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void KeyMapping_ClearTargetIdentifierOneOfCase(KeyMapping *message) {
  GPBDescriptor *descriptor = [KeyMapping descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - KeyMapping_ComputerKeyboard

@implementation KeyMapping_ComputerKeyboard

@dynamic keyEquivalent;
@dynamic keyEquivalentModifierFlagsArray, keyEquivalentModifierFlagsArray_Count;

typedef struct KeyMapping_ComputerKeyboard__storage_ {
  uint32_t _has_storage_[1];
  NSString *keyEquivalent;
  GPBEnumArray *keyEquivalentModifierFlagsArray;
} KeyMapping_ComputerKeyboard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "keyEquivalent",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyMapping_ComputerKeyboard_FieldNumber_KeyEquivalent,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyMapping_ComputerKeyboard__storage_, keyEquivalent),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "keyEquivalentModifierFlagsArray",
        .dataTypeSpecific.enumDescFunc = KeyMapping_ComputerKeyboard_ModifierFlags_EnumDescriptor,
        .number = KeyMapping_ComputerKeyboard_FieldNumber_KeyEquivalentModifierFlagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KeyMapping_ComputerKeyboard__storage_, keyEquivalentModifierFlagsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked | GPBFieldHasEnumDescriptor),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyMapping_ComputerKeyboard class]
                                     rootClass:[KeymappingRoot class]
                                          file:KeymappingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyMapping_ComputerKeyboard__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(KeyMapping)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Enum KeyMapping_ComputerKeyboard_ModifierFlags

GPBEnumDescriptor *KeyMapping_ComputerKeyboard_ModifierFlags_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ModifierflagsCommandKey\000ModifierflagsShi"
        "ftKey\000ModifierflagsOptionKey\000Modifierfla"
        "gsControlKey\000ModifierflagsFunctionKey\000";
    static const int32_t values[] = {
        KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsCommandKey,
        KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsShiftKey,
        KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsOptionKey,
        KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsControlKey,
        KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsFunctionKey,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(KeyMapping_ComputerKeyboard_ModifierFlags)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:KeyMapping_ComputerKeyboard_ModifierFlags_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL KeyMapping_ComputerKeyboard_ModifierFlags_IsValidValue(int32_t value__) {
  switch (value__) {
    case KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsCommandKey:
    case KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsShiftKey:
    case KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsOptionKey:
    case KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsControlKey:
    case KeyMapping_ComputerKeyboard_ModifierFlags_ModifierflagsFunctionKey:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - KeyMapping_MIDIKeyboard

@implementation KeyMapping_MIDIKeyboard

@dynamic channel;
@dynamic pitch;
@dynamic velocity;

typedef struct KeyMapping_MIDIKeyboard__storage_ {
  uint32_t _has_storage_[1];
  int32_t channel;
  int32_t pitch;
  int32_t velocity;
} KeyMapping_MIDIKeyboard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channel",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyMapping_MIDIKeyboard_FieldNumber_Channel,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyMapping_MIDIKeyboard__storage_, channel),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "pitch",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyMapping_MIDIKeyboard_FieldNumber_Pitch,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(KeyMapping_MIDIKeyboard__storage_, pitch),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
      {
        .name = "velocity",
        .dataTypeSpecific.clazz = Nil,
        .number = KeyMapping_MIDIKeyboard_FieldNumber_Velocity,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(KeyMapping_MIDIKeyboard__storage_, velocity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyMapping_MIDIKeyboard class]
                                     rootClass:[KeymappingRoot class]
                                          file:KeymappingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyMapping_MIDIKeyboard__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(KeyMapping)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - KeyMappingDocument

@implementation KeyMappingDocument

@dynamic hasApplicationInfo, applicationInfo;
@dynamic keymappingsArray, keymappingsArray_Count;
@dynamic macosKeymappingsArray, macosKeymappingsArray_Count;
@dynamic windowsKeymappingsArray, windowsKeymappingsArray_Count;

typedef struct KeyMappingDocument__storage_ {
  uint32_t _has_storage_[1];
  ApplicationInfo *applicationInfo;
  NSMutableArray *keymappingsArray;
  NSMutableArray *macosKeymappingsArray;
  NSMutableArray *windowsKeymappingsArray;
} KeyMappingDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applicationInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ApplicationInfo),
        .number = KeyMappingDocument_FieldNumber_ApplicationInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(KeyMappingDocument__storage_, applicationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "keymappingsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(KeyMapping),
        .number = KeyMappingDocument_FieldNumber_KeymappingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KeyMappingDocument__storage_, keymappingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "macosKeymappingsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(KeyMapping),
        .number = KeyMappingDocument_FieldNumber_MacosKeymappingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KeyMappingDocument__storage_, macosKeymappingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "windowsKeymappingsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(KeyMapping),
        .number = KeyMappingDocument_FieldNumber_WindowsKeymappingsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(KeyMappingDocument__storage_, windowsKeymappingsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[KeyMappingDocument class]
                                     rootClass:[KeymappingRoot class]
                                          file:KeymappingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(KeyMappingDocument__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
