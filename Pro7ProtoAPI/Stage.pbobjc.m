// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stage.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "Stage.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "Slide.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ApplicationInfo);
GPBObjCClassDeclaration(CollectionElementType);
GPBObjCClassDeclaration(Slide);
GPBObjCClassDeclaration(Stage);
GPBObjCClassDeclaration(Stage_Layout);
GPBObjCClassDeclaration(UUID);

#pragma mark - StageRoot

@implementation StageRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - StageRoot_FileDescriptor

static GPBFileDescriptor *StageRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Stage

@implementation Stage


typedef struct Stage__storage_ {
  uint32_t _has_storage_[1];
} Stage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Stage class]
                                     rootClass:[StageRoot class]
                                          file:StageRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Stage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Stage_Layout

@implementation Stage_Layout

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic hasSlide, slide;

typedef struct Stage_Layout__storage_ {
  uint32_t _has_storage_[1];
  UUID *uuid;
  NSString *name;
  Slide *slide;
} Stage_Layout__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Stage_Layout_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Stage_Layout__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Stage_Layout_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Stage_Layout__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "slide",
        .dataTypeSpecific.clazz = GPBObjCClass(Slide),
        .number = Stage_Layout_FieldNumber_Slide,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Stage_Layout__storage_, slide),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Stage_Layout class]
                                     rootClass:[StageRoot class]
                                          file:StageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Stage_Layout__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Stage)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Stage_Document

@implementation Stage_Document

@dynamic hasApplicationInfo, applicationInfo;
@dynamic layoutsArray, layoutsArray_Count;

typedef struct Stage_Document__storage_ {
  uint32_t _has_storage_[1];
  ApplicationInfo *applicationInfo;
  NSMutableArray *layoutsArray;
} Stage_Document__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applicationInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ApplicationInfo),
        .number = Stage_Document_FieldNumber_ApplicationInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Stage_Document__storage_, applicationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "layoutsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Stage_Layout),
        .number = Stage_Document_FieldNumber_LayoutsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Stage_Document__storage_, layoutsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Stage_Document class]
                                     rootClass:[StageRoot class]
                                          file:StageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Stage_Document__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Stage)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Stage_ScreenAssignment

@implementation Stage_ScreenAssignment

@dynamic hasScreen, screen;
@dynamic hasLayout, layout;

typedef struct Stage_ScreenAssignment__storage_ {
  uint32_t _has_storage_[1];
  CollectionElementType *screen;
  CollectionElementType *layout;
} Stage_ScreenAssignment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "screen",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = Stage_ScreenAssignment_FieldNumber_Screen,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Stage_ScreenAssignment__storage_, screen),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "layout",
        .dataTypeSpecific.clazz = GPBObjCClass(CollectionElementType),
        .number = Stage_ScreenAssignment_FieldNumber_Layout,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Stage_ScreenAssignment__storage_, layout),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Stage_ScreenAssignment class]
                                     rootClass:[StageRoot class]
                                          file:StageRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Stage_ScreenAssignment__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Stage)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
