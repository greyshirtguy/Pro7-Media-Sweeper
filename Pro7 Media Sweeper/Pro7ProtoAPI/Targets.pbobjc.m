// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: targets.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Targets.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "GraphicsData.pbobjc.h"
#import "TestPattern.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Color);
GPBObjCClassDeclaration(Graphics_Element);
GPBObjCClassDeclaration(Graphics_Rect);
GPBObjCClassDeclaration(Graphics_Size);
GPBObjCClassDeclaration(Media);
GPBObjCClassDeclaration(Target);
GPBObjCClassDeclaration(TestPattern);
GPBObjCClassDeclaration(URL);
GPBObjCClassDeclaration(UUID);

#pragma mark - TargetsRoot

@implementation TargetsRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - TargetsRoot_FileDescriptor

static GPBFileDescriptor *TargetsRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - TargetSet

@implementation TargetSet

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic hasColor, color;
@dynamic hasTestImagePath, testImagePath;
@dynamic hasSourceSize, sourceSize;
@dynamic targetsArray, targetsArray_Count;
@dynamic hasTestPattern, testPattern;

typedef struct TargetSet__storage_ {
  uint32_t _has_storage_[1];
  UUID *uuid;
  NSString *name;
  Color *color;
  URL *testImagePath;
  Graphics_Size *sourceSize;
  NSMutableArray *targetsArray;
  TestPattern *testPattern;
} TargetSet__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = TargetSet_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(TargetSet__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = TargetSet_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(TargetSet__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "color",
        .dataTypeSpecific.clazz = GPBObjCClass(Color),
        .number = TargetSet_FieldNumber_Color,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TargetSet__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "testImagePath",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = TargetSet_FieldNumber_TestImagePath,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TargetSet__storage_, testImagePath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sourceSize",
        .dataTypeSpecific.clazz = GPBObjCClass(Graphics_Size),
        .number = TargetSet_FieldNumber_SourceSize,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(TargetSet__storage_, sourceSize),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "targetsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Target),
        .number = TargetSet_FieldNumber_TargetsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(TargetSet__storage_, targetsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "testPattern",
        .dataTypeSpecific.clazz = GPBObjCClass(TestPattern),
        .number = TargetSet_FieldNumber_TestPattern,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(TargetSet__storage_, testPattern),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TargetSet class]
                                     rootClass:[TargetsRoot class]
                                          file:TargetsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TargetSet__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Target

@implementation Target

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic hasSourceUnitRect, sourceUnitRect;
@dynamic hasTestImageFill, testImageFill;
@dynamic hasShape, shape;
@dynamic flipMode;

typedef struct Target__storage_ {
  uint32_t _has_storage_[1];
  Target_FlipMode flipMode;
  UUID *uuid;
  NSString *name;
  Graphics_Rect *sourceUnitRect;
  Media *testImageFill;
  Graphics_Element *shape;
} Target__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Target_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Target__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Target_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Target__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sourceUnitRect",
        .dataTypeSpecific.clazz = GPBObjCClass(Graphics_Rect),
        .number = Target_FieldNumber_SourceUnitRect,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Target__storage_, sourceUnitRect),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "testImageFill",
        .dataTypeSpecific.clazz = GPBObjCClass(Media),
        .number = Target_FieldNumber_TestImageFill,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Target__storage_, testImageFill),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "shape",
        .dataTypeSpecific.clazz = GPBObjCClass(Graphics_Element),
        .number = Target_FieldNumber_Shape,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Target__storage_, shape),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "flipMode",
        .dataTypeSpecific.enumDescFunc = Target_FlipMode_EnumDescriptor,
        .number = Target_FieldNumber_FlipMode,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Target__storage_, flipMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Target class]
                                     rootClass:[TargetsRoot class]
                                          file:TargetsRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Target__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\006\010\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Target_FlipMode_RawValue(Target *message) {
  GPBDescriptor *descriptor = [Target descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Target_FieldNumber_FlipMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetTarget_FlipMode_RawValue(Target *message, int32_t value) {
  GPBDescriptor *descriptor = [Target descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Target_FieldNumber_FlipMode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Target_FlipMode

GPBEnumDescriptor *Target_FlipMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "FlipModeNone\000FlipModeVertical\000FlipModeHo"
        "rizontal\000FlipModeBoth\000";
    static const int32_t values[] = {
        Target_FlipMode_FlipModeNone,
        Target_FlipMode_FlipModeVertical,
        Target_FlipMode_FlipModeHorizontal,
        Target_FlipMode_FlipModeBoth,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Target_FlipMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Target_FlipMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Target_FlipMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Target_FlipMode_FlipModeNone:
    case Target_FlipMode_FlipModeVertical:
    case Target_FlipMode_FlipModeHorizontal:
    case Target_FlipMode_FlipModeBoth:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
