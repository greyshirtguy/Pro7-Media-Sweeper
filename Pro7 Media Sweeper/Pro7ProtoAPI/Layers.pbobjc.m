// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: layers.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Layers.pbobjc.h"
#import "HotKey.pbobjc.h"
#import "Effects.pbobjc.h"
#import "BasicTypes.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Color);
GPBObjCClassDeclaration(Effect);
GPBObjCClassDeclaration(HotKey);
GPBObjCClassDeclaration(Layer);
GPBObjCClassDeclaration(Layer_Blending);
GPBObjCClassDeclaration(Layer_Blending_Matte);
GPBObjCClassDeclaration(Layer_Blending_Matte_Alpha);
GPBObjCClassDeclaration(Layer_Blending_Matte_Luma);
GPBObjCClassDeclaration(Layer_Blending_Matte_White);
GPBObjCClassDeclaration(Layer_Blending_Standard);
GPBObjCClassDeclaration(Transition);
GPBObjCClassDeclaration(UUID);

#pragma mark - LayersRoot

@implementation LayersRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - LayersRoot_FileDescriptor

static GPBFileDescriptor *LayersRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Layer

@implementation Layer

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic hasColor, color;
@dynamic muted;
@dynamic hidden;
@dynamic blendMode;
@dynamic opacity;
@dynamic hasSelectedTargetSetUuid, selectedTargetSetUuid;
@dynamic hasEffectsPresetUuid, effectsPresetUuid;
@dynamic effectsBuildDuration;
@dynamic hasLayerPresetUuid, layerPresetUuid;
@dynamic hasHotKey, hotKey;
@dynamic hasTransition, transition;
@dynamic effectsArray, effectsArray_Count;
@dynamic hasBlend, blend;

typedef struct Layer__storage_ {
  uint32_t _has_storage_[1];
  Layer_BlendMode blendMode;
  UUID *uuid;
  NSString *name;
  Color *color;
  UUID *selectedTargetSetUuid;
  UUID *effectsPresetUuid;
  UUID *layerPresetUuid;
  HotKey *hotKey;
  Transition *transition;
  NSMutableArray *effectsArray;
  Layer_Blending *blend;
  double opacity;
  double effectsBuildDuration;
} Layer__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Layer_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Layer__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Layer__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "color",
        .dataTypeSpecific.clazz = GPBObjCClass(Color),
        .number = Layer_FieldNumber_Color,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Layer__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "muted",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_FieldNumber_Muted,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "hidden",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_FieldNumber_Hidden,
        .hasIndex = 5,
        .offset = 6,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "blendMode",
        .dataTypeSpecific.enumDescFunc = Layer_BlendMode_EnumDescriptor,
        .number = Layer_FieldNumber_BlendMode,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Layer__storage_, blendMode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "opacity",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_FieldNumber_Opacity,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Layer__storage_, opacity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "selectedTargetSetUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Layer_FieldNumber_SelectedTargetSetUuid,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Layer__storage_, selectedTargetSetUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectsPresetUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Layer_FieldNumber_EffectsPresetUuid,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Layer__storage_, effectsPresetUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectsBuildDuration",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_FieldNumber_EffectsBuildDuration,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Layer__storage_, effectsBuildDuration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
      {
        .name = "layerPresetUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Layer_FieldNumber_LayerPresetUuid,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(Layer__storage_, layerPresetUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hotKey",
        .dataTypeSpecific.clazz = GPBObjCClass(HotKey),
        .number = Layer_FieldNumber_HotKey,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(Layer__storage_, hotKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transition",
        .dataTypeSpecific.clazz = GPBObjCClass(Transition),
        .number = Layer_FieldNumber_Transition,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(Layer__storage_, transition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "effectsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Effect),
        .number = Layer_FieldNumber_EffectsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Layer__storage_, effectsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blend",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer_Blending),
        .number = Layer_FieldNumber_Blend,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(Layer__storage_, blend),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Layer__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Layer_BlendMode_RawValue(Layer *message) {
  GPBDescriptor *descriptor = [Layer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Layer_FieldNumber_BlendMode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetLayer_BlendMode_RawValue(Layer *message, int32_t value) {
  GPBDescriptor *descriptor = [Layer descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Layer_FieldNumber_BlendMode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Layer_BlendMode

GPBEnumDescriptor *Layer_BlendMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BlendModeNormal\000BlendModeDissolve\000BlendM"
        "odeDarken\000BlendModeMultiply\000BlendModeCol"
        "orBurn\000BlendModeLinearBurn\000BlendModeDark"
        "erColor\000BlendModeLighten\000BlendModeScreen"
        "\000BlendModeColorDodge\000BlendModeLinearDodg"
        "e\000BlendModeLighterColor\000BlendModeOverlay"
        "\000BlendModeSoftLight\000BlendModeHardLight\000B"
        "lendModeVividLight\000BlendModeLinearLight\000"
        "BlendModePinLight\000BlendModeHardMix\000Blend"
        "ModeDifference\000BlendModeExclusion\000BlendM"
        "odeSubtract\000BlendModeDivide\000BlendModeHue"
        "\000BlendModeSaturation\000BlendModeColor\000Blen"
        "dModeLuminosity\000";
    static const int32_t values[] = {
        Layer_BlendMode_BlendModeNormal,
        Layer_BlendMode_BlendModeDissolve,
        Layer_BlendMode_BlendModeDarken,
        Layer_BlendMode_BlendModeMultiply,
        Layer_BlendMode_BlendModeColorBurn,
        Layer_BlendMode_BlendModeLinearBurn,
        Layer_BlendMode_BlendModeDarkerColor,
        Layer_BlendMode_BlendModeLighten,
        Layer_BlendMode_BlendModeScreen,
        Layer_BlendMode_BlendModeColorDodge,
        Layer_BlendMode_BlendModeLinearDodge,
        Layer_BlendMode_BlendModeLighterColor,
        Layer_BlendMode_BlendModeOverlay,
        Layer_BlendMode_BlendModeSoftLight,
        Layer_BlendMode_BlendModeHardLight,
        Layer_BlendMode_BlendModeVividLight,
        Layer_BlendMode_BlendModeLinearLight,
        Layer_BlendMode_BlendModePinLight,
        Layer_BlendMode_BlendModeHardMix,
        Layer_BlendMode_BlendModeDifference,
        Layer_BlendMode_BlendModeExclusion,
        Layer_BlendMode_BlendModeSubtract,
        Layer_BlendMode_BlendModeDivide,
        Layer_BlendMode_BlendModeHue,
        Layer_BlendMode_BlendModeSaturation,
        Layer_BlendMode_BlendModeColor,
        Layer_BlendMode_BlendModeLuminosity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Layer_BlendMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Layer_BlendMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Layer_BlendMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Layer_BlendMode_BlendModeNormal:
    case Layer_BlendMode_BlendModeDissolve:
    case Layer_BlendMode_BlendModeDarken:
    case Layer_BlendMode_BlendModeMultiply:
    case Layer_BlendMode_BlendModeColorBurn:
    case Layer_BlendMode_BlendModeLinearBurn:
    case Layer_BlendMode_BlendModeDarkerColor:
    case Layer_BlendMode_BlendModeLighten:
    case Layer_BlendMode_BlendModeScreen:
    case Layer_BlendMode_BlendModeColorDodge:
    case Layer_BlendMode_BlendModeLinearDodge:
    case Layer_BlendMode_BlendModeLighterColor:
    case Layer_BlendMode_BlendModeOverlay:
    case Layer_BlendMode_BlendModeSoftLight:
    case Layer_BlendMode_BlendModeHardLight:
    case Layer_BlendMode_BlendModeVividLight:
    case Layer_BlendMode_BlendModeLinearLight:
    case Layer_BlendMode_BlendModePinLight:
    case Layer_BlendMode_BlendModeHardMix:
    case Layer_BlendMode_BlendModeDifference:
    case Layer_BlendMode_BlendModeExclusion:
    case Layer_BlendMode_BlendModeSubtract:
    case Layer_BlendMode_BlendModeDivide:
    case Layer_BlendMode_BlendModeHue:
    case Layer_BlendMode_BlendModeSaturation:
    case Layer_BlendMode_BlendModeColor:
    case Layer_BlendMode_BlendModeLuminosity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Layer_Preset

@implementation Layer_Preset

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic hasLayer, layer;

typedef struct Layer_Preset__storage_ {
  uint32_t _has_storage_[1];
  UUID *uuid;
  NSString *name;
  Layer *layer;
} Layer_Preset__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Layer_Preset_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Layer_Preset__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_Preset_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Layer_Preset__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "layer",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer),
        .number = Layer_Preset_FieldNumber_Layer,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Layer_Preset__storage_, layer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer_Preset class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Layer_Preset__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Layer)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Layer_Blending

@implementation Layer_Blending

@dynamic blendingTypeOneOfCase;
@dynamic standard;
@dynamic matte;

typedef struct Layer_Blending__storage_ {
  uint32_t _has_storage_[2];
  Layer_Blending_Standard *standard;
  Layer_Blending_Matte *matte;
} Layer_Blending__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "standard",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer_Blending_Standard),
        .number = Layer_Blending_FieldNumber_Standard,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Layer_Blending__storage_, standard),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "matte",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer_Blending_Matte),
        .number = Layer_Blending_FieldNumber_Matte,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Layer_Blending__storage_, matte),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer_Blending class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Layer_Blending__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "blendingType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Layer)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Layer_Blending_ClearBlendingTypeOneOfCase(Layer_Blending *message) {
  GPBDescriptor *descriptor = [Layer_Blending descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Layer_Blending_Standard

@implementation Layer_Blending_Standard

@dynamic mode;
@dynamic opacity;

typedef struct Layer_Blending_Standard__storage_ {
  uint32_t _has_storage_[1];
  Layer_Blending_Standard_BlendMode mode;
  double opacity;
} Layer_Blending_Standard__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mode",
        .dataTypeSpecific.enumDescFunc = Layer_Blending_Standard_BlendMode_EnumDescriptor,
        .number = Layer_Blending_Standard_FieldNumber_Mode,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Layer_Blending_Standard__storage_, mode),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "opacity",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_Blending_Standard_FieldNumber_Opacity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Layer_Blending_Standard__storage_, opacity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer_Blending_Standard class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Layer_Blending_Standard__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Layer_Blending)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Layer_Blending_Standard_Mode_RawValue(Layer_Blending_Standard *message) {
  GPBDescriptor *descriptor = [Layer_Blending_Standard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Layer_Blending_Standard_FieldNumber_Mode];
  return GPBGetMessageRawEnumField(message, field);
}

void SetLayer_Blending_Standard_Mode_RawValue(Layer_Blending_Standard *message, int32_t value) {
  GPBDescriptor *descriptor = [Layer_Blending_Standard descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Layer_Blending_Standard_FieldNumber_Mode];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Layer_Blending_Standard_BlendMode

GPBEnumDescriptor *Layer_Blending_Standard_BlendMode_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "BlendModeNormal\000BlendModeDissolve\000BlendM"
        "odeDarken\000BlendModeMultiply\000BlendModeCol"
        "orBurn\000BlendModeLinearBurn\000BlendModeDark"
        "erColor\000BlendModeLighten\000BlendModeScreen"
        "\000BlendModeColorDodge\000BlendModeLinearDodg"
        "e\000BlendModeLighterColor\000BlendModeOverlay"
        "\000BlendModeSoftLight\000BlendModeHardLight\000B"
        "lendModeVividLight\000BlendModeLinearLight\000"
        "BlendModePinLight\000BlendModeHardMix\000Blend"
        "ModeDifference\000BlendModeExclusion\000BlendM"
        "odeSubtract\000BlendModeDivide\000BlendModeHue"
        "\000BlendModeSaturation\000BlendModeColor\000Blen"
        "dModeLuminosity\000";
    static const int32_t values[] = {
        Layer_Blending_Standard_BlendMode_BlendModeNormal,
        Layer_Blending_Standard_BlendMode_BlendModeDissolve,
        Layer_Blending_Standard_BlendMode_BlendModeDarken,
        Layer_Blending_Standard_BlendMode_BlendModeMultiply,
        Layer_Blending_Standard_BlendMode_BlendModeColorBurn,
        Layer_Blending_Standard_BlendMode_BlendModeLinearBurn,
        Layer_Blending_Standard_BlendMode_BlendModeDarkerColor,
        Layer_Blending_Standard_BlendMode_BlendModeLighten,
        Layer_Blending_Standard_BlendMode_BlendModeScreen,
        Layer_Blending_Standard_BlendMode_BlendModeColorDodge,
        Layer_Blending_Standard_BlendMode_BlendModeLinearDodge,
        Layer_Blending_Standard_BlendMode_BlendModeLighterColor,
        Layer_Blending_Standard_BlendMode_BlendModeOverlay,
        Layer_Blending_Standard_BlendMode_BlendModeSoftLight,
        Layer_Blending_Standard_BlendMode_BlendModeHardLight,
        Layer_Blending_Standard_BlendMode_BlendModeVividLight,
        Layer_Blending_Standard_BlendMode_BlendModeLinearLight,
        Layer_Blending_Standard_BlendMode_BlendModePinLight,
        Layer_Blending_Standard_BlendMode_BlendModeHardMix,
        Layer_Blending_Standard_BlendMode_BlendModeDifference,
        Layer_Blending_Standard_BlendMode_BlendModeExclusion,
        Layer_Blending_Standard_BlendMode_BlendModeSubtract,
        Layer_Blending_Standard_BlendMode_BlendModeDivide,
        Layer_Blending_Standard_BlendMode_BlendModeHue,
        Layer_Blending_Standard_BlendMode_BlendModeSaturation,
        Layer_Blending_Standard_BlendMode_BlendModeColor,
        Layer_Blending_Standard_BlendMode_BlendModeLuminosity,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Layer_Blending_Standard_BlendMode)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Layer_Blending_Standard_BlendMode_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Layer_Blending_Standard_BlendMode_IsValidValue(int32_t value__) {
  switch (value__) {
    case Layer_Blending_Standard_BlendMode_BlendModeNormal:
    case Layer_Blending_Standard_BlendMode_BlendModeDissolve:
    case Layer_Blending_Standard_BlendMode_BlendModeDarken:
    case Layer_Blending_Standard_BlendMode_BlendModeMultiply:
    case Layer_Blending_Standard_BlendMode_BlendModeColorBurn:
    case Layer_Blending_Standard_BlendMode_BlendModeLinearBurn:
    case Layer_Blending_Standard_BlendMode_BlendModeDarkerColor:
    case Layer_Blending_Standard_BlendMode_BlendModeLighten:
    case Layer_Blending_Standard_BlendMode_BlendModeScreen:
    case Layer_Blending_Standard_BlendMode_BlendModeColorDodge:
    case Layer_Blending_Standard_BlendMode_BlendModeLinearDodge:
    case Layer_Blending_Standard_BlendMode_BlendModeLighterColor:
    case Layer_Blending_Standard_BlendMode_BlendModeOverlay:
    case Layer_Blending_Standard_BlendMode_BlendModeSoftLight:
    case Layer_Blending_Standard_BlendMode_BlendModeHardLight:
    case Layer_Blending_Standard_BlendMode_BlendModeVividLight:
    case Layer_Blending_Standard_BlendMode_BlendModeLinearLight:
    case Layer_Blending_Standard_BlendMode_BlendModePinLight:
    case Layer_Blending_Standard_BlendMode_BlendModeHardMix:
    case Layer_Blending_Standard_BlendMode_BlendModeDifference:
    case Layer_Blending_Standard_BlendMode_BlendModeExclusion:
    case Layer_Blending_Standard_BlendMode_BlendModeSubtract:
    case Layer_Blending_Standard_BlendMode_BlendModeDivide:
    case Layer_Blending_Standard_BlendMode_BlendModeHue:
    case Layer_Blending_Standard_BlendMode_BlendModeSaturation:
    case Layer_Blending_Standard_BlendMode_BlendModeColor:
    case Layer_Blending_Standard_BlendMode_BlendModeLuminosity:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Layer_Blending_Matte

@implementation Layer_Blending_Matte

@dynamic matteTypeOneOfCase;
@dynamic alpha;
@dynamic luma;
@dynamic white;

typedef struct Layer_Blending_Matte__storage_ {
  uint32_t _has_storage_[2];
  Layer_Blending_Matte_Alpha *alpha;
  Layer_Blending_Matte_Luma *luma;
  Layer_Blending_Matte_White *white;
} Layer_Blending_Matte__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "alpha",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer_Blending_Matte_Alpha),
        .number = Layer_Blending_Matte_FieldNumber_Alpha,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Layer_Blending_Matte__storage_, alpha),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "luma",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer_Blending_Matte_Luma),
        .number = Layer_Blending_Matte_FieldNumber_Luma,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Layer_Blending_Matte__storage_, luma),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "white",
        .dataTypeSpecific.clazz = GPBObjCClass(Layer_Blending_Matte_White),
        .number = Layer_Blending_Matte_FieldNumber_White,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Layer_Blending_Matte__storage_, white),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer_Blending_Matte class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Layer_Blending_Matte__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "matteType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Layer_Blending)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void Layer_Blending_Matte_ClearMatteTypeOneOfCase(Layer_Blending_Matte *message) {
  GPBDescriptor *descriptor = [Layer_Blending_Matte descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Layer_Blending_Matte_Alpha

@implementation Layer_Blending_Matte_Alpha

@dynamic inverted;

typedef struct Layer_Blending_Matte_Alpha__storage_ {
  uint32_t _has_storage_[1];
} Layer_Blending_Matte_Alpha__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inverted",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_Blending_Matte_Alpha_FieldNumber_Inverted,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer_Blending_Matte_Alpha class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Layer_Blending_Matte_Alpha__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Layer_Blending_Matte)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Layer_Blending_Matte_Luma

@implementation Layer_Blending_Matte_Luma

@dynamic inverted;

typedef struct Layer_Blending_Matte_Luma__storage_ {
  uint32_t _has_storage_[1];
} Layer_Blending_Matte_Luma__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inverted",
        .dataTypeSpecific.clazz = Nil,
        .number = Layer_Blending_Matte_Luma_FieldNumber_Inverted,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer_Blending_Matte_Luma class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Layer_Blending_Matte_Luma__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Layer_Blending_Matte)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Layer_Blending_Matte_White

@implementation Layer_Blending_Matte_White


typedef struct Layer_Blending_Matte_White__storage_ {
  uint32_t _has_storage_[1];
} Layer_Blending_Matte_White__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Layer_Blending_Matte_White class]
                                     rootClass:[LayersRoot class]
                                          file:LayersRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(Layer_Blending_Matte_White__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Layer_Blending_Matte)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
