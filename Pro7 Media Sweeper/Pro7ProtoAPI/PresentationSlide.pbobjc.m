// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: presentationSlide.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "PresentationSlide.pbobjc.h"
#import "Slide.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "AlignmentGuide.pbobjc.h"
#import "Effects.pbobjc.h"
#import "GraphicsData.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AlignmentGuide);
GPBObjCClassDeclaration(Graphics_Text_Attributes);
GPBObjCClassDeclaration(PresentationSlide);
GPBObjCClassDeclaration(PresentationSlide_Notes);
GPBObjCClassDeclaration(Slide);
GPBObjCClassDeclaration(Transition);
GPBObjCClassDeclaration(URL);

#pragma mark - PresentationSlideRoot

@implementation PresentationSlideRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PresentationSlideRoot_FileDescriptor

static GPBFileDescriptor *PresentationSlideRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - PresentationSlide

@implementation PresentationSlide

@dynamic hasBaseSlide, baseSlide;
@dynamic hasNotes, notes;
@dynamic templateGuidelinesArray, templateGuidelinesArray_Count;
@dynamic hasChordChart, chordChart;
@dynamic hasTransition, transition;

typedef struct PresentationSlide__storage_ {
  uint32_t _has_storage_[1];
  Slide *baseSlide;
  PresentationSlide_Notes *notes;
  NSMutableArray *templateGuidelinesArray;
  URL *chordChart;
  Transition *transition;
} PresentationSlide__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "baseSlide",
        .dataTypeSpecific.clazz = GPBObjCClass(Slide),
        .number = PresentationSlide_FieldNumber_BaseSlide,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresentationSlide__storage_, baseSlide),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "notes",
        .dataTypeSpecific.clazz = GPBObjCClass(PresentationSlide_Notes),
        .number = PresentationSlide_FieldNumber_Notes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PresentationSlide__storage_, notes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "templateGuidelinesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(AlignmentGuide),
        .number = PresentationSlide_FieldNumber_TemplateGuidelinesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PresentationSlide__storage_, templateGuidelinesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "chordChart",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = PresentationSlide_FieldNumber_ChordChart,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PresentationSlide__storage_, chordChart),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "transition",
        .dataTypeSpecific.clazz = GPBObjCClass(Transition),
        .number = PresentationSlide_FieldNumber_Transition,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(PresentationSlide__storage_, transition),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresentationSlide class]
                                     rootClass:[PresentationSlideRoot class]
                                          file:PresentationSlideRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresentationSlide__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PresentationSlide_Notes

@implementation PresentationSlide_Notes

@dynamic rtfData;
@dynamic hasAttributes, attributes;

typedef struct PresentationSlide_Notes__storage_ {
  uint32_t _has_storage_[1];
  NSData *rtfData;
  Graphics_Text_Attributes *attributes;
} PresentationSlide_Notes__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "rtfData",
        .dataTypeSpecific.clazz = Nil,
        .number = PresentationSlide_Notes_FieldNumber_RtfData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PresentationSlide_Notes__storage_, rtfData),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBytes,
      },
      {
        .name = "attributes",
        .dataTypeSpecific.clazz = GPBObjCClass(Graphics_Text_Attributes),
        .number = PresentationSlide_Notes_FieldNumber_Attributes,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PresentationSlide_Notes__storage_, attributes),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PresentationSlide_Notes class]
                                     rootClass:[PresentationSlideRoot class]
                                          file:PresentationSlideRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PresentationSlide_Notes__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(PresentationSlide)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
