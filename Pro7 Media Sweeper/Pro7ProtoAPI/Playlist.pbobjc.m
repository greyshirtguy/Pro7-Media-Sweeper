// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: playlist.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Playlist.pbobjc.h"
#import "HotKey.pbobjc.h"
#import "Cue.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "Action.pbobjc.h"
#import "PlanningCenter.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Action);
GPBObjCClassDeclaration(Color);
GPBObjCClassDeclaration(Cue);
GPBObjCClassDeclaration(HotKey);
GPBObjCClassDeclaration(PlanningCenterPlan);
GPBObjCClassDeclaration(PlanningCenterPlan_PlanItem);
GPBObjCClassDeclaration(Playlist);
GPBObjCClassDeclaration(PlaylistItem);
GPBObjCClassDeclaration(PlaylistItem_Header);
GPBObjCClassDeclaration(PlaylistItem_Placeholder);
GPBObjCClassDeclaration(PlaylistItem_PlanningCenter);
GPBObjCClassDeclaration(PlaylistItem_Presentation);
GPBObjCClassDeclaration(Playlist_FolderDirectory);
GPBObjCClassDeclaration(Playlist_PlaylistArray);
GPBObjCClassDeclaration(Playlist_PlaylistItems);
GPBObjCClassDeclaration(Playlist_StartupInfo);
GPBObjCClassDeclaration(URL);
GPBObjCClassDeclaration(UUID);

#pragma mark - PlaylistRoot

@implementation PlaylistRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - PlaylistRoot_FileDescriptor

static GPBFileDescriptor *PlaylistRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Playlist

@implementation Playlist

@dynamic childrenTypeOneOfCase;
@dynamic linkDataOneOfCase;
@dynamic hasUuid, uuid;
@dynamic name;
@dynamic type;
@dynamic expanded;
@dynamic hasTargetedLayerUuid, targetedLayerUuid;
@dynamic hasSmartDirectoryPath, smartDirectoryPath;
@dynamic hasHotKey, hotKey;
@dynamic cuesArray, cuesArray_Count;
@dynamic childrenArray, childrenArray_Count;
@dynamic timecodeEnabled;
@dynamic timing;
@dynamic hasStartupInfo, startupInfo;
@dynamic playlists;
@dynamic items;
@dynamic smartDirectory;
@dynamic pcoPlan;

typedef struct Playlist__storage_ {
  uint32_t _has_storage_[3];
  Playlist_Type type;
  Playlist_TimingType timing;
  UUID *uuid;
  NSString *name;
  UUID *targetedLayerUuid;
  URL *smartDirectoryPath;
  HotKey *hotKey;
  NSMutableArray *cuesArray;
  NSMutableArray *childrenArray;
  Playlist_PlaylistArray *playlists;
  Playlist_PlaylistItems *items;
  Playlist_FolderDirectory *smartDirectory;
  PlanningCenterPlan *pcoPlan;
  Playlist_StartupInfo *startupInfo;
} Playlist__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Playlist_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Playlist__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Playlist_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Playlist__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "type",
        .dataTypeSpecific.enumDescFunc = Playlist_Type_EnumDescriptor,
        .number = Playlist_FieldNumber_Type,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Playlist__storage_, type),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "expanded",
        .dataTypeSpecific.clazz = Nil,
        .number = Playlist_FieldNumber_Expanded,
        .hasIndex = 3,
        .offset = 4,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "targetedLayerUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Playlist_FieldNumber_TargetedLayerUuid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Playlist__storage_, targetedLayerUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "smartDirectoryPath",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = Playlist_FieldNumber_SmartDirectoryPath,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Playlist__storage_, smartDirectoryPath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hotKey",
        .dataTypeSpecific.clazz = GPBObjCClass(HotKey),
        .number = Playlist_FieldNumber_HotKey,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Playlist__storage_, hotKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cuesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Cue),
        .number = Playlist_FieldNumber_CuesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Playlist__storage_, cuesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "childrenArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist),
        .number = Playlist_FieldNumber_ChildrenArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Playlist__storage_, childrenArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "timecodeEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = Playlist_FieldNumber_TimecodeEnabled,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "timing",
        .dataTypeSpecific.enumDescFunc = Playlist_TimingType_EnumDescriptor,
        .number = Playlist_FieldNumber_Timing,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Playlist__storage_, timing),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "playlists",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist_PlaylistArray),
        .number = Playlist_FieldNumber_Playlists,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Playlist__storage_, playlists),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "items",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist_PlaylistItems),
        .number = Playlist_FieldNumber_Items,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(Playlist__storage_, items),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "smartDirectory",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist_FolderDirectory),
        .number = Playlist_FieldNumber_SmartDirectory,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Playlist__storage_, smartDirectory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pcoPlan",
        .dataTypeSpecific.clazz = GPBObjCClass(PlanningCenterPlan),
        .number = Playlist_FieldNumber_PcoPlan,
        .hasIndex = -2,
        .offset = (uint32_t)offsetof(Playlist__storage_, pcoPlan),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startupInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist_StartupInfo),
        .number = Playlist_FieldNumber_StartupInfo,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(Playlist__storage_, startupInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Playlist class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Playlist__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "childrenType",
      "linkData",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Playlist_Type_RawValue(Playlist *message) {
  GPBDescriptor *descriptor = [Playlist descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Playlist_FieldNumber_Type];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPlaylist_Type_RawValue(Playlist *message, int32_t value) {
  GPBDescriptor *descriptor = [Playlist descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Playlist_FieldNumber_Type];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Playlist_Timing_RawValue(Playlist *message) {
  GPBDescriptor *descriptor = [Playlist descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Playlist_FieldNumber_Timing];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPlaylist_Timing_RawValue(Playlist *message, int32_t value) {
  GPBDescriptor *descriptor = [Playlist descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Playlist_FieldNumber_Timing];
  GPBSetMessageRawEnumField(message, field, value);
}

void Playlist_ClearChildrenTypeOneOfCase(Playlist *message) {
  GPBDescriptor *descriptor = [Playlist descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
void Playlist_ClearLinkDataOneOfCase(Playlist *message) {
  GPBDescriptor *descriptor = [Playlist descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:1];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum Playlist_Type

GPBEnumDescriptor *Playlist_Type_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TypeUnknown\000TypePlaylist\000TypeGroup\000TypeS"
        "mart\000TypeRoot\000";
    static const int32_t values[] = {
        Playlist_Type_TypeUnknown,
        Playlist_Type_TypePlaylist,
        Playlist_Type_TypeGroup,
        Playlist_Type_TypeSmart,
        Playlist_Type_TypeRoot,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Playlist_Type)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Playlist_Type_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Playlist_Type_IsValidValue(int32_t value__) {
  switch (value__) {
    case Playlist_Type_TypeUnknown:
    case Playlist_Type_TypePlaylist:
    case Playlist_Type_TypeGroup:
    case Playlist_Type_TypeSmart:
    case Playlist_Type_TypeRoot:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Playlist_TimingType

GPBEnumDescriptor *Playlist_TimingType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "TimingTypeNone\000TimingTypeTimecode\000Timing"
        "TypeTimeOfDay\000";
    static const int32_t values[] = {
        Playlist_TimingType_TimingTypeNone,
        Playlist_TimingType_TimingTypeTimecode,
        Playlist_TimingType_TimingTypeTimeOfDay,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Playlist_TimingType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Playlist_TimingType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Playlist_TimingType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Playlist_TimingType_TimingTypeNone:
    case Playlist_TimingType_TimingTypeTimecode:
    case Playlist_TimingType_TimingTypeTimeOfDay:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Playlist_PlaylistArray

@implementation Playlist_PlaylistArray

@dynamic playlistsArray, playlistsArray_Count;

typedef struct Playlist_PlaylistArray__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *playlistsArray;
} Playlist_PlaylistArray__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "playlistsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Playlist),
        .number = Playlist_PlaylistArray_FieldNumber_PlaylistsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Playlist_PlaylistArray__storage_, playlistsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Playlist_PlaylistArray class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Playlist_PlaylistArray__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Playlist)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Playlist_PlaylistItems

@implementation Playlist_PlaylistItems

@dynamic itemsArray, itemsArray_Count;

typedef struct Playlist_PlaylistItems__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *itemsArray;
} Playlist_PlaylistItems__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "itemsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(PlaylistItem),
        .number = Playlist_PlaylistItems_FieldNumber_ItemsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Playlist_PlaylistItems__storage_, itemsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Playlist_PlaylistItems class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Playlist_PlaylistItems__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Playlist)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Playlist_FolderDirectory

@implementation Playlist_FolderDirectory

@dynamic hasSmartDirectory, smartDirectory;
@dynamic importBehavior;

typedef struct Playlist_FolderDirectory__storage_ {
  uint32_t _has_storage_[1];
  Playlist_FolderDirectory_ImportBehavior importBehavior;
  URL *smartDirectory;
} Playlist_FolderDirectory__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "smartDirectory",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = Playlist_FolderDirectory_FieldNumber_SmartDirectory,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Playlist_FolderDirectory__storage_, smartDirectory),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "importBehavior",
        .dataTypeSpecific.enumDescFunc = Playlist_FolderDirectory_ImportBehavior_EnumDescriptor,
        .number = Playlist_FolderDirectory_FieldNumber_ImportBehavior,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Playlist_FolderDirectory__storage_, importBehavior),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Playlist_FolderDirectory class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Playlist_FolderDirectory__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Playlist)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Playlist_FolderDirectory_ImportBehavior_RawValue(Playlist_FolderDirectory *message) {
  GPBDescriptor *descriptor = [Playlist_FolderDirectory descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Playlist_FolderDirectory_FieldNumber_ImportBehavior];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPlaylist_FolderDirectory_ImportBehavior_RawValue(Playlist_FolderDirectory *message, int32_t value) {
  GPBDescriptor *descriptor = [Playlist_FolderDirectory descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Playlist_FolderDirectory_FieldNumber_ImportBehavior];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Playlist_FolderDirectory_ImportBehavior

GPBEnumDescriptor *Playlist_FolderDirectory_ImportBehavior_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ImportBehaviorBackground\000ImportBehaviorF"
        "oreground\000";
    static const int32_t values[] = {
        Playlist_FolderDirectory_ImportBehavior_ImportBehaviorBackground,
        Playlist_FolderDirectory_ImportBehavior_ImportBehaviorForeground,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Playlist_FolderDirectory_ImportBehavior)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Playlist_FolderDirectory_ImportBehavior_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Playlist_FolderDirectory_ImportBehavior_IsValidValue(int32_t value__) {
  switch (value__) {
    case Playlist_FolderDirectory_ImportBehavior_ImportBehaviorBackground:
    case Playlist_FolderDirectory_ImportBehavior_ImportBehaviorForeground:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Playlist_Tag

@implementation Playlist_Tag

@dynamic hasColor, color;
@dynamic name;
@dynamic hasUuid, uuid;

typedef struct Playlist_Tag__storage_ {
  uint32_t _has_storage_[1];
  Color *color;
  NSString *name;
  UUID *uuid;
} Playlist_Tag__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "color",
        .dataTypeSpecific.clazz = GPBObjCClass(Color),
        .number = Playlist_Tag_FieldNumber_Color,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Playlist_Tag__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Playlist_Tag_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Playlist_Tag__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Playlist_Tag_FieldNumber_Uuid,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Playlist_Tag__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Playlist_Tag class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Playlist_Tag__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Playlist)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Playlist_StartupInfo

@implementation Playlist_StartupInfo

@dynamic triggerOnStartup;

typedef struct Playlist_StartupInfo__storage_ {
  uint32_t _has_storage_[1];
} Playlist_StartupInfo__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "triggerOnStartup",
        .dataTypeSpecific.clazz = Nil,
        .number = Playlist_StartupInfo_FieldNumber_TriggerOnStartup,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Playlist_StartupInfo class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Playlist_StartupInfo__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Playlist)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlaylistItem

@implementation PlaylistItem

@dynamic itemTypeOneOfCase;
@dynamic hasUuid, uuid;
@dynamic name;
@dynamic tagsArray, tagsArray_Count;
@dynamic isHidden;
@dynamic header;
@dynamic presentation;
@dynamic cue;
@dynamic planningCenter;
@dynamic placeholder;

typedef struct PlaylistItem__storage_ {
  uint32_t _has_storage_[2];
  UUID *uuid;
  NSString *name;
  PlaylistItem_Header *header;
  PlaylistItem_Presentation *presentation;
  Cue *cue;
  PlaylistItem_PlanningCenter *planningCenter;
  NSMutableArray *tagsArray;
  PlaylistItem_Placeholder *placeholder;
} PlaylistItem__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = PlaylistItem_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = PlaylistItem_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "header",
        .dataTypeSpecific.clazz = GPBObjCClass(PlaylistItem_Header),
        .number = PlaylistItem_FieldNumber_Header,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, header),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "presentation",
        .dataTypeSpecific.clazz = GPBObjCClass(PlaylistItem_Presentation),
        .number = PlaylistItem_FieldNumber_Presentation,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, presentation),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cue",
        .dataTypeSpecific.clazz = GPBObjCClass(Cue),
        .number = PlaylistItem_FieldNumber_Cue,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, cue),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "planningCenter",
        .dataTypeSpecific.clazz = GPBObjCClass(PlaylistItem_PlanningCenter),
        .number = PlaylistItem_FieldNumber_PlanningCenter,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, planningCenter),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = PlaylistItem_FieldNumber_TagsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, tagsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "placeholder",
        .dataTypeSpecific.clazz = GPBObjCClass(PlaylistItem_Placeholder),
        .number = PlaylistItem_FieldNumber_Placeholder,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(PlaylistItem__storage_, placeholder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isHidden",
        .dataTypeSpecific.clazz = Nil,
        .number = PlaylistItem_FieldNumber_IsHidden,
        .hasIndex = 2,
        .offset = 3,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlaylistItem class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlaylistItem__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "itemType",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void PlaylistItem_ClearItemTypeOneOfCase(PlaylistItem *message) {
  GPBDescriptor *descriptor = [PlaylistItem descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - PlaylistItem_Header

@implementation PlaylistItem_Header

@dynamic hasColor, color;
@dynamic actionsArray, actionsArray_Count;

typedef struct PlaylistItem_Header__storage_ {
  uint32_t _has_storage_[1];
  Color *color;
  NSMutableArray *actionsArray;
} PlaylistItem_Header__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "color",
        .dataTypeSpecific.clazz = GPBObjCClass(Color),
        .number = PlaylistItem_Header_FieldNumber_Color,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlaylistItem_Header__storage_, color),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Action),
        .number = PlaylistItem_Header_FieldNumber_ActionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(PlaylistItem_Header__storage_, actionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlaylistItem_Header class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlaylistItem_Header__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(PlaylistItem)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlaylistItem_Presentation

@implementation PlaylistItem_Presentation

@dynamic hasDocumentPath, documentPath;
@dynamic hasArrangement, arrangement;
@dynamic contentDestination;

typedef struct PlaylistItem_Presentation__storage_ {
  uint32_t _has_storage_[1];
  PlaylistItem_Presentation_ContentDestination contentDestination;
  URL *documentPath;
  UUID *arrangement;
} PlaylistItem_Presentation__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "documentPath",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = PlaylistItem_Presentation_FieldNumber_DocumentPath,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlaylistItem_Presentation__storage_, documentPath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "arrangement",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = PlaylistItem_Presentation_FieldNumber_Arrangement,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlaylistItem_Presentation__storage_, arrangement),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "contentDestination",
        .dataTypeSpecific.enumDescFunc = PlaylistItem_Presentation_ContentDestination_EnumDescriptor,
        .number = PlaylistItem_Presentation_FieldNumber_ContentDestination,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(PlaylistItem_Presentation__storage_, contentDestination),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlaylistItem_Presentation class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlaylistItem_Presentation__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(PlaylistItem)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PlaylistItem_Presentation_ContentDestination_RawValue(PlaylistItem_Presentation *message) {
  GPBDescriptor *descriptor = [PlaylistItem_Presentation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlaylistItem_Presentation_FieldNumber_ContentDestination];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPlaylistItem_Presentation_ContentDestination_RawValue(PlaylistItem_Presentation *message, int32_t value) {
  GPBDescriptor *descriptor = [PlaylistItem_Presentation descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PlaylistItem_Presentation_FieldNumber_ContentDestination];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum PlaylistItem_Presentation_ContentDestination

GPBEnumDescriptor *PlaylistItem_Presentation_ContentDestination_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "ContentDestinationGlobal\000ContentDestinat"
        "ionAnnouncements\000";
    static const int32_t values[] = {
        PlaylistItem_Presentation_ContentDestination_ContentDestinationGlobal,
        PlaylistItem_Presentation_ContentDestination_ContentDestinationAnnouncements,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(PlaylistItem_Presentation_ContentDestination)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:PlaylistItem_Presentation_ContentDestination_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL PlaylistItem_Presentation_ContentDestination_IsValidValue(int32_t value__) {
  switch (value__) {
    case PlaylistItem_Presentation_ContentDestination_ContentDestinationGlobal:
    case PlaylistItem_Presentation_ContentDestination_ContentDestinationAnnouncements:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - PlaylistItem_PlanningCenter

@implementation PlaylistItem_PlanningCenter

@dynamic hasItem, item;
@dynamic hasLinkedData, linkedData;

typedef struct PlaylistItem_PlanningCenter__storage_ {
  uint32_t _has_storage_[1];
  PlanningCenterPlan_PlanItem *item;
  PlaylistItem *linkedData;
} PlaylistItem_PlanningCenter__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "item",
        .dataTypeSpecific.clazz = GPBObjCClass(PlanningCenterPlan_PlanItem),
        .number = PlaylistItem_PlanningCenter_FieldNumber_Item,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlaylistItem_PlanningCenter__storage_, item),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "linkedData",
        .dataTypeSpecific.clazz = GPBObjCClass(PlaylistItem),
        .number = PlaylistItem_PlanningCenter_FieldNumber_LinkedData,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PlaylistItem_PlanningCenter__storage_, linkedData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlaylistItem_PlanningCenter class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlaylistItem_PlanningCenter__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(PlaylistItem)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - PlaylistItem_Placeholder

@implementation PlaylistItem_Placeholder

@dynamic hasLinkedData, linkedData;

typedef struct PlaylistItem_Placeholder__storage_ {
  uint32_t _has_storage_[1];
  PlaylistItem *linkedData;
} PlaylistItem_Placeholder__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linkedData",
        .dataTypeSpecific.clazz = GPBObjCClass(PlaylistItem),
        .number = PlaylistItem_Placeholder_FieldNumber_LinkedData,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PlaylistItem_Placeholder__storage_, linkedData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PlaylistItem_Placeholder class]
                                     rootClass:[PlaylistRoot class]
                                          file:PlaylistRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PlaylistItem_Placeholder__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(PlaylistItem)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
