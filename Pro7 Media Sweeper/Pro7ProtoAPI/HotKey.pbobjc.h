// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hotKey.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers.h>
#else
 #import "GPBProtocolBuffers.h"
#endif

#if GOOGLE_PROTOBUF_OBJC_VERSION < 30004
#error This file was generated by a newer version of protoc which is incompatible with your Protocol Buffer library sources.
#endif
#if 30004 < GOOGLE_PROTOBUF_OBJC_MIN_SUPPORTED_VERSION
#error This file was generated by an older version of protoc which is incompatible with your Protocol Buffer library sources.
#endif

// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

CF_EXTERN_C_BEGIN

NS_ASSUME_NONNULL_BEGIN

#pragma mark - Enum HotKey_KeyCode

typedef GPB_ENUM(HotKey_KeyCode) {
  /**
   * Value used if any message's field encounters a value that is not defined
   * by this enum. The message will also have C functions to get/set the rawValue
   * of the field.
   **/
  HotKey_KeyCode_GPBUnrecognizedEnumeratorValue = kGPBUnrecognizedEnumeratorValue,
  HotKey_KeyCode_KeyCodeUnknown = 0,
  HotKey_KeyCode_KeyCodeAnsiA = 1,
  HotKey_KeyCode_KeyCodeAnsiB = 2,
  HotKey_KeyCode_KeyCodeAnsiC = 3,
  HotKey_KeyCode_KeyCodeAnsiD = 4,
  HotKey_KeyCode_KeyCodeAnsiE = 5,
  HotKey_KeyCode_KeyCodeAnsiF = 6,
  HotKey_KeyCode_KeyCodeAnsiG = 7,
  HotKey_KeyCode_KeyCodeAnsiH = 8,
  HotKey_KeyCode_KeyCodeAnsiI = 9,
  HotKey_KeyCode_KeyCodeAnsiJ = 10,
  HotKey_KeyCode_KeyCodeAnsiK = 11,
  HotKey_KeyCode_KeyCodeAnsiL = 12,
  HotKey_KeyCode_KeyCodeAnsiM = 13,
  HotKey_KeyCode_KeyCodeAnsiN = 14,
  HotKey_KeyCode_KeyCodeAnsiO = 15,
  HotKey_KeyCode_KeyCodeAnsiP = 16,
  HotKey_KeyCode_KeyCodeAnsiQ = 17,
  HotKey_KeyCode_KeyCodeAnsiR = 18,
  HotKey_KeyCode_KeyCodeAnsiS = 19,
  HotKey_KeyCode_KeyCodeAnsiT = 20,
  HotKey_KeyCode_KeyCodeAnsiU = 21,
  HotKey_KeyCode_KeyCodeAnsiV = 22,
  HotKey_KeyCode_KeyCodeAnsiW = 23,
  HotKey_KeyCode_KeyCodeAnsiX = 24,
  HotKey_KeyCode_KeyCodeAnsiY = 25,
  HotKey_KeyCode_KeyCodeAnsiZ = 26,
  HotKey_KeyCode_KeyCodeAnsi0 = 27,
  HotKey_KeyCode_KeyCodeAnsi1 = 28,
  HotKey_KeyCode_KeyCodeAnsi2 = 29,
  HotKey_KeyCode_KeyCodeAnsi3 = 30,
  HotKey_KeyCode_KeyCodeAnsi4 = 31,
  HotKey_KeyCode_KeyCodeAnsi5 = 32,
  HotKey_KeyCode_KeyCodeAnsi6 = 33,
  HotKey_KeyCode_KeyCodeAnsi7 = 34,
  HotKey_KeyCode_KeyCodeAnsi8 = 35,
  HotKey_KeyCode_KeyCodeAnsi9 = 36,
  HotKey_KeyCode_KeyCodeAnsiEqual = 37,
  HotKey_KeyCode_KeyCodeAnsiMinus = 38,
  HotKey_KeyCode_KeyCodeAnsiRightBracket = 39,
  HotKey_KeyCode_KeyCodeAnsiLeftBracket = 40,
  HotKey_KeyCode_KeyCodeAnsiQuote = 41,
  HotKey_KeyCode_KeyCodeAnsiSemicolon = 42,
  HotKey_KeyCode_KeyCodeAnsiBackslash = 43,
  HotKey_KeyCode_KeyCodeAnsiComma = 44,
  HotKey_KeyCode_KeyCodeAnsiSlash = 45,
  HotKey_KeyCode_KeyCodeAnsiPeriod = 46,
  HotKey_KeyCode_KeyCodeAnsiGrave = 47,
  HotKey_KeyCode_KeyCodeAnsiKeypadDecimal = 48,
  HotKey_KeyCode_KeyCodeAnsiKeypadPlus = 49,
  HotKey_KeyCode_KeyCodeAnsiKeypadClear = 50,
  HotKey_KeyCode_KeyCodeAnsiKeypadDivide = 51,
  HotKey_KeyCode_KeyCodeAnsiKeypadEnter = 52,
  HotKey_KeyCode_KeyCodeAnsiKeypadMinus = 53,
  HotKey_KeyCode_KeyCodeAnsiKeypadEquals = 54,
  HotKey_KeyCode_KeyCodeAnsiKeypad0 = 55,
  HotKey_KeyCode_KeyCodeAnsiKeypad1 = 56,
  HotKey_KeyCode_KeyCodeAnsiKeypad2 = 57,
  HotKey_KeyCode_KeyCodeAnsiKeypad3 = 58,
  HotKey_KeyCode_KeyCodeAnsiKeypad4 = 59,
  HotKey_KeyCode_KeyCodeAnsiKeypad5 = 60,
  HotKey_KeyCode_KeyCodeAnsiKeypad6 = 61,
  HotKey_KeyCode_KeyCodeAnsiKeypad7 = 62,
  HotKey_KeyCode_KeyCodeAnsiKeypad8 = 63,
  HotKey_KeyCode_KeyCodeAnsiKeypad9 = 64,
  HotKey_KeyCode_KeyCodeF1 = 65,
  HotKey_KeyCode_KeyCodeF2 = 66,
  HotKey_KeyCode_KeyCodeF3 = 67,
  HotKey_KeyCode_KeyCodeF4 = 68,
  HotKey_KeyCode_KeyCodeF5 = 69,
  HotKey_KeyCode_KeyCodeF6 = 70,
  HotKey_KeyCode_KeyCodeF7 = 71,
  HotKey_KeyCode_KeyCodeF8 = 72,
  HotKey_KeyCode_KeyCodeF9 = 73,
  HotKey_KeyCode_KeyCodeF10 = 74,
  HotKey_KeyCode_KeyCodeF11 = 75,
  HotKey_KeyCode_KeyCodeF12 = 76,
  HotKey_KeyCode_KeyCodeF13 = 77,
  HotKey_KeyCode_KeyCodeF14 = 78,
  HotKey_KeyCode_KeyCodeF15 = 79,
  HotKey_KeyCode_KeyCodeF16 = 80,
  HotKey_KeyCode_KeyCodeF17 = 81,
  HotKey_KeyCode_KeyCodeF18 = 82,
  HotKey_KeyCode_KeyCodeF19 = 83,
  HotKey_KeyCode_KeyCodeF20 = 84,
  HotKey_KeyCode_KeyCodeFunction = 85,
  HotKey_KeyCode_KeyCodeReturn = 86,
  HotKey_KeyCode_KeyCodeTab = 87,
  HotKey_KeyCode_KeyCodeSpace = 88,
  HotKey_KeyCode_KeyCodeDelete = 89,
  HotKey_KeyCode_KeyCodeEscape = 90,
  HotKey_KeyCode_KeyCodeCommand = 91,
  HotKey_KeyCode_KeyCodeShift = 92,
  HotKey_KeyCode_KeyCodeCapsLock = 93,
  HotKey_KeyCode_KeyCodeOption = 94,
  HotKey_KeyCode_KeyCodeControl = 95,
  HotKey_KeyCode_KeyCodeRightShift = 96,
  HotKey_KeyCode_KeyCodeRightOption = 97,
  HotKey_KeyCode_KeyCodeRightControl = 98,
  HotKey_KeyCode_KeyCodeVolumeUp = 99,
  HotKey_KeyCode_KeyCodeVolumeDown = 100,
  HotKey_KeyCode_KeyCodeMute = 101,
  HotKey_KeyCode_KeyCodeHelp = 102,
  HotKey_KeyCode_KeyCodeHome = 103,
  HotKey_KeyCode_KeyCodePageUp = 104,
  HotKey_KeyCode_KeyCodeForwardDelete = 105,
  HotKey_KeyCode_KeyCodeEnd = 106,
  HotKey_KeyCode_KeyCodePageDown = 107,
  HotKey_KeyCode_KeyCodeLeftArrow = 108,
  HotKey_KeyCode_KeyCodeRightArrow = 109,
  HotKey_KeyCode_KeyCodeDownArrow = 110,
  HotKey_KeyCode_KeyCodeUpArrow = 111,
  HotKey_KeyCode_KeyCodeIsoSelection = 112,
  HotKey_KeyCode_KeyCodeJisYen = 113,
  HotKey_KeyCode_KeyCodeJisUnderscore = 114,
  HotKey_KeyCode_KeyCodeJisKeypadComma = 115,
  HotKey_KeyCode_KeyCodeJisEisu = 116,
  HotKey_KeyCode_KeyCodeJisKana = 117,
};

GPBEnumDescriptor *HotKey_KeyCode_EnumDescriptor(void);

/**
 * Checks to see if the given value is defined by the enum or was not known at
 * the time this source was generated.
 **/
BOOL HotKey_KeyCode_IsValidValue(int32_t value);

#pragma mark - HotKeyRoot

/**
 * Exposes the extension registry for this file.
 *
 * The base class provides:
 * @code
 *   + (GPBExtensionRegistry *)extensionRegistry;
 * @endcode
 * which is a @c GPBExtensionRegistry that includes all the extensions defined by
 * this file and all files that it depends on.
 **/
GPB_FINAL @interface HotKeyRoot : GPBRootObject
@end

#pragma mark - HotKey

typedef GPB_ENUM(HotKey_FieldNumber) {
  HotKey_FieldNumber_Code = 1,
  HotKey_FieldNumber_ControlIdentifier = 2,
};

GPB_FINAL @interface HotKey : GPBMessage

@property(nonatomic, readwrite) HotKey_KeyCode code;

@property(nonatomic, readwrite, copy, null_resettable) NSString *controlIdentifier;

@end

/**
 * Fetches the raw value of a @c HotKey's @c code property, even
 * if the value was not defined by the enum at the time the code was generated.
 **/
int32_t HotKey_Code_RawValue(HotKey *message);
/**
 * Sets the raw value of an @c HotKey's @c code property, allowing
 * it to be set to a value that was not defined by the enum at the time the code
 * was generated.
 **/
void SetHotKey_Code_RawValue(HotKey *message, int32_t value);

NS_ASSUME_NONNULL_END

CF_EXTERN_C_END

#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
