// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cue.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Cue.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "HotKey.pbobjc.h"
#import "Action.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Action);
GPBObjCClassDeclaration(Cue);
GPBObjCClassDeclaration(Cue_PendingImportsEntry);
GPBObjCClassDeclaration(Cue_TimecodeTime);
GPBObjCClassDeclaration(HotKey);
GPBObjCClassDeclaration(URLs);
GPBObjCClassDeclaration(UUID);

#pragma mark - CueRoot

@implementation CueRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CueRoot_FileDescriptor

static GPBFileDescriptor *CueRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Cue

@implementation Cue

@dynamic hasUuid, uuid;
@dynamic name;
@dynamic completionTargetType;
@dynamic hasCompletionTargetUuid, completionTargetUuid;
@dynamic completionActionType;
@dynamic hasCompletionActionUuid, completionActionUuid;
@dynamic hasTriggerTime, triggerTime;
@dynamic hasHotKey, hotKey;
@dynamic actionsArray, actionsArray_Count;
@dynamic pendingImportsArray, pendingImportsArray_Count;
@dynamic isEnabled;
@dynamic completionTime;

typedef struct Cue__storage_ {
  uint32_t _has_storage_[1];
  Cue_CompletionTargetType completionTargetType;
  Cue_CompletionActionType completionActionType;
  UUID *uuid;
  NSString *name;
  UUID *completionTargetUuid;
  UUID *completionActionUuid;
  Cue_TimecodeTime *triggerTime;
  HotKey *hotKey;
  NSMutableArray *actionsArray;
  NSMutableArray *pendingImportsArray;
  double completionTime;
} Cue__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Cue_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Cue__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = Cue_FieldNumber_Name,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Cue__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "completionTargetType",
        .dataTypeSpecific.enumDescFunc = Cue_CompletionTargetType_EnumDescriptor,
        .number = Cue_FieldNumber_CompletionTargetType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Cue__storage_, completionTargetType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "completionTargetUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Cue_FieldNumber_CompletionTargetUuid,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Cue__storage_, completionTargetUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "completionActionType",
        .dataTypeSpecific.enumDescFunc = Cue_CompletionActionType_EnumDescriptor,
        .number = Cue_FieldNumber_CompletionActionType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Cue__storage_, completionActionType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "completionActionUuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = Cue_FieldNumber_CompletionActionUuid,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Cue__storage_, completionActionUuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "triggerTime",
        .dataTypeSpecific.clazz = GPBObjCClass(Cue_TimecodeTime),
        .number = Cue_FieldNumber_TriggerTime,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Cue__storage_, triggerTime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "hotKey",
        .dataTypeSpecific.clazz = GPBObjCClass(HotKey),
        .number = Cue_FieldNumber_HotKey,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Cue__storage_, hotKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "actionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Action),
        .number = Cue_FieldNumber_ActionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Cue__storage_, actionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "pendingImportsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(Cue_PendingImportsEntry),
        .number = Cue_FieldNumber_PendingImportsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(Cue__storage_, pendingImportsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "isEnabled",
        .dataTypeSpecific.clazz = Nil,
        .number = Cue_FieldNumber_IsEnabled,
        .hasIndex = 8,
        .offset = 9,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldTextFormatNameCustom | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "completionTime",
        .dataTypeSpecific.clazz = Nil,
        .number = Cue_FieldNumber_CompletionTime,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Cue__storage_, completionTime),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Cue class]
                                     rootClass:[CueRoot class]
                                          file:CueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Cue__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
#if !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    static const char *extraTextFormatInfo =
        "\001\014\t\000";
    [localDescriptor setupExtraTextInfo:extraTextFormatInfo];
#endif  // !GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t Cue_CompletionTargetType_RawValue(Cue *message) {
  GPBDescriptor *descriptor = [Cue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Cue_FieldNumber_CompletionTargetType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCue_CompletionTargetType_RawValue(Cue *message, int32_t value) {
  GPBDescriptor *descriptor = [Cue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Cue_FieldNumber_CompletionTargetType];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t Cue_CompletionActionType_RawValue(Cue *message) {
  GPBDescriptor *descriptor = [Cue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Cue_FieldNumber_CompletionActionType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCue_CompletionActionType_RawValue(Cue *message, int32_t value) {
  GPBDescriptor *descriptor = [Cue descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:Cue_FieldNumber_CompletionActionType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum Cue_CompletionTargetType

GPBEnumDescriptor *Cue_CompletionTargetType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CompletionTargetTypeNone\000CompletionTarge"
        "tTypeNext\000CompletionTargetTypeRandom\000Com"
        "pletionTargetTypeCue\000CompletionTargetTyp"
        "eFirst\000";
    static const int32_t values[] = {
        Cue_CompletionTargetType_CompletionTargetTypeNone,
        Cue_CompletionTargetType_CompletionTargetTypeNext,
        Cue_CompletionTargetType_CompletionTargetTypeRandom,
        Cue_CompletionTargetType_CompletionTargetTypeCue,
        Cue_CompletionTargetType_CompletionTargetTypeFirst,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Cue_CompletionTargetType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Cue_CompletionTargetType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Cue_CompletionTargetType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Cue_CompletionTargetType_CompletionTargetTypeNone:
    case Cue_CompletionTargetType_CompletionTargetTypeNext:
    case Cue_CompletionTargetType_CompletionTargetTypeRandom:
    case Cue_CompletionTargetType_CompletionTargetTypeCue:
    case Cue_CompletionTargetType_CompletionTargetTypeFirst:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Enum Cue_CompletionActionType

GPBEnumDescriptor *Cue_CompletionActionType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "CompletionActionTypeFirst\000CompletionActi"
        "onTypeLast\000CompletionActionTypeAfterActi"
        "on\000CompletionActionTypeAfterTime\000";
    static const int32_t values[] = {
        Cue_CompletionActionType_CompletionActionTypeFirst,
        Cue_CompletionActionType_CompletionActionTypeLast,
        Cue_CompletionActionType_CompletionActionTypeAfterAction,
        Cue_CompletionActionType_CompletionActionTypeAfterTime,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(Cue_CompletionActionType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:Cue_CompletionActionType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL Cue_CompletionActionType_IsValidValue(int32_t value__) {
  switch (value__) {
    case Cue_CompletionActionType_CompletionActionTypeFirst:
    case Cue_CompletionActionType_CompletionActionTypeLast:
    case Cue_CompletionActionType_CompletionActionTypeAfterAction:
    case Cue_CompletionActionType_CompletionActionTypeAfterTime:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - Cue_TimecodeTime

@implementation Cue_TimecodeTime

@dynamic time;

typedef struct Cue_TimecodeTime__storage_ {
  uint32_t _has_storage_[1];
  double time;
} Cue_TimecodeTime__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "time",
        .dataTypeSpecific.clazz = Nil,
        .number = Cue_TimecodeTime_FieldNumber_Time,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Cue_TimecodeTime__storage_, time),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeDouble,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Cue_TimecodeTime class]
                                     rootClass:[CueRoot class]
                                          file:CueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Cue_TimecodeTime__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Cue)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - Cue_PendingImportsEntry

@implementation Cue_PendingImportsEntry

@dynamic key;
@dynamic hasValue, value;

typedef struct Cue_PendingImportsEntry__storage_ {
  uint32_t _has_storage_[1];
  NSString *key;
  URLs *value;
} Cue_PendingImportsEntry__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = Cue_PendingImportsEntry_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Cue_PendingImportsEntry__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(URLs),
        .number = Cue_PendingImportsEntry_FieldNumber_Value,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Cue_PendingImportsEntry__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Cue_PendingImportsEntry class]
                                     rootClass:[CueRoot class]
                                          file:CueRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Cue_PendingImportsEntry__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(Cue)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
