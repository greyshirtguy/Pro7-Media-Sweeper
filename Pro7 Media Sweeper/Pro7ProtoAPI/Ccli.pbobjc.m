// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ccli.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Ccli.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "Template.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ApplicationInfo);
GPBObjCClassDeclaration(Template_Slide);

#pragma mark - CcliRoot

@implementation CcliRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CcliRoot_FileDescriptor

static GPBFileDescriptor *CcliRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - CCLIDocument

@implementation CCLIDocument

@dynamic hasApplicationInfo, applicationInfo;
@dynamic enableCcliDisplay;
@dynamic ccliLicense;
@dynamic displayType;
@dynamic hasTemplate_p, template_p;

typedef struct CCLIDocument__storage_ {
  uint32_t _has_storage_[1];
  CCLIDocument_DisplayType displayType;
  ApplicationInfo *applicationInfo;
  NSString *ccliLicense;
  Template_Slide *template_p;
} CCLIDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "applicationInfo",
        .dataTypeSpecific.clazz = GPBObjCClass(ApplicationInfo),
        .number = CCLIDocument_FieldNumber_ApplicationInfo,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CCLIDocument__storage_, applicationInfo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "enableCcliDisplay",
        .dataTypeSpecific.clazz = Nil,
        .number = CCLIDocument_FieldNumber_EnableCcliDisplay,
        .hasIndex = 1,
        .offset = 2,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "ccliLicense",
        .dataTypeSpecific.clazz = Nil,
        .number = CCLIDocument_FieldNumber_CcliLicense,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CCLIDocument__storage_, ccliLicense),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "displayType",
        .dataTypeSpecific.enumDescFunc = CCLIDocument_DisplayType_EnumDescriptor,
        .number = CCLIDocument_FieldNumber_DisplayType,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CCLIDocument__storage_, displayType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "template_p",
        .dataTypeSpecific.clazz = GPBObjCClass(Template_Slide),
        .number = CCLIDocument_FieldNumber_Template_p,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CCLIDocument__storage_, template_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CCLIDocument class]
                                     rootClass:[CcliRoot class]
                                          file:CcliRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CCLIDocument__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CCLIDocument_DisplayType_RawValue(CCLIDocument *message) {
  GPBDescriptor *descriptor = [CCLIDocument descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CCLIDocument_FieldNumber_DisplayType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCCLIDocument_DisplayType_RawValue(CCLIDocument *message, int32_t value) {
  GPBDescriptor *descriptor = [CCLIDocument descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CCLIDocument_FieldNumber_DisplayType];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum CCLIDocument_DisplayType

GPBEnumDescriptor *CCLIDocument_DisplayType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "DisplayTypeFirstSlide\000DisplayTypeLastSli"
        "de\000DisplayTypeFirstAndLastSlide\000DisplayT"
        "ypeAllSlides\000";
    static const int32_t values[] = {
        CCLIDocument_DisplayType_DisplayTypeFirstSlide,
        CCLIDocument_DisplayType_DisplayTypeLastSlide,
        CCLIDocument_DisplayType_DisplayTypeFirstAndLastSlide,
        CCLIDocument_DisplayType_DisplayTypeAllSlides,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CCLIDocument_DisplayType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CCLIDocument_DisplayType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CCLIDocument_DisplayType_IsValidValue(int32_t value__) {
  switch (value__) {
    case CCLIDocument_DisplayType_DisplayTypeFirstSlide:
    case CCLIDocument_DisplayType_DisplayTypeLastSlide:
    case CCLIDocument_DisplayType_DisplayTypeFirstAndLastSlide:
    case CCLIDocument_DisplayType_DisplayTypeAllSlides:
      return YES;
    default:
      return NO;
  }
}


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
