// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: input.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Input.pbobjc.h"
#import "BasicTypes.pbobjc.h"
#import "GraphicsData.pbobjc.h"
#import "DigitalAudio.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(AudioInput);
GPBObjCClassDeclaration(AudioInput_BehaviorMode);
GPBObjCClassDeclaration(AudioInput_BehaviorMode_AutoOff);
GPBObjCClassDeclaration(AudioInput_BehaviorMode_AutoOn);
GPBObjCClassDeclaration(AudioInput_BehaviorMode_Off);
GPBObjCClassDeclaration(AudioInput_BehaviorMode_On);
GPBObjCClassDeclaration(Color);
GPBObjCClassDeclaration(DigitalAudio_Device);
GPBObjCClassDeclaration(Media_VideoDevice);
GPBObjCClassDeclaration(URL);
GPBObjCClassDeclaration(UUID);
GPBObjCClassDeclaration(VideoInput);

#pragma mark - InputRoot

@implementation InputRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - InputRoot_FileDescriptor

static GPBFileDescriptor *InputRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"rv.data"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - VideoInput

@implementation VideoInput

@dynamic altAudioSourceOneOfCase;
@dynamic hasUuid, uuid;
@dynamic userDescription;
@dynamic hasVideoInputDevice, videoInputDevice;
@dynamic hasDisplayColor, displayColor;
@dynamic hasThumbnailPath, thumbnailPath;
@dynamic audioType;
@dynamic audioDevice;
@dynamic videoDevice;

typedef struct VideoInput__storage_ {
  uint32_t _has_storage_[2];
  VideoInput_AudioDeviceType audioType;
  UUID *uuid;
  NSString *userDescription;
  Media_VideoDevice *videoInputDevice;
  Color *displayColor;
  URL *thumbnailPath;
  DigitalAudio_Device *audioDevice;
  Media_VideoDevice *videoDevice;
} VideoInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = VideoInput_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(VideoInput__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userDescription",
        .dataTypeSpecific.clazz = Nil,
        .number = VideoInput_FieldNumber_UserDescription,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(VideoInput__storage_, userDescription),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "videoInputDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(Media_VideoDevice),
        .number = VideoInput_FieldNumber_VideoInputDevice,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(VideoInput__storage_, videoInputDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "displayColor",
        .dataTypeSpecific.clazz = GPBObjCClass(Color),
        .number = VideoInput_FieldNumber_DisplayColor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(VideoInput__storage_, displayColor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "thumbnailPath",
        .dataTypeSpecific.clazz = GPBObjCClass(URL),
        .number = VideoInput_FieldNumber_ThumbnailPath,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(VideoInput__storage_, thumbnailPath),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device),
        .number = VideoInput_FieldNumber_AudioDevice,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VideoInput__storage_, audioDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "videoDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(Media_VideoDevice),
        .number = VideoInput_FieldNumber_VideoDevice,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(VideoInput__storage_, videoDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "audioType",
        .dataTypeSpecific.enumDescFunc = VideoInput_AudioDeviceType_EnumDescriptor,
        .number = VideoInput_FieldNumber_AudioType,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(VideoInput__storage_, audioType),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoInput class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoInput__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "altAudioSource",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t VideoInput_AudioType_RawValue(VideoInput *message) {
  GPBDescriptor *descriptor = [VideoInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VideoInput_FieldNumber_AudioType];
  return GPBGetMessageRawEnumField(message, field);
}

void SetVideoInput_AudioType_RawValue(VideoInput *message, int32_t value) {
  GPBDescriptor *descriptor = [VideoInput descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:VideoInput_FieldNumber_AudioType];
  GPBSetMessageRawEnumField(message, field, value);
}

void VideoInput_ClearAltAudioSourceOneOfCase(VideoInput *message) {
  GPBDescriptor *descriptor = [VideoInput descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - Enum VideoInput_AudioDeviceType

GPBEnumDescriptor *VideoInput_AudioDeviceType_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "AudioDeviceTypeDefault\000AudioDeviceTypeNo"
        "ne\000AudioDeviceTypeAlternate\000";
    static const int32_t values[] = {
        VideoInput_AudioDeviceType_AudioDeviceTypeDefault,
        VideoInput_AudioDeviceType_AudioDeviceTypeNone,
        VideoInput_AudioDeviceType_AudioDeviceTypeAlternate,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(VideoInput_AudioDeviceType)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:VideoInput_AudioDeviceType_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL VideoInput_AudioDeviceType_IsValidValue(int32_t value__) {
  switch (value__) {
    case VideoInput_AudioDeviceType_AudioDeviceTypeDefault:
    case VideoInput_AudioDeviceType_AudioDeviceTypeNone:
    case VideoInput_AudioDeviceType_AudioDeviceTypeAlternate:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - VideoInput_SettingsDocument

@implementation VideoInput_SettingsDocument

@dynamic inputsArray, inputsArray_Count;

typedef struct VideoInput_SettingsDocument__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *inputsArray;
} VideoInput_SettingsDocument__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "inputsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(VideoInput),
        .number = VideoInput_SettingsDocument_FieldNumber_InputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(VideoInput_SettingsDocument__storage_, inputsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[VideoInput_SettingsDocument class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(VideoInput_SettingsDocument__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(VideoInput)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioInput

@implementation AudioInput

@dynamic sourceOneOfCase;
@dynamic hasUuid, uuid;
@dynamic userDescription;
@dynamic hasBehaviorMode, behaviorMode;
@dynamic audioDevice;
@dynamic videoDevice;

typedef struct AudioInput__storage_ {
  uint32_t _has_storage_[2];
  UUID *uuid;
  NSString *userDescription;
  DigitalAudio_Device *audioDevice;
  Media_VideoDevice *videoDevice;
  AudioInput_BehaviorMode *behaviorMode;
} AudioInput__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = GPBObjCClass(UUID),
        .number = AudioInput_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AudioInput__storage_, uuid),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "userDescription",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioInput_FieldNumber_UserDescription,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AudioInput__storage_, userDescription),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "audioDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(DigitalAudio_Device),
        .number = AudioInput_FieldNumber_AudioDevice,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AudioInput__storage_, audioDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "videoDevice",
        .dataTypeSpecific.clazz = GPBObjCClass(Media_VideoDevice),
        .number = AudioInput_FieldNumber_VideoDevice,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AudioInput__storage_, videoDevice),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "behaviorMode",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioInput_BehaviorMode),
        .number = AudioInput_FieldNumber_BehaviorMode,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AudioInput__storage_, behaviorMode),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioInput class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioInput__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "source",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void AudioInput_ClearSourceOneOfCase(AudioInput *message) {
  GPBDescriptor *descriptor = [AudioInput descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - AudioInput_BehaviorMode

@implementation AudioInput_BehaviorMode

@dynamic modeOneOfCase;
@dynamic on;
@dynamic off;
@dynamic autoOn;
@dynamic autoOff;

typedef struct AudioInput_BehaviorMode__storage_ {
  uint32_t _has_storage_[2];
  AudioInput_BehaviorMode_On *on;
  AudioInput_BehaviorMode_Off *off;
  AudioInput_BehaviorMode_AutoOn *autoOn;
  AudioInput_BehaviorMode_AutoOff *autoOff;
} AudioInput_BehaviorMode__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "on",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioInput_BehaviorMode_On),
        .number = AudioInput_BehaviorMode_FieldNumber_On,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AudioInput_BehaviorMode__storage_, on),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "off",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioInput_BehaviorMode_Off),
        .number = AudioInput_BehaviorMode_FieldNumber_Off,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AudioInput_BehaviorMode__storage_, off),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "autoOn",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioInput_BehaviorMode_AutoOn),
        .number = AudioInput_BehaviorMode_FieldNumber_AutoOn,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AudioInput_BehaviorMode__storage_, autoOn),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "autoOff",
        .dataTypeSpecific.clazz = GPBObjCClass(AudioInput_BehaviorMode_AutoOff),
        .number = AudioInput_BehaviorMode_FieldNumber_AutoOff,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AudioInput_BehaviorMode__storage_, autoOff),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioInput_BehaviorMode class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioInput_BehaviorMode__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "mode",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(AudioInput)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void AudioInput_BehaviorMode_ClearModeOneOfCase(AudioInput_BehaviorMode *message) {
  GPBDescriptor *descriptor = [AudioInput_BehaviorMode descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - AudioInput_BehaviorMode_On

@implementation AudioInput_BehaviorMode_On


typedef struct AudioInput_BehaviorMode_On__storage_ {
  uint32_t _has_storage_[1];
} AudioInput_BehaviorMode_On__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioInput_BehaviorMode_On class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AudioInput_BehaviorMode_On__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(AudioInput_BehaviorMode)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioInput_BehaviorMode_Off

@implementation AudioInput_BehaviorMode_Off


typedef struct AudioInput_BehaviorMode_Off__storage_ {
  uint32_t _has_storage_[1];
} AudioInput_BehaviorMode_Off__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioInput_BehaviorMode_Off class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AudioInput_BehaviorMode_Off__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(AudioInput_BehaviorMode)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioInput_BehaviorMode_AutoOff

@implementation AudioInput_BehaviorMode_AutoOff


typedef struct AudioInput_BehaviorMode_AutoOff__storage_ {
  uint32_t _has_storage_[1];
} AudioInput_BehaviorMode_AutoOff__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioInput_BehaviorMode_AutoOff class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(AudioInput_BehaviorMode_AutoOff__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(AudioInput_BehaviorMode)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AudioInput_BehaviorMode_AutoOn

@implementation AudioInput_BehaviorMode_AutoOn

@dynamic linkedVideoInputsArray, linkedVideoInputsArray_Count;

typedef struct AudioInput_BehaviorMode_AutoOn__storage_ {
  uint32_t _has_storage_[1];
  GPBUInt32Array *linkedVideoInputsArray;
} AudioInput_BehaviorMode_AutoOn__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "linkedVideoInputsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = AudioInput_BehaviorMode_AutoOn_FieldNumber_LinkedVideoInputsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(AudioInput_BehaviorMode_AutoOn__storage_, linkedVideoInputsArray),
        .flags = (GPBFieldFlags)(GPBFieldRepeated | GPBFieldPacked),
        .dataType = GPBDataTypeUInt32,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AudioInput_BehaviorMode_AutoOn class]
                                     rootClass:[InputRoot class]
                                          file:InputRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AudioInput_BehaviorMode_AutoOn__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    [localDescriptor setupContainingMessageClass:GPBObjCClass(AudioInput_BehaviorMode)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
